{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keyFieldsSelectInvalidType = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst utils_1 = require(\"../../utils\");\n\nexports.keyFieldsSelectInvalidType = ({\n  schema\n}) => {\n  const errors = [];\n  const types = schema.getTypeMap();\n\n  for (const [typeName, namedType] of Object.entries(types)) {\n    if (!graphql_1.isObjectType(namedType)) continue;\n    const typeFederationMetadata = utils_1.getFederationMetadata(namedType);\n\n    if (typeFederationMetadata === null || typeFederationMetadata === void 0 ? void 0 : typeFederationMetadata.keys) {\n      const allFieldsInType = namedType.getFields();\n\n      for (const [serviceName, selectionSets] of Object.entries(typeFederationMetadata.keys)) {\n        for (const selectionSet of selectionSets) {\n          for (const field of selectionSet) {\n            const name = field.name.value;\n            const matchingField = allFieldsInType[name];\n\n            if (!matchingField) {\n              errors.push(utils_1.errorWithCode('KEY_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName) + `A @key selects ${name}, but ${typeName}.${name} could not be found`));\n            }\n\n            if (matchingField) {\n              if (graphql_1.isInterfaceType(matchingField.type) || graphql_1.isNonNullType(matchingField.type) && graphql_1.isInterfaceType(graphql_1.getNullableType(matchingField.type))) {\n                errors.push(utils_1.errorWithCode('KEY_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName) + `A @key selects ${typeName}.${name}, which is an interface type. Keys cannot select interfaces.`));\n              }\n\n              if (graphql_1.isUnionType(matchingField.type) || graphql_1.isNonNullType(matchingField.type) && graphql_1.isUnionType(graphql_1.getNullableType(matchingField.type))) {\n                errors.push(utils_1.errorWithCode('KEY_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName) + `A @key selects ${typeName}.${name}, which is a union type. Keys cannot select union types.`));\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return errors;\n};","map":{"version":3,"sources":["../../../../src/composition/validate/postComposition/keyFieldsSelectInvalidType.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AASA,MAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAQa,OAAA,CAAA,0BAAA,GAAuD,CAAC;AACnE,EAAA;AADmE,CAAD,KAE/D;AACH,QAAM,MAAM,GAAmB,EAA/B;AAEA,QAAM,KAAK,GAAG,MAAM,CAAC,UAAP,EAAd;;AACA,OAAK,MAAM,CAAC,QAAD,EAAW,SAAX,CAAX,IAAoC,MAAM,CAAC,OAAP,CAAe,KAAf,CAApC,EAA2D;AACzD,QAAI,CAAC,SAAA,CAAA,YAAA,CAAa,SAAb,CAAL,EAA8B;AAE9B,UAAM,sBAAsB,GAAG,OAAA,CAAA,qBAAA,CAAsB,SAAtB,CAA/B;;AACA,QAAI,sBAAsB,KAAA,IAAtB,IAAA,sBAAsB,KAAA,KAAA,CAAtB,GAAsB,KAAA,CAAtB,GAAA,sBAAsB,CAAE,IAA5B,EAAkC;AAChC,YAAM,eAAe,GAAG,SAAS,CAAC,SAAV,EAAxB;;AACA,WAAK,MAAM,CAAC,WAAD,EAAc,aAAd,CAAX,IAA2C,MAAM,CAAC,OAAP,CACzC,sBAAsB,CAAC,IADkB,CAA3C,EAEG;AACD,aAAK,MAAM,YAAX,IAA2B,aAA3B,EAA0C;AACxC,eAAK,MAAM,KAAX,IAAoB,YAApB,EAAiD;AAC/C,kBAAM,IAAI,GAAG,KAAK,CAAC,IAAN,CAAW,KAAxB;AAGA,kBAAM,aAAa,GAAG,eAAe,CAAC,IAAD,CAArC;;AACA,gBAAI,CAAC,aAAL,EAAoB;AAClB,cAAA,MAAM,CAAC,IAAP,CACE,OAAA,CAAA,aAAA,CACE,gCADF,EAEE,OAAA,CAAA,iBAAA,CAAkB,WAAlB,EAA+B,QAA/B,IACE,kBAAkB,IAAI,SAAS,QAAQ,IAAI,IAAI,qBAHnD,CADF;AAOD;;AAED,gBAAI,aAAJ,EAAmB;AACjB,kBACE,SAAA,CAAA,eAAA,CAAgB,aAAa,CAAC,IAA9B,KACC,SAAA,CAAA,aAAA,CAAc,aAAa,CAAC,IAA5B,KACC,SAAA,CAAA,eAAA,CAAgB,SAAA,CAAA,eAAA,CAAgB,aAAa,CAAC,IAA9B,CAAhB,CAHJ,EAIE;AACA,gBAAA,MAAM,CAAC,IAAP,CACE,OAAA,CAAA,aAAA,CACE,gCADF,EAEE,OAAA,CAAA,iBAAA,CAAkB,WAAlB,EAA+B,QAA/B,IACE,kBAAkB,QAAQ,IAAI,IAAI,8DAHtC,CADF;AAOD;;AAED,kBACE,SAAA,CAAA,WAAA,CAAY,aAAa,CAAC,IAA1B,KACC,SAAA,CAAA,aAAA,CAAc,aAAa,CAAC,IAA5B,KACC,SAAA,CAAA,WAAA,CAAY,SAAA,CAAA,eAAA,CAAgB,aAAa,CAAC,IAA9B,CAAZ,CAHJ,EAIE;AACA,gBAAA,MAAM,CAAC,IAAP,CACE,OAAA,CAAA,aAAA,CACE,gCADF,EAEE,OAAA,CAAA,iBAAA,CAAkB,WAAlB,EAA+B,QAA/B,IACE,kBAAkB,QAAQ,IAAI,IAAI,0DAHtC,CADF;AAOD;AACF;AACF;AACF;AACF;AACF;AACF;;AAED,SAAO,MAAP;AACD,CAnEY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.keyFieldsSelectInvalidType = void 0;\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"../../utils\");\nexports.keyFieldsSelectInvalidType = ({ schema, }) => {\n    const errors = [];\n    const types = schema.getTypeMap();\n    for (const [typeName, namedType] of Object.entries(types)) {\n        if (!graphql_1.isObjectType(namedType))\n            continue;\n        const typeFederationMetadata = utils_1.getFederationMetadata(namedType);\n        if (typeFederationMetadata === null || typeFederationMetadata === void 0 ? void 0 : typeFederationMetadata.keys) {\n            const allFieldsInType = namedType.getFields();\n            for (const [serviceName, selectionSets] of Object.entries(typeFederationMetadata.keys)) {\n                for (const selectionSet of selectionSets) {\n                    for (const field of selectionSet) {\n                        const name = field.name.value;\n                        const matchingField = allFieldsInType[name];\n                        if (!matchingField) {\n                            errors.push(utils_1.errorWithCode('KEY_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName) +\n                                `A @key selects ${name}, but ${typeName}.${name} could not be found`));\n                        }\n                        if (matchingField) {\n                            if (graphql_1.isInterfaceType(matchingField.type) ||\n                                (graphql_1.isNonNullType(matchingField.type) &&\n                                    graphql_1.isInterfaceType(graphql_1.getNullableType(matchingField.type)))) {\n                                errors.push(utils_1.errorWithCode('KEY_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName) +\n                                    `A @key selects ${typeName}.${name}, which is an interface type. Keys cannot select interfaces.`));\n                            }\n                            if (graphql_1.isUnionType(matchingField.type) ||\n                                (graphql_1.isNonNullType(matchingField.type) &&\n                                    graphql_1.isUnionType(graphql_1.getNullableType(matchingField.type)))) {\n                                errors.push(utils_1.errorWithCode('KEY_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName) +\n                                    `A @key selects ${typeName}.${name}, which is a union type. Keys cannot select union types.`));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return errors;\n};\n//# sourceMappingURL=keyFieldsSelectInvalidType.js.map"]},"metadata":{},"sourceType":"script"}