{"ast":null,"code":"/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\n/// <reference path=\"./thenable.ts\" />\n'use strict';\n\nfunction __export(m) {\n  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\n\nexports.Event = vscode_languageserver_protocol_1.Event;\n\nconst configuration_1 = require(\"./configuration\");\n\nconst workspaceFolders_1 = require(\"./workspaceFolders\");\n\nconst Is = require(\"./utils/is\");\n\nconst UUID = require(\"./utils/uuid\"); // ------------- Reexport the API surface of the language worker API ----------------------\n\n\n__export(require(\"vscode-languageserver-protocol\"));\n\nconst fm = require(\"./files\");\n\nvar Files;\n\n(function (Files) {\n  Files.uriToFilePath = fm.uriToFilePath;\n  Files.resolveGlobalNodePath = fm.resolveGlobalNodePath;\n  Files.resolveGlobalYarnPath = fm.resolveGlobalYarnPath;\n  Files.resolve = fm.resolve;\n  Files.resolveModule = fm.resolveModule;\n  Files.resolveModule2 = fm.resolveModule2;\n  Files.resolveModulePath = fm.resolveModulePath;\n})(Files = exports.Files || (exports.Files = {}));\n\nlet shutdownReceived = false;\nlet exitTimer = undefined;\n\nfunction setupExitTimer() {\n  const argName = '--clientProcessId';\n\n  function runTimer(value) {\n    try {\n      let processId = parseInt(value);\n\n      if (!isNaN(processId)) {\n        exitTimer = setInterval(() => {\n          try {\n            process.kill(processId, 0);\n          } catch (ex) {\n            // Parent process doesn't exist anymore. Exit the server.\n            process.exit(shutdownReceived ? 0 : 1);\n          }\n        }, 3000);\n      }\n    } catch (e) {// Ignore errors;\n    }\n  }\n\n  for (let i = 2; i < process.argv.length; i++) {\n    let arg = process.argv[i];\n\n    if (arg === argName && i + 1 < process.argv.length) {\n      runTimer(process.argv[i + 1]);\n      return;\n    } else {\n      let args = arg.split('=');\n\n      if (args[0] === argName) {\n        runTimer(args[1]);\n      }\n    }\n  }\n}\n\nsetupExitTimer();\n\nfunction null2Undefined(value) {\n  if (value === null) {\n    return void 0;\n  }\n\n  return value;\n}\n/**\r\n * A manager for simple text documents\r\n */\n\n\nclass TextDocuments {\n  /**\r\n   * Create a new text document manager.\r\n   */\n  constructor() {\n    this._documents = Object.create(null);\n    this._onDidChangeContent = new vscode_languageserver_protocol_1.Emitter();\n    this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();\n    this._onDidClose = new vscode_languageserver_protocol_1.Emitter();\n    this._onDidSave = new vscode_languageserver_protocol_1.Emitter();\n    this._onWillSave = new vscode_languageserver_protocol_1.Emitter();\n  }\n  /**\r\n   * Returns the [TextDocumentSyncKind](#TextDocumentSyncKind) used by\r\n   * this text document manager.\r\n   */\n\n\n  get syncKind() {\n    return vscode_languageserver_protocol_1.TextDocumentSyncKind.Full;\n  }\n  /**\r\n   * An event that fires when a text document managed by this manager\r\n   * has been opened or the content changes.\r\n   */\n\n\n  get onDidChangeContent() {\n    return this._onDidChangeContent.event;\n  }\n  /**\r\n   * An event that fires when a text document managed by this manager\r\n   * has been opened.\r\n   */\n\n\n  get onDidOpen() {\n    return this._onDidOpen.event;\n  }\n  /**\r\n   * An event that fires when a text document managed by this manager\r\n   * will be saved.\r\n   */\n\n\n  get onWillSave() {\n    return this._onWillSave.event;\n  }\n  /**\r\n   * Sets a handler that will be called if a participant wants to provide\r\n   * edits during a text document save.\r\n   */\n\n\n  onWillSaveWaitUntil(handler) {\n    this._willSaveWaitUntil = handler;\n  }\n  /**\r\n   * An event that fires when a text document managed by this manager\r\n   * has been saved.\r\n   */\n\n\n  get onDidSave() {\n    return this._onDidSave.event;\n  }\n  /**\r\n   * An event that fires when a text document managed by this manager\r\n   * has been closed.\r\n   */\n\n\n  get onDidClose() {\n    return this._onDidClose.event;\n  }\n  /**\r\n   * Returns the document for the given URI. Returns undefined if\r\n   * the document is not mananged by this instance.\r\n   *\r\n   * @param uri The text document's URI to retrieve.\r\n   * @return the text document or `undefined`.\r\n   */\n\n\n  get(uri) {\n    return this._documents[uri];\n  }\n  /**\r\n   * Returns all text documents managed by this instance.\r\n   *\r\n   * @return all text documents.\r\n   */\n\n\n  all() {\n    return Object.keys(this._documents).map(key => this._documents[key]);\n  }\n  /**\r\n   * Returns the URIs of all text documents managed by this instance.\r\n   *\r\n   * @return the URI's of all text documents.\r\n   */\n\n\n  keys() {\n    return Object.keys(this._documents);\n  }\n  /**\r\n   * Listens for `low level` notification on the given connection to\r\n   * update the text documents managed by this instance.\r\n   *\r\n   * @param connection The connection to listen on.\r\n   */\n\n\n  listen(connection) {\n    function isUpdateableDocument(value) {\n      return Is.func(value.update);\n    }\n\n    connection.__textDocumentSync = vscode_languageserver_protocol_1.TextDocumentSyncKind.Full;\n    connection.onDidOpenTextDocument(event => {\n      let td = event.textDocument;\n      let document = vscode_languageserver_protocol_1.TextDocument.create(td.uri, td.languageId, td.version, td.text);\n      this._documents[td.uri] = document;\n      let toFire = Object.freeze({\n        document\n      });\n\n      this._onDidOpen.fire(toFire);\n\n      this._onDidChangeContent.fire(toFire);\n    });\n    connection.onDidChangeTextDocument(event => {\n      let td = event.textDocument;\n      let changes = event.contentChanges;\n      let last = changes.length > 0 ? changes[changes.length - 1] : undefined;\n\n      if (last) {\n        let document = this._documents[td.uri];\n\n        if (document && isUpdateableDocument(document)) {\n          if (td.version === null || td.version === void 0) {\n            throw new Error(`Received document change event for ${td.uri} without valid version identifier`);\n          }\n\n          document.update(last, td.version);\n\n          this._onDidChangeContent.fire(Object.freeze({\n            document\n          }));\n        }\n      }\n    });\n    connection.onDidCloseTextDocument(event => {\n      let document = this._documents[event.textDocument.uri];\n\n      if (document) {\n        delete this._documents[event.textDocument.uri];\n\n        this._onDidClose.fire(Object.freeze({\n          document\n        }));\n      }\n    });\n    connection.onWillSaveTextDocument(event => {\n      let document = this._documents[event.textDocument.uri];\n\n      if (document) {\n        this._onWillSave.fire(Object.freeze({\n          document,\n          reason: event.reason\n        }));\n      }\n    });\n    connection.onWillSaveTextDocumentWaitUntil((event, token) => {\n      let document = this._documents[event.textDocument.uri];\n\n      if (document && this._willSaveWaitUntil) {\n        return this._willSaveWaitUntil(Object.freeze({\n          document,\n          reason: event.reason\n        }), token);\n      } else {\n        return [];\n      }\n    });\n    connection.onDidSaveTextDocument(event => {\n      let document = this._documents[event.textDocument.uri];\n\n      if (document) {\n        this._onDidSave.fire(Object.freeze({\n          document\n        }));\n      }\n    });\n  }\n\n}\n\nexports.TextDocuments = TextDocuments;\n/**\r\n * Helps tracking error message. Equal occurences of the same\r\n * message are only stored once. This class is for example\r\n * useful if text documents are validated in a loop and equal\r\n * error message should be folded into one.\r\n */\n\nclass ErrorMessageTracker {\n  constructor() {\n    this._messages = Object.create(null);\n  }\n  /**\r\n   * Add a message to the tracker.\r\n   *\r\n   * @param message The message to add.\r\n   */\n\n\n  add(message) {\n    let count = this._messages[message];\n\n    if (!count) {\n      count = 0;\n    }\n\n    count++;\n    this._messages[message] = count;\n  }\n  /**\r\n   * Send all tracked messages to the connection's window.\r\n   *\r\n   * @param connection The connection established between client and server.\r\n   */\n\n\n  sendErrors(connection) {\n    Object.keys(this._messages).forEach(message => {\n      connection.window.showErrorMessage(message);\n    });\n  }\n\n}\n\nexports.ErrorMessageTracker = ErrorMessageTracker;\nvar BulkRegistration;\n\n(function (BulkRegistration) {\n  /**\r\n   * Creates a new bulk registration.\r\n   * @return an empty bulk registration.\r\n   */\n  function create() {\n    return new BulkRegistrationImpl();\n  }\n\n  BulkRegistration.create = create;\n})(BulkRegistration = exports.BulkRegistration || (exports.BulkRegistration = {}));\n\nclass BulkRegistrationImpl {\n  constructor() {\n    this._registrations = [];\n    this._registered = new Set();\n  }\n\n  add(type, registerOptions) {\n    const method = Is.string(type) ? type : type.method;\n\n    if (this._registered.has(method)) {\n      throw new Error(`${method} is already added to this registration`);\n    }\n\n    const id = UUID.generateUuid();\n\n    this._registrations.push({\n      id: id,\n      method: method,\n      registerOptions: registerOptions || {}\n    });\n\n    this._registered.add(method);\n  }\n\n  asRegistrationParams() {\n    return {\n      registrations: this._registrations\n    };\n  }\n\n}\n\nvar BulkUnregistration;\n\n(function (BulkUnregistration) {\n  function create() {\n    return new BulkUnregistrationImpl(undefined, []);\n  }\n\n  BulkUnregistration.create = create;\n})(BulkUnregistration = exports.BulkUnregistration || (exports.BulkUnregistration = {}));\n\nclass BulkUnregistrationImpl {\n  constructor(_connection, unregistrations) {\n    this._connection = _connection;\n    this._unregistrations = new Map();\n    unregistrations.forEach(unregistration => {\n      this._unregistrations.set(unregistration.method, unregistration);\n    });\n  }\n\n  get isAttached() {\n    return !!this._connection;\n  }\n\n  attach(connection) {\n    this._connection = connection;\n  }\n\n  add(unregistration) {\n    this._unregistrations.set(unregistration.method, unregistration);\n  }\n\n  dispose() {\n    let unregistrations = [];\n\n    for (let unregistration of this._unregistrations.values()) {\n      unregistrations.push(unregistration);\n    }\n\n    let params = {\n      unregisterations: unregistrations\n    };\n\n    this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(undefined, _error => {\n      this._connection.console.info(`Bulk unregistration failed.`);\n    });\n  }\n\n  disposeSingle(arg) {\n    const method = Is.string(arg) ? arg : arg.method;\n\n    const unregistration = this._unregistrations.get(method);\n\n    if (!unregistration) {\n      return false;\n    }\n\n    let params = {\n      unregisterations: [unregistration]\n    };\n\n    this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(() => {\n      this._unregistrations.delete(method);\n    }, _error => {\n      this._connection.console.info(`Unregistering request handler for ${unregistration.id} failed.`);\n    });\n\n    return true;\n  }\n\n}\n\nclass ConnectionLogger {\n  constructor() {}\n\n  rawAttach(connection) {\n    this._rawConnection = connection;\n  }\n\n  attach(connection) {\n    this._connection = connection;\n  }\n\n  get connection() {\n    if (!this._connection) {\n      throw new Error('Remote is not attached to a connection yet.');\n    }\n\n    return this._connection;\n  }\n\n  fillServerCapabilities(_capabilities) {}\n\n  initialize(_capabilities) {}\n\n  error(message) {\n    this.send(vscode_languageserver_protocol_1.MessageType.Error, message);\n  }\n\n  warn(message) {\n    this.send(vscode_languageserver_protocol_1.MessageType.Warning, message);\n  }\n\n  info(message) {\n    this.send(vscode_languageserver_protocol_1.MessageType.Info, message);\n  }\n\n  log(message) {\n    this.send(vscode_languageserver_protocol_1.MessageType.Log, message);\n  }\n\n  send(type, message) {\n    if (this._rawConnection) {\n      this._rawConnection.sendNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, {\n        type,\n        message\n      });\n    }\n  }\n\n}\n\nclass RemoteWindowImpl {\n  constructor() {}\n\n  attach(connection) {\n    this._connection = connection;\n  }\n\n  get connection() {\n    if (!this._connection) {\n      throw new Error('Remote is not attached to a connection yet.');\n    }\n\n    return this._connection;\n  }\n\n  initialize(_capabilities) {}\n\n  fillServerCapabilities(_capabilities) {}\n\n  showErrorMessage(message, ...actions) {\n    let params = {\n      type: vscode_languageserver_protocol_1.MessageType.Error,\n      message,\n      actions\n    };\n    return this._connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);\n  }\n\n  showWarningMessage(message, ...actions) {\n    let params = {\n      type: vscode_languageserver_protocol_1.MessageType.Warning,\n      message,\n      actions\n    };\n    return this._connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);\n  }\n\n  showInformationMessage(message, ...actions) {\n    let params = {\n      type: vscode_languageserver_protocol_1.MessageType.Info,\n      message,\n      actions\n    };\n    return this._connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);\n  }\n\n}\n\nclass RemoteClientImpl {\n  attach(connection) {\n    this._connection = connection;\n  }\n\n  get connection() {\n    if (!this._connection) {\n      throw new Error('Remote is not attached to a connection yet.');\n    }\n\n    return this._connection;\n  }\n\n  initialize(_capabilities) {}\n\n  fillServerCapabilities(_capabilities) {}\n\n  register(typeOrRegistrations, registerOptionsOrType, registerOptions) {\n    if (typeOrRegistrations instanceof BulkRegistrationImpl) {\n      return this.registerMany(typeOrRegistrations);\n    } else if (typeOrRegistrations instanceof BulkUnregistrationImpl) {\n      return this.registerSingle1(typeOrRegistrations, registerOptionsOrType, registerOptions);\n    } else {\n      return this.registerSingle2(typeOrRegistrations, registerOptionsOrType);\n    }\n  }\n\n  registerSingle1(unregistration, type, registerOptions) {\n    const method = Is.string(type) ? type : type.method;\n    const id = UUID.generateUuid();\n    let params = {\n      registrations: [{\n        id,\n        method,\n        registerOptions: registerOptions || {}\n      }]\n    };\n\n    if (!unregistration.isAttached) {\n      unregistration.attach(this._connection);\n    }\n\n    return this._connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(_result => {\n      unregistration.add({\n        id: id,\n        method: method\n      });\n      return unregistration;\n    }, _error => {\n      this.connection.console.info(`Registering request handler for ${method} failed.`);\n      return Promise.reject(_error);\n    });\n  }\n\n  registerSingle2(type, registerOptions) {\n    const method = Is.string(type) ? type : type.method;\n    const id = UUID.generateUuid();\n    let params = {\n      registrations: [{\n        id,\n        method,\n        registerOptions: registerOptions || {}\n      }]\n    };\n    return this._connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(_result => {\n      return vscode_languageserver_protocol_1.Disposable.create(() => {\n        this.unregisterSingle(id, method);\n      });\n    }, _error => {\n      this.connection.console.info(`Registering request handler for ${method} failed.`);\n      return Promise.reject(_error);\n    });\n  }\n\n  unregisterSingle(id, method) {\n    let params = {\n      unregisterations: [{\n        id,\n        method\n      }]\n    };\n    return this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(undefined, _error => {\n      this.connection.console.info(`Unregistering request handler for ${id} failed.`);\n    });\n  }\n\n  registerMany(registrations) {\n    let params = registrations.asRegistrationParams();\n    return this._connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(() => {\n      return new BulkUnregistrationImpl(this._connection, params.registrations.map(registration => {\n        return {\n          id: registration.id,\n          method: registration.method\n        };\n      }));\n    }, _error => {\n      this.connection.console.info(`Bulk registration failed.`);\n      return Promise.reject(_error);\n    });\n  }\n\n}\n\nclass _RemoteWorkspaceImpl {\n  constructor() {}\n\n  attach(connection) {\n    this._connection = connection;\n  }\n\n  get connection() {\n    if (!this._connection) {\n      throw new Error('Remote is not attached to a connection yet.');\n    }\n\n    return this._connection;\n  }\n\n  initialize(_capabilities) {}\n\n  fillServerCapabilities(_capabilities) {}\n\n  applyEdit(paramOrEdit) {\n    function isApplyWorkspaceEditParams(value) {\n      return value && !!value.edit;\n    }\n\n    let params = isApplyWorkspaceEditParams(paramOrEdit) ? paramOrEdit : {\n      edit: paramOrEdit\n    };\n    return this._connection.sendRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, params);\n  }\n\n}\n\nconst RemoteWorkspaceImpl = workspaceFolders_1.WorkspaceFoldersFeature(configuration_1.ConfigurationFeature(_RemoteWorkspaceImpl));\n\nclass TracerImpl {\n  constructor() {\n    this._trace = vscode_languageserver_protocol_1.Trace.Off;\n  }\n\n  attach(connection) {\n    this._connection = connection;\n  }\n\n  get connection() {\n    if (!this._connection) {\n      throw new Error('Remote is not attached to a connection yet.');\n    }\n\n    return this._connection;\n  }\n\n  initialize(_capabilities) {}\n\n  fillServerCapabilities(_capabilities) {}\n\n  set trace(value) {\n    this._trace = value;\n  }\n\n  log(message, verbose) {\n    if (this._trace === vscode_languageserver_protocol_1.Trace.Off) {\n      return;\n    }\n\n    this._connection.sendNotification(vscode_languageserver_protocol_1.LogTraceNotification.type, {\n      message: message,\n      verbose: this._trace === vscode_languageserver_protocol_1.Trace.Verbose ? verbose : undefined\n    });\n  }\n\n}\n\nclass TelemetryImpl {\n  constructor() {}\n\n  attach(connection) {\n    this._connection = connection;\n  }\n\n  get connection() {\n    if (!this._connection) {\n      throw new Error('Remote is not attached to a connection yet.');\n    }\n\n    return this._connection;\n  }\n\n  initialize(_capabilities) {}\n\n  fillServerCapabilities(_capabilities) {}\n\n  logEvent(data) {\n    this._connection.sendNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, data);\n  }\n\n}\n\nfunction combineConsoleFeatures(one, two) {\n  return function (Base) {\n    return two(one(Base));\n  };\n}\n\nexports.combineConsoleFeatures = combineConsoleFeatures;\n\nfunction combineTelemetryFeatures(one, two) {\n  return function (Base) {\n    return two(one(Base));\n  };\n}\n\nexports.combineTelemetryFeatures = combineTelemetryFeatures;\n\nfunction combineTracerFeatures(one, two) {\n  return function (Base) {\n    return two(one(Base));\n  };\n}\n\nexports.combineTracerFeatures = combineTracerFeatures;\n\nfunction combineClientFeatures(one, two) {\n  return function (Base) {\n    return two(one(Base));\n  };\n}\n\nexports.combineClientFeatures = combineClientFeatures;\n\nfunction combineWindowFeatures(one, two) {\n  return function (Base) {\n    return two(one(Base));\n  };\n}\n\nexports.combineWindowFeatures = combineWindowFeatures;\n\nfunction combineWorkspaceFeatures(one, two) {\n  return function (Base) {\n    return two(one(Base));\n  };\n}\n\nexports.combineWorkspaceFeatures = combineWorkspaceFeatures;\n\nfunction combineFeatures(one, two) {\n  function combine(one, two, func) {\n    if (one && two) {\n      return func(one, two);\n    } else if (one) {\n      return one;\n    } else {\n      return two;\n    }\n  }\n\n  let result = {\n    __brand: 'features',\n    console: combine(one.console, two.console, combineConsoleFeatures),\n    tracer: combine(one.tracer, two.tracer, combineTracerFeatures),\n    telemetry: combine(one.telemetry, two.telemetry, combineTelemetryFeatures),\n    client: combine(one.client, two.client, combineClientFeatures),\n    window: combine(one.window, two.window, combineWindowFeatures),\n    workspace: combine(one.workspace, two.workspace, combineWorkspaceFeatures)\n  };\n  return result;\n}\n\nexports.combineFeatures = combineFeatures;\n\nfunction createConnection(arg1, arg2, arg3, arg4) {\n  let factories;\n  let input;\n  let output;\n  let strategy;\n\n  if (arg1 !== void 0 && arg1.__brand === 'features') {\n    factories = arg1;\n    arg1 = arg2;\n    arg2 = arg3;\n    arg3 = arg4;\n  }\n\n  if (vscode_languageserver_protocol_1.ConnectionStrategy.is(arg1)) {\n    strategy = arg1;\n  } else {\n    input = arg1;\n    output = arg2;\n    strategy = arg3;\n  }\n\n  return _createConnection(input, output, strategy, factories);\n}\n\nexports.createConnection = createConnection;\n\nfunction _createConnection(input, output, strategy, factories) {\n  if (!input && !output && process.argv.length > 2) {\n    let port = void 0;\n    let pipeName = void 0;\n    let argv = process.argv.slice(2);\n\n    for (let i = 0; i < argv.length; i++) {\n      let arg = argv[i];\n\n      if (arg === '--node-ipc') {\n        input = new vscode_languageserver_protocol_1.IPCMessageReader(process);\n        output = new vscode_languageserver_protocol_1.IPCMessageWriter(process);\n        break;\n      } else if (arg === '--stdio') {\n        input = process.stdin;\n        output = process.stdout;\n        break;\n      } else if (arg === '--socket') {\n        port = parseInt(argv[i + 1]);\n        break;\n      } else if (arg === '--pipe') {\n        pipeName = argv[i + 1];\n        break;\n      } else {\n        var args = arg.split('=');\n\n        if (args[0] === '--socket') {\n          port = parseInt(args[1]);\n          break;\n        } else if (args[0] === '--pipe') {\n          pipeName = args[1];\n          break;\n        }\n      }\n    }\n\n    if (port) {\n      let transport = vscode_languageserver_protocol_1.createServerSocketTransport(port);\n      input = transport[0];\n      output = transport[1];\n    } else if (pipeName) {\n      let transport = vscode_languageserver_protocol_1.createServerPipeTransport(pipeName);\n      input = transport[0];\n      output = transport[1];\n    }\n  }\n\n  var commandLineMessage = \"Use arguments of createConnection or set command line parameters: '--node-ipc', '--stdio' or '--socket={number}'\";\n\n  if (!input) {\n    throw new Error(\"Connection input stream is not set. \" + commandLineMessage);\n  }\n\n  if (!output) {\n    throw new Error(\"Connection output stream is not set. \" + commandLineMessage);\n  } // Backwards compatibility\n\n\n  if (Is.func(input.read) && Is.func(input.on)) {\n    let inputStream = input;\n    inputStream.on('end', () => {\n      process.exit(shutdownReceived ? 0 : 1);\n    });\n    inputStream.on('close', () => {\n      process.exit(shutdownReceived ? 0 : 1);\n    });\n  }\n\n  const logger = factories && factories.console ? new (factories.console(ConnectionLogger))() : new ConnectionLogger();\n  const connection = vscode_languageserver_protocol_1.createProtocolConnection(input, output, logger, strategy);\n  logger.rawAttach(connection);\n  const tracer = factories && factories.tracer ? new (factories.tracer(TracerImpl))() : new TracerImpl();\n  const telemetry = factories && factories.telemetry ? new (factories.telemetry(TelemetryImpl))() : new TelemetryImpl();\n  const client = factories && factories.client ? new (factories.client(RemoteClientImpl))() : new RemoteClientImpl();\n  const remoteWindow = factories && factories.window ? new (factories.window(RemoteWindowImpl))() : new RemoteWindowImpl();\n  const workspace = factories && factories.workspace ? new (factories.workspace(RemoteWorkspaceImpl))() : new RemoteWorkspaceImpl();\n  const allRemotes = [logger, tracer, telemetry, client, remoteWindow, workspace];\n\n  function asThenable(value) {\n    if (Is.thenable(value)) {\n      return value;\n    } else {\n      return Promise.resolve(value);\n    }\n  }\n\n  let shutdownHandler = undefined;\n  let initializeHandler = undefined;\n  let exitHandler = undefined;\n  let protocolConnection = {\n    listen: () => connection.listen(),\n    sendRequest: (type, ...params) => connection.sendRequest(Is.string(type) ? type : type.method, ...params),\n    onRequest: (type, handler) => connection.onRequest(type, handler),\n    sendNotification: (type, param) => {\n      const method = Is.string(type) ? type : type.method;\n\n      if (arguments.length === 1) {\n        connection.sendNotification(method);\n      } else {\n        connection.sendNotification(method, param);\n      }\n    },\n    onNotification: (type, handler) => connection.onNotification(type, handler),\n    onInitialize: handler => initializeHandler = handler,\n    onInitialized: handler => connection.onNotification(vscode_languageserver_protocol_1.InitializedNotification.type, handler),\n    onShutdown: handler => shutdownHandler = handler,\n    onExit: handler => exitHandler = handler,\n\n    get console() {\n      return logger;\n    },\n\n    get telemetry() {\n      return telemetry;\n    },\n\n    get tracer() {\n      return tracer;\n    },\n\n    get client() {\n      return client;\n    },\n\n    get window() {\n      return remoteWindow;\n    },\n\n    get workspace() {\n      return workspace;\n    },\n\n    onDidChangeConfiguration: handler => connection.onNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, handler),\n    onDidChangeWatchedFiles: handler => connection.onNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, handler),\n    __textDocumentSync: undefined,\n    onDidOpenTextDocument: handler => connection.onNotification(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, handler),\n    onDidChangeTextDocument: handler => connection.onNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, handler),\n    onDidCloseTextDocument: handler => connection.onNotification(vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, handler),\n    onWillSaveTextDocument: handler => connection.onNotification(vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type, handler),\n    onWillSaveTextDocumentWaitUntil: handler => connection.onRequest(vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type, handler),\n    onDidSaveTextDocument: handler => connection.onNotification(vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, handler),\n    sendDiagnostics: params => connection.sendNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, params),\n    onHover: handler => connection.onRequest(vscode_languageserver_protocol_1.HoverRequest.type, handler),\n    onCompletion: handler => connection.onRequest(vscode_languageserver_protocol_1.CompletionRequest.type, handler),\n    onCompletionResolve: handler => connection.onRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, handler),\n    onSignatureHelp: handler => connection.onRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, handler),\n    onDeclaration: handler => connection.onRequest(vscode_languageserver_protocol_1.DeclarationRequest.type, handler),\n    onDefinition: handler => connection.onRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, handler),\n    onTypeDefinition: handler => connection.onRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, handler),\n    onImplementation: handler => connection.onRequest(vscode_languageserver_protocol_1.ImplementationRequest.type, handler),\n    onReferences: handler => connection.onRequest(vscode_languageserver_protocol_1.ReferencesRequest.type, handler),\n    onDocumentHighlight: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentHighlightRequest.type, handler),\n    onDocumentSymbol: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, handler),\n    onWorkspaceSymbol: handler => connection.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, handler),\n    onCodeAction: handler => connection.onRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, handler),\n    onCodeLens: handler => connection.onRequest(vscode_languageserver_protocol_1.CodeLensRequest.type, handler),\n    onCodeLensResolve: handler => connection.onRequest(vscode_languageserver_protocol_1.CodeLensResolveRequest.type, handler),\n    onDocumentFormatting: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, handler),\n    onDocumentRangeFormatting: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, handler),\n    onDocumentOnTypeFormatting: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, handler),\n    onRenameRequest: handler => connection.onRequest(vscode_languageserver_protocol_1.RenameRequest.type, handler),\n    onPrepareRename: handler => connection.onRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, handler),\n    onDocumentLinks: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, handler),\n    onDocumentLinkResolve: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, handler),\n    onDocumentColor: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, handler),\n    onColorPresentation: handler => connection.onRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, handler),\n    onFoldingRanges: handler => connection.onRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, handler),\n    onExecuteCommand: handler => connection.onRequest(vscode_languageserver_protocol_1.ExecuteCommandRequest.type, handler),\n    dispose: () => connection.dispose()\n  };\n\n  for (let remote of allRemotes) {\n    remote.attach(protocolConnection);\n  }\n\n  connection.onRequest(vscode_languageserver_protocol_1.InitializeRequest.type, params => {\n    const processId = params.processId;\n\n    if (Is.number(processId) && exitTimer === void 0) {\n      // We received a parent process id. Set up a timer to periodically check\n      // if the parent is still alive.\n      setInterval(() => {\n        try {\n          process.kill(processId, 0);\n        } catch (ex) {\n          // Parent process doesn't exist anymore. Exit the server.\n          process.exit(shutdownReceived ? 0 : 1);\n        }\n      }, 3000);\n    }\n\n    if (Is.string(params.trace)) {\n      tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.trace);\n    }\n\n    for (let remote of allRemotes) {\n      remote.initialize(params.capabilities);\n    }\n\n    if (initializeHandler) {\n      let result = initializeHandler(params, new vscode_languageserver_protocol_1.CancellationTokenSource().token);\n      return asThenable(result).then(value => {\n        if (value instanceof vscode_languageserver_protocol_1.ResponseError) {\n          return value;\n        }\n\n        let result = value;\n\n        if (!result) {\n          result = {\n            capabilities: {}\n          };\n        }\n\n        let capabilities = result.capabilities;\n\n        if (!capabilities) {\n          capabilities = {};\n          result.capabilities = capabilities;\n        }\n\n        if (capabilities.textDocumentSync === void 0 || capabilities.textDocumentSync === null) {\n          capabilities.textDocumentSync = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;\n        } else if (!Is.number(capabilities.textDocumentSync) && !Is.number(capabilities.textDocumentSync.change)) {\n          capabilities.textDocumentSync.change = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;\n        }\n\n        for (let remote of allRemotes) {\n          remote.fillServerCapabilities(capabilities);\n        }\n\n        return result;\n      });\n    } else {\n      let result = {\n        capabilities: {\n          textDocumentSync: vscode_languageserver_protocol_1.TextDocumentSyncKind.None\n        }\n      };\n\n      for (let remote of allRemotes) {\n        remote.fillServerCapabilities(result.capabilities);\n      }\n\n      return result;\n    }\n  });\n  connection.onRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, () => {\n    shutdownReceived = true;\n\n    if (shutdownHandler) {\n      return shutdownHandler(new vscode_languageserver_protocol_1.CancellationTokenSource().token);\n    } else {\n      return undefined;\n    }\n  });\n  connection.onNotification(vscode_languageserver_protocol_1.ExitNotification.type, () => {\n    try {\n      if (exitHandler) {\n        exitHandler();\n      }\n    } finally {\n      if (shutdownReceived) {\n        process.exit(0);\n      } else {\n        process.exit(1);\n      }\n    }\n  });\n  connection.onNotification(vscode_languageserver_protocol_1.SetTraceNotification.type, params => {\n    tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.value);\n  });\n  return protocolConnection;\n} // Export the protocol currently in proposed state.\n\n\nvar ProposedFeatures;\n\n(function (ProposedFeatures) {\n  ProposedFeatures.all = {\n    __brand: 'features'\n  };\n})(ProposedFeatures = exports.ProposedFeatures || (exports.ProposedFeatures = {}));","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/vscode-languageserver/lib/main.js"],"names":["__export","m","p","exports","hasOwnProperty","Object","defineProperty","value","vscode_languageserver_protocol_1","require","Event","configuration_1","workspaceFolders_1","Is","UUID","fm","Files","uriToFilePath","resolveGlobalNodePath","resolveGlobalYarnPath","resolve","resolveModule","resolveModule2","resolveModulePath","shutdownReceived","exitTimer","undefined","setupExitTimer","argName","runTimer","processId","parseInt","isNaN","setInterval","process","kill","ex","exit","e","i","argv","length","arg","args","split","null2Undefined","TextDocuments","constructor","_documents","create","_onDidChangeContent","Emitter","_onDidOpen","_onDidClose","_onDidSave","_onWillSave","syncKind","TextDocumentSyncKind","Full","onDidChangeContent","event","onDidOpen","onWillSave","onWillSaveWaitUntil","handler","_willSaveWaitUntil","onDidSave","onDidClose","get","uri","all","keys","map","key","listen","connection","isUpdateableDocument","func","update","__textDocumentSync","onDidOpenTextDocument","td","textDocument","document","TextDocument","languageId","version","text","toFire","freeze","fire","onDidChangeTextDocument","changes","contentChanges","last","Error","onDidCloseTextDocument","onWillSaveTextDocument","reason","onWillSaveTextDocumentWaitUntil","token","onDidSaveTextDocument","ErrorMessageTracker","_messages","add","message","count","sendErrors","forEach","window","showErrorMessage","BulkRegistration","BulkRegistrationImpl","_registrations","_registered","Set","type","registerOptions","method","string","has","id","generateUuid","push","asRegistrationParams","registrations","BulkUnregistration","BulkUnregistrationImpl","_connection","unregistrations","_unregistrations","Map","unregistration","set","isAttached","attach","dispose","values","params","unregisterations","sendRequest","UnregistrationRequest","then","_error","console","info","disposeSingle","delete","ConnectionLogger","rawAttach","_rawConnection","fillServerCapabilities","_capabilities","initialize","error","send","MessageType","warn","Warning","Info","log","Log","sendNotification","LogMessageNotification","RemoteWindowImpl","actions","ShowMessageRequest","showWarningMessage","showInformationMessage","RemoteClientImpl","register","typeOrRegistrations","registerOptionsOrType","registerMany","registerSingle1","registerSingle2","RegistrationRequest","_result","Promise","reject","Disposable","unregisterSingle","registration","_RemoteWorkspaceImpl","applyEdit","paramOrEdit","isApplyWorkspaceEditParams","edit","ApplyWorkspaceEditRequest","RemoteWorkspaceImpl","WorkspaceFoldersFeature","ConfigurationFeature","TracerImpl","_trace","Trace","Off","trace","verbose","LogTraceNotification","Verbose","TelemetryImpl","logEvent","data","TelemetryEventNotification","combineConsoleFeatures","one","two","Base","combineTelemetryFeatures","combineTracerFeatures","combineClientFeatures","combineWindowFeatures","combineWorkspaceFeatures","combineFeatures","combine","result","__brand","tracer","telemetry","client","workspace","createConnection","arg1","arg2","arg3","arg4","factories","input","output","strategy","ConnectionStrategy","is","_createConnection","port","pipeName","slice","IPCMessageReader","IPCMessageWriter","stdin","stdout","transport","createServerSocketTransport","createServerPipeTransport","commandLineMessage","read","on","inputStream","logger","createProtocolConnection","remoteWindow","allRemotes","asThenable","thenable","shutdownHandler","initializeHandler","exitHandler","protocolConnection","onRequest","param","arguments","onNotification","onInitialize","onInitialized","InitializedNotification","onShutdown","onExit","onDidChangeConfiguration","DidChangeConfigurationNotification","onDidChangeWatchedFiles","DidChangeWatchedFilesNotification","DidOpenTextDocumentNotification","DidChangeTextDocumentNotification","DidCloseTextDocumentNotification","WillSaveTextDocumentNotification","WillSaveTextDocumentWaitUntilRequest","DidSaveTextDocumentNotification","sendDiagnostics","PublishDiagnosticsNotification","onHover","HoverRequest","onCompletion","CompletionRequest","onCompletionResolve","CompletionResolveRequest","onSignatureHelp","SignatureHelpRequest","onDeclaration","DeclarationRequest","onDefinition","DefinitionRequest","onTypeDefinition","TypeDefinitionRequest","onImplementation","ImplementationRequest","onReferences","ReferencesRequest","onDocumentHighlight","DocumentHighlightRequest","onDocumentSymbol","DocumentSymbolRequest","onWorkspaceSymbol","WorkspaceSymbolRequest","onCodeAction","CodeActionRequest","onCodeLens","CodeLensRequest","onCodeLensResolve","CodeLensResolveRequest","onDocumentFormatting","DocumentFormattingRequest","onDocumentRangeFormatting","DocumentRangeFormattingRequest","onDocumentOnTypeFormatting","DocumentOnTypeFormattingRequest","onRenameRequest","RenameRequest","onPrepareRename","PrepareRenameRequest","onDocumentLinks","DocumentLinkRequest","onDocumentLinkResolve","DocumentLinkResolveRequest","onDocumentColor","DocumentColorRequest","onColorPresentation","ColorPresentationRequest","onFoldingRanges","FoldingRangeRequest","onExecuteCommand","ExecuteCommandRequest","remote","InitializeRequest","number","fromString","capabilities","CancellationTokenSource","ResponseError","textDocumentSync","None","change","ShutdownRequest","ExitNotification","SetTraceNotification","ProposedFeatures"],"mappings":"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","sourcesContent":["/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n/// <reference path=\"./thenable.ts\" />\r\n'use strict';\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\r\nexports.Event = vscode_languageserver_protocol_1.Event;\r\nconst configuration_1 = require(\"./configuration\");\r\nconst workspaceFolders_1 = require(\"./workspaceFolders\");\r\nconst Is = require(\"./utils/is\");\r\nconst UUID = require(\"./utils/uuid\");\r\n// ------------- Reexport the API surface of the language worker API ----------------------\r\n__export(require(\"vscode-languageserver-protocol\"));\r\nconst fm = require(\"./files\");\r\nvar Files;\r\n(function (Files) {\r\n    Files.uriToFilePath = fm.uriToFilePath;\r\n    Files.resolveGlobalNodePath = fm.resolveGlobalNodePath;\r\n    Files.resolveGlobalYarnPath = fm.resolveGlobalYarnPath;\r\n    Files.resolve = fm.resolve;\r\n    Files.resolveModule = fm.resolveModule;\r\n    Files.resolveModule2 = fm.resolveModule2;\r\n    Files.resolveModulePath = fm.resolveModulePath;\r\n})(Files = exports.Files || (exports.Files = {}));\r\nlet shutdownReceived = false;\r\nlet exitTimer = undefined;\r\nfunction setupExitTimer() {\r\n    const argName = '--clientProcessId';\r\n    function runTimer(value) {\r\n        try {\r\n            let processId = parseInt(value);\r\n            if (!isNaN(processId)) {\r\n                exitTimer = setInterval(() => {\r\n                    try {\r\n                        process.kill(processId, 0);\r\n                    }\r\n                    catch (ex) {\r\n                        // Parent process doesn't exist anymore. Exit the server.\r\n                        process.exit(shutdownReceived ? 0 : 1);\r\n                    }\r\n                }, 3000);\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Ignore errors;\r\n        }\r\n    }\r\n    for (let i = 2; i < process.argv.length; i++) {\r\n        let arg = process.argv[i];\r\n        if (arg === argName && i + 1 < process.argv.length) {\r\n            runTimer(process.argv[i + 1]);\r\n            return;\r\n        }\r\n        else {\r\n            let args = arg.split('=');\r\n            if (args[0] === argName) {\r\n                runTimer(args[1]);\r\n            }\r\n        }\r\n    }\r\n}\r\nsetupExitTimer();\r\nfunction null2Undefined(value) {\r\n    if (value === null) {\r\n        return void 0;\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * A manager for simple text documents\r\n */\r\nclass TextDocuments {\r\n    /**\r\n     * Create a new text document manager.\r\n     */\r\n    constructor() {\r\n        this._documents = Object.create(null);\r\n        this._onDidChangeContent = new vscode_languageserver_protocol_1.Emitter();\r\n        this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();\r\n        this._onDidClose = new vscode_languageserver_protocol_1.Emitter();\r\n        this._onDidSave = new vscode_languageserver_protocol_1.Emitter();\r\n        this._onWillSave = new vscode_languageserver_protocol_1.Emitter();\r\n    }\r\n    /**\r\n     * Returns the [TextDocumentSyncKind](#TextDocumentSyncKind) used by\r\n     * this text document manager.\r\n     */\r\n    get syncKind() {\r\n        return vscode_languageserver_protocol_1.TextDocumentSyncKind.Full;\r\n    }\r\n    /**\r\n     * An event that fires when a text document managed by this manager\r\n     * has been opened or the content changes.\r\n     */\r\n    get onDidChangeContent() {\r\n        return this._onDidChangeContent.event;\r\n    }\r\n    /**\r\n     * An event that fires when a text document managed by this manager\r\n     * has been opened.\r\n     */\r\n    get onDidOpen() {\r\n        return this._onDidOpen.event;\r\n    }\r\n    /**\r\n     * An event that fires when a text document managed by this manager\r\n     * will be saved.\r\n     */\r\n    get onWillSave() {\r\n        return this._onWillSave.event;\r\n    }\r\n    /**\r\n     * Sets a handler that will be called if a participant wants to provide\r\n     * edits during a text document save.\r\n     */\r\n    onWillSaveWaitUntil(handler) {\r\n        this._willSaveWaitUntil = handler;\r\n    }\r\n    /**\r\n     * An event that fires when a text document managed by this manager\r\n     * has been saved.\r\n     */\r\n    get onDidSave() {\r\n        return this._onDidSave.event;\r\n    }\r\n    /**\r\n     * An event that fires when a text document managed by this manager\r\n     * has been closed.\r\n     */\r\n    get onDidClose() {\r\n        return this._onDidClose.event;\r\n    }\r\n    /**\r\n     * Returns the document for the given URI. Returns undefined if\r\n     * the document is not mananged by this instance.\r\n     *\r\n     * @param uri The text document's URI to retrieve.\r\n     * @return the text document or `undefined`.\r\n     */\r\n    get(uri) {\r\n        return this._documents[uri];\r\n    }\r\n    /**\r\n     * Returns all text documents managed by this instance.\r\n     *\r\n     * @return all text documents.\r\n     */\r\n    all() {\r\n        return Object.keys(this._documents).map(key => this._documents[key]);\r\n    }\r\n    /**\r\n     * Returns the URIs of all text documents managed by this instance.\r\n     *\r\n     * @return the URI's of all text documents.\r\n     */\r\n    keys() {\r\n        return Object.keys(this._documents);\r\n    }\r\n    /**\r\n     * Listens for `low level` notification on the given connection to\r\n     * update the text documents managed by this instance.\r\n     *\r\n     * @param connection The connection to listen on.\r\n     */\r\n    listen(connection) {\r\n        function isUpdateableDocument(value) {\r\n            return Is.func(value.update);\r\n        }\r\n        connection.__textDocumentSync = vscode_languageserver_protocol_1.TextDocumentSyncKind.Full;\r\n        connection.onDidOpenTextDocument((event) => {\r\n            let td = event.textDocument;\r\n            let document = vscode_languageserver_protocol_1.TextDocument.create(td.uri, td.languageId, td.version, td.text);\r\n            this._documents[td.uri] = document;\r\n            let toFire = Object.freeze({ document });\r\n            this._onDidOpen.fire(toFire);\r\n            this._onDidChangeContent.fire(toFire);\r\n        });\r\n        connection.onDidChangeTextDocument((event) => {\r\n            let td = event.textDocument;\r\n            let changes = event.contentChanges;\r\n            let last = changes.length > 0 ? changes[changes.length - 1] : undefined;\r\n            if (last) {\r\n                let document = this._documents[td.uri];\r\n                if (document && isUpdateableDocument(document)) {\r\n                    if (td.version === null || td.version === void 0) {\r\n                        throw new Error(`Received document change event for ${td.uri} without valid version identifier`);\r\n                    }\r\n                    document.update(last, td.version);\r\n                    this._onDidChangeContent.fire(Object.freeze({ document }));\r\n                }\r\n            }\r\n        });\r\n        connection.onDidCloseTextDocument((event) => {\r\n            let document = this._documents[event.textDocument.uri];\r\n            if (document) {\r\n                delete this._documents[event.textDocument.uri];\r\n                this._onDidClose.fire(Object.freeze({ document }));\r\n            }\r\n        });\r\n        connection.onWillSaveTextDocument((event) => {\r\n            let document = this._documents[event.textDocument.uri];\r\n            if (document) {\r\n                this._onWillSave.fire(Object.freeze({ document, reason: event.reason }));\r\n            }\r\n        });\r\n        connection.onWillSaveTextDocumentWaitUntil((event, token) => {\r\n            let document = this._documents[event.textDocument.uri];\r\n            if (document && this._willSaveWaitUntil) {\r\n                return this._willSaveWaitUntil(Object.freeze({ document, reason: event.reason }), token);\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        });\r\n        connection.onDidSaveTextDocument((event) => {\r\n            let document = this._documents[event.textDocument.uri];\r\n            if (document) {\r\n                this._onDidSave.fire(Object.freeze({ document }));\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.TextDocuments = TextDocuments;\r\n/**\r\n * Helps tracking error message. Equal occurences of the same\r\n * message are only stored once. This class is for example\r\n * useful if text documents are validated in a loop and equal\r\n * error message should be folded into one.\r\n */\r\nclass ErrorMessageTracker {\r\n    constructor() {\r\n        this._messages = Object.create(null);\r\n    }\r\n    /**\r\n     * Add a message to the tracker.\r\n     *\r\n     * @param message The message to add.\r\n     */\r\n    add(message) {\r\n        let count = this._messages[message];\r\n        if (!count) {\r\n            count = 0;\r\n        }\r\n        count++;\r\n        this._messages[message] = count;\r\n    }\r\n    /**\r\n     * Send all tracked messages to the connection's window.\r\n     *\r\n     * @param connection The connection established between client and server.\r\n     */\r\n    sendErrors(connection) {\r\n        Object.keys(this._messages).forEach(message => {\r\n            connection.window.showErrorMessage(message);\r\n        });\r\n    }\r\n}\r\nexports.ErrorMessageTracker = ErrorMessageTracker;\r\nvar BulkRegistration;\r\n(function (BulkRegistration) {\r\n    /**\r\n     * Creates a new bulk registration.\r\n     * @return an empty bulk registration.\r\n     */\r\n    function create() {\r\n        return new BulkRegistrationImpl();\r\n    }\r\n    BulkRegistration.create = create;\r\n})(BulkRegistration = exports.BulkRegistration || (exports.BulkRegistration = {}));\r\nclass BulkRegistrationImpl {\r\n    constructor() {\r\n        this._registrations = [];\r\n        this._registered = new Set();\r\n    }\r\n    add(type, registerOptions) {\r\n        const method = Is.string(type) ? type : type.method;\r\n        if (this._registered.has(method)) {\r\n            throw new Error(`${method} is already added to this registration`);\r\n        }\r\n        const id = UUID.generateUuid();\r\n        this._registrations.push({\r\n            id: id,\r\n            method: method,\r\n            registerOptions: registerOptions || {}\r\n        });\r\n        this._registered.add(method);\r\n    }\r\n    asRegistrationParams() {\r\n        return {\r\n            registrations: this._registrations\r\n        };\r\n    }\r\n}\r\nvar BulkUnregistration;\r\n(function (BulkUnregistration) {\r\n    function create() {\r\n        return new BulkUnregistrationImpl(undefined, []);\r\n    }\r\n    BulkUnregistration.create = create;\r\n})(BulkUnregistration = exports.BulkUnregistration || (exports.BulkUnregistration = {}));\r\nclass BulkUnregistrationImpl {\r\n    constructor(_connection, unregistrations) {\r\n        this._connection = _connection;\r\n        this._unregistrations = new Map();\r\n        unregistrations.forEach(unregistration => {\r\n            this._unregistrations.set(unregistration.method, unregistration);\r\n        });\r\n    }\r\n    get isAttached() {\r\n        return !!this._connection;\r\n    }\r\n    attach(connection) {\r\n        this._connection = connection;\r\n    }\r\n    add(unregistration) {\r\n        this._unregistrations.set(unregistration.method, unregistration);\r\n    }\r\n    dispose() {\r\n        let unregistrations = [];\r\n        for (let unregistration of this._unregistrations.values()) {\r\n            unregistrations.push(unregistration);\r\n        }\r\n        let params = {\r\n            unregisterations: unregistrations\r\n        };\r\n        this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(undefined, (_error) => {\r\n            this._connection.console.info(`Bulk unregistration failed.`);\r\n        });\r\n    }\r\n    disposeSingle(arg) {\r\n        const method = Is.string(arg) ? arg : arg.method;\r\n        const unregistration = this._unregistrations.get(method);\r\n        if (!unregistration) {\r\n            return false;\r\n        }\r\n        let params = {\r\n            unregisterations: [unregistration]\r\n        };\r\n        this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(() => {\r\n            this._unregistrations.delete(method);\r\n        }, (_error) => {\r\n            this._connection.console.info(`Unregistering request handler for ${unregistration.id} failed.`);\r\n        });\r\n        return true;\r\n    }\r\n}\r\nclass ConnectionLogger {\r\n    constructor() {\r\n    }\r\n    rawAttach(connection) {\r\n        this._rawConnection = connection;\r\n    }\r\n    attach(connection) {\r\n        this._connection = connection;\r\n    }\r\n    get connection() {\r\n        if (!this._connection) {\r\n            throw new Error('Remote is not attached to a connection yet.');\r\n        }\r\n        return this._connection;\r\n    }\r\n    fillServerCapabilities(_capabilities) {\r\n    }\r\n    initialize(_capabilities) {\r\n    }\r\n    error(message) {\r\n        this.send(vscode_languageserver_protocol_1.MessageType.Error, message);\r\n    }\r\n    warn(message) {\r\n        this.send(vscode_languageserver_protocol_1.MessageType.Warning, message);\r\n    }\r\n    info(message) {\r\n        this.send(vscode_languageserver_protocol_1.MessageType.Info, message);\r\n    }\r\n    log(message) {\r\n        this.send(vscode_languageserver_protocol_1.MessageType.Log, message);\r\n    }\r\n    send(type, message) {\r\n        if (this._rawConnection) {\r\n            this._rawConnection.sendNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, { type, message });\r\n        }\r\n    }\r\n}\r\nclass RemoteWindowImpl {\r\n    constructor() {\r\n    }\r\n    attach(connection) {\r\n        this._connection = connection;\r\n    }\r\n    get connection() {\r\n        if (!this._connection) {\r\n            throw new Error('Remote is not attached to a connection yet.');\r\n        }\r\n        return this._connection;\r\n    }\r\n    initialize(_capabilities) {\r\n    }\r\n    fillServerCapabilities(_capabilities) {\r\n    }\r\n    showErrorMessage(message, ...actions) {\r\n        let params = { type: vscode_languageserver_protocol_1.MessageType.Error, message, actions };\r\n        return this._connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);\r\n    }\r\n    showWarningMessage(message, ...actions) {\r\n        let params = { type: vscode_languageserver_protocol_1.MessageType.Warning, message, actions };\r\n        return this._connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);\r\n    }\r\n    showInformationMessage(message, ...actions) {\r\n        let params = { type: vscode_languageserver_protocol_1.MessageType.Info, message, actions };\r\n        return this._connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);\r\n    }\r\n}\r\nclass RemoteClientImpl {\r\n    attach(connection) {\r\n        this._connection = connection;\r\n    }\r\n    get connection() {\r\n        if (!this._connection) {\r\n            throw new Error('Remote is not attached to a connection yet.');\r\n        }\r\n        return this._connection;\r\n    }\r\n    initialize(_capabilities) {\r\n    }\r\n    fillServerCapabilities(_capabilities) {\r\n    }\r\n    register(typeOrRegistrations, registerOptionsOrType, registerOptions) {\r\n        if (typeOrRegistrations instanceof BulkRegistrationImpl) {\r\n            return this.registerMany(typeOrRegistrations);\r\n        }\r\n        else if (typeOrRegistrations instanceof BulkUnregistrationImpl) {\r\n            return this.registerSingle1(typeOrRegistrations, registerOptionsOrType, registerOptions);\r\n        }\r\n        else {\r\n            return this.registerSingle2(typeOrRegistrations, registerOptionsOrType);\r\n        }\r\n    }\r\n    registerSingle1(unregistration, type, registerOptions) {\r\n        const method = Is.string(type) ? type : type.method;\r\n        const id = UUID.generateUuid();\r\n        let params = {\r\n            registrations: [{ id, method, registerOptions: registerOptions || {} }]\r\n        };\r\n        if (!unregistration.isAttached) {\r\n            unregistration.attach(this._connection);\r\n        }\r\n        return this._connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result) => {\r\n            unregistration.add({ id: id, method: method });\r\n            return unregistration;\r\n        }, (_error) => {\r\n            this.connection.console.info(`Registering request handler for ${method} failed.`);\r\n            return Promise.reject(_error);\r\n        });\r\n    }\r\n    registerSingle2(type, registerOptions) {\r\n        const method = Is.string(type) ? type : type.method;\r\n        const id = UUID.generateUuid();\r\n        let params = {\r\n            registrations: [{ id, method, registerOptions: registerOptions || {} }]\r\n        };\r\n        return this._connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result) => {\r\n            return vscode_languageserver_protocol_1.Disposable.create(() => {\r\n                this.unregisterSingle(id, method);\r\n            });\r\n        }, (_error) => {\r\n            this.connection.console.info(`Registering request handler for ${method} failed.`);\r\n            return Promise.reject(_error);\r\n        });\r\n    }\r\n    unregisterSingle(id, method) {\r\n        let params = {\r\n            unregisterations: [{ id, method }]\r\n        };\r\n        return this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(undefined, (_error) => {\r\n            this.connection.console.info(`Unregistering request handler for ${id} failed.`);\r\n        });\r\n    }\r\n    registerMany(registrations) {\r\n        let params = registrations.asRegistrationParams();\r\n        return this._connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(() => {\r\n            return new BulkUnregistrationImpl(this._connection, params.registrations.map(registration => { return { id: registration.id, method: registration.method }; }));\r\n        }, (_error) => {\r\n            this.connection.console.info(`Bulk registration failed.`);\r\n            return Promise.reject(_error);\r\n        });\r\n    }\r\n}\r\nclass _RemoteWorkspaceImpl {\r\n    constructor() {\r\n    }\r\n    attach(connection) {\r\n        this._connection = connection;\r\n    }\r\n    get connection() {\r\n        if (!this._connection) {\r\n            throw new Error('Remote is not attached to a connection yet.');\r\n        }\r\n        return this._connection;\r\n    }\r\n    initialize(_capabilities) {\r\n    }\r\n    fillServerCapabilities(_capabilities) {\r\n    }\r\n    applyEdit(paramOrEdit) {\r\n        function isApplyWorkspaceEditParams(value) {\r\n            return value && !!value.edit;\r\n        }\r\n        let params = isApplyWorkspaceEditParams(paramOrEdit) ? paramOrEdit : { edit: paramOrEdit };\r\n        return this._connection.sendRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, params);\r\n    }\r\n}\r\nconst RemoteWorkspaceImpl = workspaceFolders_1.WorkspaceFoldersFeature(configuration_1.ConfigurationFeature(_RemoteWorkspaceImpl));\r\nclass TracerImpl {\r\n    constructor() {\r\n        this._trace = vscode_languageserver_protocol_1.Trace.Off;\r\n    }\r\n    attach(connection) {\r\n        this._connection = connection;\r\n    }\r\n    get connection() {\r\n        if (!this._connection) {\r\n            throw new Error('Remote is not attached to a connection yet.');\r\n        }\r\n        return this._connection;\r\n    }\r\n    initialize(_capabilities) {\r\n    }\r\n    fillServerCapabilities(_capabilities) {\r\n    }\r\n    set trace(value) {\r\n        this._trace = value;\r\n    }\r\n    log(message, verbose) {\r\n        if (this._trace === vscode_languageserver_protocol_1.Trace.Off) {\r\n            return;\r\n        }\r\n        this._connection.sendNotification(vscode_languageserver_protocol_1.LogTraceNotification.type, {\r\n            message: message,\r\n            verbose: this._trace === vscode_languageserver_protocol_1.Trace.Verbose ? verbose : undefined\r\n        });\r\n    }\r\n}\r\nclass TelemetryImpl {\r\n    constructor() {\r\n    }\r\n    attach(connection) {\r\n        this._connection = connection;\r\n    }\r\n    get connection() {\r\n        if (!this._connection) {\r\n            throw new Error('Remote is not attached to a connection yet.');\r\n        }\r\n        return this._connection;\r\n    }\r\n    initialize(_capabilities) {\r\n    }\r\n    fillServerCapabilities(_capabilities) {\r\n    }\r\n    logEvent(data) {\r\n        this._connection.sendNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, data);\r\n    }\r\n}\r\nfunction combineConsoleFeatures(one, two) {\r\n    return function (Base) {\r\n        return two(one(Base));\r\n    };\r\n}\r\nexports.combineConsoleFeatures = combineConsoleFeatures;\r\nfunction combineTelemetryFeatures(one, two) {\r\n    return function (Base) {\r\n        return two(one(Base));\r\n    };\r\n}\r\nexports.combineTelemetryFeatures = combineTelemetryFeatures;\r\nfunction combineTracerFeatures(one, two) {\r\n    return function (Base) {\r\n        return two(one(Base));\r\n    };\r\n}\r\nexports.combineTracerFeatures = combineTracerFeatures;\r\nfunction combineClientFeatures(one, two) {\r\n    return function (Base) {\r\n        return two(one(Base));\r\n    };\r\n}\r\nexports.combineClientFeatures = combineClientFeatures;\r\nfunction combineWindowFeatures(one, two) {\r\n    return function (Base) {\r\n        return two(one(Base));\r\n    };\r\n}\r\nexports.combineWindowFeatures = combineWindowFeatures;\r\nfunction combineWorkspaceFeatures(one, two) {\r\n    return function (Base) {\r\n        return two(one(Base));\r\n    };\r\n}\r\nexports.combineWorkspaceFeatures = combineWorkspaceFeatures;\r\nfunction combineFeatures(one, two) {\r\n    function combine(one, two, func) {\r\n        if (one && two) {\r\n            return func(one, two);\r\n        }\r\n        else if (one) {\r\n            return one;\r\n        }\r\n        else {\r\n            return two;\r\n        }\r\n    }\r\n    let result = {\r\n        __brand: 'features',\r\n        console: combine(one.console, two.console, combineConsoleFeatures),\r\n        tracer: combine(one.tracer, two.tracer, combineTracerFeatures),\r\n        telemetry: combine(one.telemetry, two.telemetry, combineTelemetryFeatures),\r\n        client: combine(one.client, two.client, combineClientFeatures),\r\n        window: combine(one.window, two.window, combineWindowFeatures),\r\n        workspace: combine(one.workspace, two.workspace, combineWorkspaceFeatures)\r\n    };\r\n    return result;\r\n}\r\nexports.combineFeatures = combineFeatures;\r\nfunction createConnection(arg1, arg2, arg3, arg4) {\r\n    let factories;\r\n    let input;\r\n    let output;\r\n    let strategy;\r\n    if (arg1 !== void 0 && arg1.__brand === 'features') {\r\n        factories = arg1;\r\n        arg1 = arg2;\r\n        arg2 = arg3;\r\n        arg3 = arg4;\r\n    }\r\n    if (vscode_languageserver_protocol_1.ConnectionStrategy.is(arg1)) {\r\n        strategy = arg1;\r\n    }\r\n    else {\r\n        input = arg1;\r\n        output = arg2;\r\n        strategy = arg3;\r\n    }\r\n    return _createConnection(input, output, strategy, factories);\r\n}\r\nexports.createConnection = createConnection;\r\nfunction _createConnection(input, output, strategy, factories) {\r\n    if (!input && !output && process.argv.length > 2) {\r\n        let port = void 0;\r\n        let pipeName = void 0;\r\n        let argv = process.argv.slice(2);\r\n        for (let i = 0; i < argv.length; i++) {\r\n            let arg = argv[i];\r\n            if (arg === '--node-ipc') {\r\n                input = new vscode_languageserver_protocol_1.IPCMessageReader(process);\r\n                output = new vscode_languageserver_protocol_1.IPCMessageWriter(process);\r\n                break;\r\n            }\r\n            else if (arg === '--stdio') {\r\n                input = process.stdin;\r\n                output = process.stdout;\r\n                break;\r\n            }\r\n            else if (arg === '--socket') {\r\n                port = parseInt(argv[i + 1]);\r\n                break;\r\n            }\r\n            else if (arg === '--pipe') {\r\n                pipeName = argv[i + 1];\r\n                break;\r\n            }\r\n            else {\r\n                var args = arg.split('=');\r\n                if (args[0] === '--socket') {\r\n                    port = parseInt(args[1]);\r\n                    break;\r\n                }\r\n                else if (args[0] === '--pipe') {\r\n                    pipeName = args[1];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (port) {\r\n            let transport = vscode_languageserver_protocol_1.createServerSocketTransport(port);\r\n            input = transport[0];\r\n            output = transport[1];\r\n        }\r\n        else if (pipeName) {\r\n            let transport = vscode_languageserver_protocol_1.createServerPipeTransport(pipeName);\r\n            input = transport[0];\r\n            output = transport[1];\r\n        }\r\n    }\r\n    var commandLineMessage = \"Use arguments of createConnection or set command line parameters: '--node-ipc', '--stdio' or '--socket={number}'\";\r\n    if (!input) {\r\n        throw new Error(\"Connection input stream is not set. \" + commandLineMessage);\r\n    }\r\n    if (!output) {\r\n        throw new Error(\"Connection output stream is not set. \" + commandLineMessage);\r\n    }\r\n    // Backwards compatibility\r\n    if (Is.func(input.read) && Is.func(input.on)) {\r\n        let inputStream = input;\r\n        inputStream.on('end', () => {\r\n            process.exit(shutdownReceived ? 0 : 1);\r\n        });\r\n        inputStream.on('close', () => {\r\n            process.exit(shutdownReceived ? 0 : 1);\r\n        });\r\n    }\r\n    const logger = (factories && factories.console ? new (factories.console(ConnectionLogger))() : new ConnectionLogger());\r\n    const connection = vscode_languageserver_protocol_1.createProtocolConnection(input, output, logger, strategy);\r\n    logger.rawAttach(connection);\r\n    const tracer = (factories && factories.tracer ? new (factories.tracer(TracerImpl))() : new TracerImpl());\r\n    const telemetry = (factories && factories.telemetry ? new (factories.telemetry(TelemetryImpl))() : new TelemetryImpl());\r\n    const client = (factories && factories.client ? new (factories.client(RemoteClientImpl))() : new RemoteClientImpl());\r\n    const remoteWindow = (factories && factories.window ? new (factories.window(RemoteWindowImpl))() : new RemoteWindowImpl());\r\n    const workspace = (factories && factories.workspace ? new (factories.workspace(RemoteWorkspaceImpl))() : new RemoteWorkspaceImpl());\r\n    const allRemotes = [logger, tracer, telemetry, client, remoteWindow, workspace];\r\n    function asThenable(value) {\r\n        if (Is.thenable(value)) {\r\n            return value;\r\n        }\r\n        else {\r\n            return Promise.resolve(value);\r\n        }\r\n    }\r\n    let shutdownHandler = undefined;\r\n    let initializeHandler = undefined;\r\n    let exitHandler = undefined;\r\n    let protocolConnection = {\r\n        listen: () => connection.listen(),\r\n        sendRequest: (type, ...params) => connection.sendRequest(Is.string(type) ? type : type.method, ...params),\r\n        onRequest: (type, handler) => connection.onRequest(type, handler),\r\n        sendNotification: (type, param) => {\r\n            const method = Is.string(type) ? type : type.method;\r\n            if (arguments.length === 1) {\r\n                connection.sendNotification(method);\r\n            }\r\n            else {\r\n                connection.sendNotification(method, param);\r\n            }\r\n        },\r\n        onNotification: (type, handler) => connection.onNotification(type, handler),\r\n        onInitialize: (handler) => initializeHandler = handler,\r\n        onInitialized: (handler) => connection.onNotification(vscode_languageserver_protocol_1.InitializedNotification.type, handler),\r\n        onShutdown: (handler) => shutdownHandler = handler,\r\n        onExit: (handler) => exitHandler = handler,\r\n        get console() { return logger; },\r\n        get telemetry() { return telemetry; },\r\n        get tracer() { return tracer; },\r\n        get client() { return client; },\r\n        get window() { return remoteWindow; },\r\n        get workspace() { return workspace; },\r\n        onDidChangeConfiguration: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, handler),\r\n        onDidChangeWatchedFiles: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, handler),\r\n        __textDocumentSync: undefined,\r\n        onDidOpenTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, handler),\r\n        onDidChangeTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, handler),\r\n        onDidCloseTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, handler),\r\n        onWillSaveTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type, handler),\r\n        onWillSaveTextDocumentWaitUntil: (handler) => connection.onRequest(vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type, handler),\r\n        onDidSaveTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, handler),\r\n        sendDiagnostics: (params) => connection.sendNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, params),\r\n        onHover: (handler) => connection.onRequest(vscode_languageserver_protocol_1.HoverRequest.type, handler),\r\n        onCompletion: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CompletionRequest.type, handler),\r\n        onCompletionResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, handler),\r\n        onSignatureHelp: (handler) => connection.onRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, handler),\r\n        onDeclaration: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DeclarationRequest.type, handler),\r\n        onDefinition: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, handler),\r\n        onTypeDefinition: (handler) => connection.onRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, handler),\r\n        onImplementation: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ImplementationRequest.type, handler),\r\n        onReferences: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ReferencesRequest.type, handler),\r\n        onDocumentHighlight: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentHighlightRequest.type, handler),\r\n        onDocumentSymbol: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, handler),\r\n        onWorkspaceSymbol: (handler) => connection.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, handler),\r\n        onCodeAction: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, handler),\r\n        onCodeLens: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeLensRequest.type, handler),\r\n        onCodeLensResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeLensResolveRequest.type, handler),\r\n        onDocumentFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, handler),\r\n        onDocumentRangeFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, handler),\r\n        onDocumentOnTypeFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, handler),\r\n        onRenameRequest: (handler) => connection.onRequest(vscode_languageserver_protocol_1.RenameRequest.type, handler),\r\n        onPrepareRename: (handler) => connection.onRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, handler),\r\n        onDocumentLinks: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, handler),\r\n        onDocumentLinkResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, handler),\r\n        onDocumentColor: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, handler),\r\n        onColorPresentation: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, handler),\r\n        onFoldingRanges: (handler) => connection.onRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, handler),\r\n        onExecuteCommand: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ExecuteCommandRequest.type, handler),\r\n        dispose: () => connection.dispose()\r\n    };\r\n    for (let remote of allRemotes) {\r\n        remote.attach(protocolConnection);\r\n    }\r\n    connection.onRequest(vscode_languageserver_protocol_1.InitializeRequest.type, (params) => {\r\n        const processId = params.processId;\r\n        if (Is.number(processId) && exitTimer === void 0) {\r\n            // We received a parent process id. Set up a timer to periodically check\r\n            // if the parent is still alive.\r\n            setInterval(() => {\r\n                try {\r\n                    process.kill(processId, 0);\r\n                }\r\n                catch (ex) {\r\n                    // Parent process doesn't exist anymore. Exit the server.\r\n                    process.exit(shutdownReceived ? 0 : 1);\r\n                }\r\n            }, 3000);\r\n        }\r\n        if (Is.string(params.trace)) {\r\n            tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.trace);\r\n        }\r\n        for (let remote of allRemotes) {\r\n            remote.initialize(params.capabilities);\r\n        }\r\n        if (initializeHandler) {\r\n            let result = initializeHandler(params, new vscode_languageserver_protocol_1.CancellationTokenSource().token);\r\n            return asThenable(result).then((value) => {\r\n                if (value instanceof vscode_languageserver_protocol_1.ResponseError) {\r\n                    return value;\r\n                }\r\n                let result = value;\r\n                if (!result) {\r\n                    result = { capabilities: {} };\r\n                }\r\n                let capabilities = result.capabilities;\r\n                if (!capabilities) {\r\n                    capabilities = {};\r\n                    result.capabilities = capabilities;\r\n                }\r\n                if (capabilities.textDocumentSync === void 0 || capabilities.textDocumentSync === null) {\r\n                    capabilities.textDocumentSync = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;\r\n                }\r\n                else if (!Is.number(capabilities.textDocumentSync) && !Is.number(capabilities.textDocumentSync.change)) {\r\n                    capabilities.textDocumentSync.change = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;\r\n                }\r\n                for (let remote of allRemotes) {\r\n                    remote.fillServerCapabilities(capabilities);\r\n                }\r\n                return result;\r\n            });\r\n        }\r\n        else {\r\n            let result = { capabilities: { textDocumentSync: vscode_languageserver_protocol_1.TextDocumentSyncKind.None } };\r\n            for (let remote of allRemotes) {\r\n                remote.fillServerCapabilities(result.capabilities);\r\n            }\r\n            return result;\r\n        }\r\n    });\r\n    connection.onRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, () => {\r\n        shutdownReceived = true;\r\n        if (shutdownHandler) {\r\n            return shutdownHandler(new vscode_languageserver_protocol_1.CancellationTokenSource().token);\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    });\r\n    connection.onNotification(vscode_languageserver_protocol_1.ExitNotification.type, () => {\r\n        try {\r\n            if (exitHandler) {\r\n                exitHandler();\r\n            }\r\n        }\r\n        finally {\r\n            if (shutdownReceived) {\r\n                process.exit(0);\r\n            }\r\n            else {\r\n                process.exit(1);\r\n            }\r\n        }\r\n    });\r\n    connection.onNotification(vscode_languageserver_protocol_1.SetTraceNotification.type, (params) => {\r\n        tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.value);\r\n    });\r\n    return protocolConnection;\r\n}\r\n// Export the protocol currently in proposed state.\r\nvar ProposedFeatures;\r\n(function (ProposedFeatures) {\r\n    ProposedFeatures.all = {\r\n        __brand: 'features',\r\n    };\r\n})(ProposedFeatures = exports.ProposedFeatures || (exports.ProposedFeatures = {}));\r\n"]},"metadata":{},"sourceType":"script"}