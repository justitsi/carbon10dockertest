{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst GraphQLDataSource_1 = require(\"./GraphQLDataSource\");\n\nconst config_1 = require(\"../config\");\n\nconst checkSchema_1 = require(\"./operations/checkSchema\");\n\nconst uploadSchema_1 = require(\"./operations/uploadSchema\");\n\nconst validateOperations_1 = require(\"./operations/validateOperations\");\n\nconst registerOperations_1 = require(\"./operations/registerOperations\");\n\nconst schemaTagsAndFieldStats_1 = require(\"./operations/schemaTagsAndFieldStats\");\n\nconst uploadAndComposePartialSchema_1 = require(\"./operations/uploadAndComposePartialSchema\");\n\nconst checkPartialSchema_1 = require(\"./operations/checkPartialSchema\");\n\nconst removeServiceAndCompose_1 = require(\"./operations/removeServiceAndCompose\");\n\nconst listServices_1 = require(\"./operations/listServices\");\n\nfunction noServiceError(service, endpoint) {\n  return `Could not find service ${service ? service : \"\"} from Apollo Graph Manager at ${endpoint}. Please check your API key and service name`;\n}\n\nexports.noServiceError = noServiceError;\n\nclass ApolloEngineClient extends GraphQLDataSource_1.GraphQLDataSource {\n  constructor(engineKey, engineEndpoint = config_1.DefaultEngineConfig.endpoint, clientIdentity) {\n    super();\n    this.engineKey = engineKey;\n    this.clientIdentity = clientIdentity;\n    this.baseURL = engineEndpoint;\n  }\n\n  willSendRequest(request) {\n    if (!request.headers) request.headers = {};\n    request.headers[\"x-api-key\"] = this.engineKey;\n\n    if (this.clientIdentity && this.clientIdentity.name) {\n      request.headers[\"apollo-client-name\"] = this.clientIdentity.name;\n      request.headers[\"apollo-client-reference-id\"] = this.clientIdentity.referenceID;\n      request.headers[\"apollo-client-version\"] = this.clientIdentity.version;\n      return;\n    }\n\n    request.headers[\"apollo-client-name\"] = \"Apollo Language Server\";\n    request.headers[\"apollo-client-reference-id\"] = \"146d29c0-912c-46d3-b686-920e52586be6\";\n    request.headers[\"apollo-client-version\"] = require(\"../../package.json\").version;\n  }\n\n  async listServices(variables) {\n    return this.execute({\n      query: listServices_1.LIST_SERVICES,\n      variables\n    }).then(({\n      data,\n      errors\n    }) => {\n      if (errors) {\n        throw new Error(errors.map(error => error.message).join(\"\\n\"));\n      }\n\n      if (data && !data.service) {\n        throw new Error(noServiceError(variables.id, this.baseURL));\n      }\n\n      if (!(data && data.service)) {\n        throw new Error(\"Error in request from Apollo Graph Manager\");\n      }\n\n      return data;\n    });\n  }\n\n  async checkSchema(variables) {\n    return this.execute({\n      query: checkSchema_1.CHECK_SCHEMA,\n      variables\n    }).then(({\n      data,\n      errors\n    }) => {\n      if (errors) {\n        throw new Error(errors.map(error => error.message).join(\"\\n\"));\n      }\n\n      if (data && !data.service) {\n        throw new Error(noServiceError(variables.id, this.baseURL));\n      }\n\n      if (!(data && data.service)) {\n        throw new Error(\"Error in request from Apollo Graph Manager\");\n      }\n\n      return data.service.checkSchema;\n    });\n  }\n\n  async uploadSchema(variables) {\n    return this.execute({\n      query: uploadSchema_1.UPLOAD_SCHEMA,\n      variables\n    }).then(({\n      data,\n      errors\n    }) => {\n      if (errors) {\n        throw new Error(errors.map(error => error.message).join(\"\\n\"));\n      }\n\n      if (data && !data.service) {\n        throw new Error(noServiceError(variables.id, this.baseURL));\n      }\n\n      if (!(data && data.service)) {\n        throw new Error(\"Error in request from Apollo Graph Manager\");\n      }\n\n      return data.service.uploadSchema;\n    });\n  }\n\n  async uploadAndComposePartialSchema(variables) {\n    return this.execute({\n      query: uploadAndComposePartialSchema_1.UPLOAD_AND_COMPOSE_PARTIAL_SCHEMA,\n      variables\n    }).then(({\n      data,\n      errors\n    }) => {\n      if (errors) {\n        throw new Error(errors.map(error => error.message).join(\"\\n\"));\n      }\n\n      if (data && !data.service) {\n        throw new Error(noServiceError(variables.id, this.baseURL));\n      }\n\n      if (!(data && data.service)) {\n        throw new Error(\"Error in request from Apollo Graph Manager\");\n      }\n\n      return data.service.upsertImplementingServiceAndTriggerComposition;\n    });\n  }\n\n  async checkPartialSchema(variables) {\n    return this.execute({\n      query: checkPartialSchema_1.CHECK_PARTIAL_SCHEMA,\n      variables\n    }).then(({\n      data,\n      errors\n    }) => {\n      if (errors) {\n        throw new Error(errors.map(error => error.message).join(\"\\n\"));\n      }\n\n      if (data && !data.service) {\n        throw new Error(noServiceError(variables.id, this.baseURL));\n      }\n\n      if (!(data && data.service)) {\n        throw new Error(\"Error in request from Apollo Graph Manager\");\n      }\n\n      return data.service.checkPartialSchema;\n    });\n  }\n\n  async removeServiceAndCompose(variables) {\n    return this.execute({\n      query: removeServiceAndCompose_1.REMOVE_SERVICE_AND_COMPOSE,\n      variables\n    }).then(({\n      data,\n      errors\n    }) => {\n      if (errors) {\n        throw new Error(errors.map(error => error.message).join(\"\\n\"));\n      }\n\n      if (!data || !data.service) {\n        throw new Error(\"Error in request from Apollo Graph Manager\");\n      }\n\n      return data.service.removeImplementingServiceAndTriggerComposition;\n    });\n  }\n\n  async validateOperations(variables) {\n    return this.execute({\n      query: validateOperations_1.VALIDATE_OPERATIONS,\n      variables\n    }).then(({\n      data,\n      errors\n    }) => {\n      if (errors) {\n        throw new Error(errors.map(error => error.message).join(\"\\n\"));\n      }\n\n      if (data && !data.service) {\n        throw new Error(noServiceError(variables.id, this.baseURL));\n      }\n\n      if (!(data && data.service)) {\n        throw new Error(\"Error in request from Apollo Graph Manager\");\n      }\n\n      return data.service.validateOperations.validationResults;\n    });\n  }\n\n  async registerOperations(variables) {\n    return this.execute({\n      query: registerOperations_1.REGISTER_OPERATIONS,\n      variables\n    }).then(({\n      data,\n      errors\n    }) => {\n      if (errors) {\n        throw new Error(errors.map(error => error.message).join(\"\\n\"));\n      }\n\n      if (data && !data.service) {\n        throw new Error(noServiceError(variables.id, this.baseURL));\n      }\n\n      if (!(data && data.service && data.service.registerOperationsWithResponse)) {\n        throw new Error(\"Error in request from Apollo Graph Manager\");\n      }\n\n      return data.service.registerOperationsWithResponse;\n    });\n  }\n\n  async loadSchemaTagsAndFieldStats(serviceID) {\n    const {\n      data,\n      errors\n    } = await this.execute({\n      query: schemaTagsAndFieldStats_1.SCHEMA_TAGS_AND_FIELD_STATS,\n      variables: {\n        id: serviceID\n      }\n    });\n\n    if (!(data && data.service) || errors) {\n      throw new Error(errors ? errors.map(error => error.message).join(\"\\n\") : \"No service returned. Make sure your service name and API key match\");\n    }\n\n    const schemaTags = data.service.schemaTags.map(({\n      tag\n    }) => tag);\n    const fieldStats = new Map();\n    data.service.stats.fieldStats.forEach(fieldStat => {\n      const [parentType = null, fieldName = null] = fieldStat.groupBy.field ? fieldStat.groupBy.field.split(/\\.|:/) : [];\n\n      if (!parentType || !fieldName) {\n        return;\n      }\n\n      const fieldsMap = fieldStats.get(parentType) || fieldStats.set(parentType, new Map()).get(parentType);\n      fieldsMap.set(fieldName, fieldStat.metrics.fieldHistogram.durationMs);\n    });\n    return {\n      schemaTags,\n      fieldStats\n    };\n  }\n\n}\n\nexports.ApolloEngineClient = ApolloEngineClient;","map":{"version":3,"sources":["../../src/engine/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst GraphQLDataSource_1 = require(\"./GraphQLDataSource\");\nconst config_1 = require(\"../config\");\nconst checkSchema_1 = require(\"./operations/checkSchema\");\nconst uploadSchema_1 = require(\"./operations/uploadSchema\");\nconst validateOperations_1 = require(\"./operations/validateOperations\");\nconst registerOperations_1 = require(\"./operations/registerOperations\");\nconst schemaTagsAndFieldStats_1 = require(\"./operations/schemaTagsAndFieldStats\");\nconst uploadAndComposePartialSchema_1 = require(\"./operations/uploadAndComposePartialSchema\");\nconst checkPartialSchema_1 = require(\"./operations/checkPartialSchema\");\nconst removeServiceAndCompose_1 = require(\"./operations/removeServiceAndCompose\");\nconst listServices_1 = require(\"./operations/listServices\");\nfunction noServiceError(service, endpoint) {\n    return `Could not find service ${service ? service : \"\"} from Apollo Graph Manager at ${endpoint}. Please check your API key and service name`;\n}\nexports.noServiceError = noServiceError;\nclass ApolloEngineClient extends GraphQLDataSource_1.GraphQLDataSource {\n    constructor(engineKey, engineEndpoint = config_1.DefaultEngineConfig.endpoint, clientIdentity) {\n        super();\n        this.engineKey = engineKey;\n        this.clientIdentity = clientIdentity;\n        this.baseURL = engineEndpoint;\n    }\n    willSendRequest(request) {\n        if (!request.headers)\n            request.headers = {};\n        request.headers[\"x-api-key\"] = this.engineKey;\n        if (this.clientIdentity && this.clientIdentity.name) {\n            request.headers[\"apollo-client-name\"] = this.clientIdentity.name;\n            request.headers[\"apollo-client-reference-id\"] = this.clientIdentity.referenceID;\n            request.headers[\"apollo-client-version\"] = this.clientIdentity.version;\n            return;\n        }\n        request.headers[\"apollo-client-name\"] = \"Apollo Language Server\";\n        request.headers[\"apollo-client-reference-id\"] =\n            \"146d29c0-912c-46d3-b686-920e52586be6\";\n        request.headers[\"apollo-client-version\"] = require(\"../../package.json\").version;\n    }\n    async listServices(variables) {\n        return this.execute({\n            query: listServices_1.LIST_SERVICES,\n            variables\n        }).then(({ data, errors }) => {\n            if (errors) {\n                throw new Error(errors.map(error => error.message).join(\"\\n\"));\n            }\n            if (data && !data.service) {\n                throw new Error(noServiceError(variables.id, this.baseURL));\n            }\n            if (!(data && data.service)) {\n                throw new Error(\"Error in request from Apollo Graph Manager\");\n            }\n            return data;\n        });\n    }\n    async checkSchema(variables) {\n        return this.execute({\n            query: checkSchema_1.CHECK_SCHEMA,\n            variables\n        }).then(({ data, errors }) => {\n            if (errors) {\n                throw new Error(errors.map(error => error.message).join(\"\\n\"));\n            }\n            if (data && !data.service) {\n                throw new Error(noServiceError(variables.id, this.baseURL));\n            }\n            if (!(data && data.service)) {\n                throw new Error(\"Error in request from Apollo Graph Manager\");\n            }\n            return data.service.checkSchema;\n        });\n    }\n    async uploadSchema(variables) {\n        return this.execute({\n            query: uploadSchema_1.UPLOAD_SCHEMA,\n            variables\n        }).then(({ data, errors }) => {\n            if (errors) {\n                throw new Error(errors.map(error => error.message).join(\"\\n\"));\n            }\n            if (data && !data.service) {\n                throw new Error(noServiceError(variables.id, this.baseURL));\n            }\n            if (!(data && data.service)) {\n                throw new Error(\"Error in request from Apollo Graph Manager\");\n            }\n            return data.service.uploadSchema;\n        });\n    }\n    async uploadAndComposePartialSchema(variables) {\n        return this.execute({\n            query: uploadAndComposePartialSchema_1.UPLOAD_AND_COMPOSE_PARTIAL_SCHEMA,\n            variables\n        }).then(({ data, errors }) => {\n            if (errors) {\n                throw new Error(errors.map(error => error.message).join(\"\\n\"));\n            }\n            if (data && !data.service) {\n                throw new Error(noServiceError(variables.id, this.baseURL));\n            }\n            if (!(data && data.service)) {\n                throw new Error(\"Error in request from Apollo Graph Manager\");\n            }\n            return data.service.upsertImplementingServiceAndTriggerComposition;\n        });\n    }\n    async checkPartialSchema(variables) {\n        return this.execute({\n            query: checkPartialSchema_1.CHECK_PARTIAL_SCHEMA,\n            variables\n        }).then(({ data, errors }) => {\n            if (errors) {\n                throw new Error(errors.map(error => error.message).join(\"\\n\"));\n            }\n            if (data && !data.service) {\n                throw new Error(noServiceError(variables.id, this.baseURL));\n            }\n            if (!(data && data.service)) {\n                throw new Error(\"Error in request from Apollo Graph Manager\");\n            }\n            return data.service.checkPartialSchema;\n        });\n    }\n    async removeServiceAndCompose(variables) {\n        return this.execute({\n            query: removeServiceAndCompose_1.REMOVE_SERVICE_AND_COMPOSE,\n            variables\n        }).then(({ data, errors }) => {\n            if (errors) {\n                throw new Error(errors.map(error => error.message).join(\"\\n\"));\n            }\n            if (!data || !data.service) {\n                throw new Error(\"Error in request from Apollo Graph Manager\");\n            }\n            return data.service.removeImplementingServiceAndTriggerComposition;\n        });\n    }\n    async validateOperations(variables) {\n        return this.execute({\n            query: validateOperations_1.VALIDATE_OPERATIONS,\n            variables\n        }).then(({ data, errors }) => {\n            if (errors) {\n                throw new Error(errors.map(error => error.message).join(\"\\n\"));\n            }\n            if (data && !data.service) {\n                throw new Error(noServiceError(variables.id, this.baseURL));\n            }\n            if (!(data && data.service)) {\n                throw new Error(\"Error in request from Apollo Graph Manager\");\n            }\n            return data.service.validateOperations.validationResults;\n        });\n    }\n    async registerOperations(variables) {\n        return this.execute({\n            query: registerOperations_1.REGISTER_OPERATIONS,\n            variables\n        }).then(({ data, errors }) => {\n            if (errors) {\n                throw new Error(errors.map(error => error.message).join(\"\\n\"));\n            }\n            if (data && !data.service) {\n                throw new Error(noServiceError(variables.id, this.baseURL));\n            }\n            if (!(data && data.service && data.service.registerOperationsWithResponse)) {\n                throw new Error(\"Error in request from Apollo Graph Manager\");\n            }\n            return data.service.registerOperationsWithResponse;\n        });\n    }\n    async loadSchemaTagsAndFieldStats(serviceID) {\n        const { data, errors } = await this.execute({\n            query: schemaTagsAndFieldStats_1.SCHEMA_TAGS_AND_FIELD_STATS,\n            variables: {\n                id: serviceID\n            }\n        });\n        if (!(data && data.service) || errors) {\n            throw new Error(errors\n                ? errors.map(error => error.message).join(\"\\n\")\n                : \"No service returned. Make sure your service name and API key match\");\n        }\n        const schemaTags = data.service.schemaTags.map(({ tag }) => tag);\n        const fieldStats = new Map();\n        data.service.stats.fieldStats.forEach(fieldStat => {\n            const [parentType = null, fieldName = null] = fieldStat.groupBy.field\n                ? fieldStat.groupBy.field.split(/\\.|:/)\n                : [];\n            if (!parentType || !fieldName) {\n                return;\n            }\n            const fieldsMap = fieldStats.get(parentType) ||\n                fieldStats.set(parentType, new Map()).get(parentType);\n            fieldsMap.set(fieldName, fieldStat.metrics.fieldHistogram.durationMs);\n        });\n        return { schemaTags, fieldStats };\n    }\n}\nexports.ApolloEngineClient = ApolloEngineClient;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}