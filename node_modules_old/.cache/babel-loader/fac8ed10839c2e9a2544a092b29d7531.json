{"ast":null,"code":"/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Is = require(\"./utils/is\");\n\nconst vscode_jsonrpc_1 = require(\"vscode-jsonrpc\");\n\nconst protocol_implementation_1 = require(\"./protocol.implementation\");\n\nexports.ImplementationRequest = protocol_implementation_1.ImplementationRequest;\n\nconst protocol_typeDefinition_1 = require(\"./protocol.typeDefinition\");\n\nexports.TypeDefinitionRequest = protocol_typeDefinition_1.TypeDefinitionRequest;\n\nconst protocol_workspaceFolders_1 = require(\"./protocol.workspaceFolders\");\n\nexports.WorkspaceFoldersRequest = protocol_workspaceFolders_1.WorkspaceFoldersRequest;\nexports.DidChangeWorkspaceFoldersNotification = protocol_workspaceFolders_1.DidChangeWorkspaceFoldersNotification;\n\nconst protocol_configuration_1 = require(\"./protocol.configuration\");\n\nexports.ConfigurationRequest = protocol_configuration_1.ConfigurationRequest;\n\nconst protocol_colorProvider_1 = require(\"./protocol.colorProvider\");\n\nexports.DocumentColorRequest = protocol_colorProvider_1.DocumentColorRequest;\nexports.ColorPresentationRequest = protocol_colorProvider_1.ColorPresentationRequest;\n\nconst protocol_foldingRange_1 = require(\"./protocol.foldingRange\");\n\nexports.FoldingRangeRequest = protocol_foldingRange_1.FoldingRangeRequest;\n\nconst protocol_declaration_1 = require(\"./protocol.declaration\");\n\nexports.DeclarationRequest = protocol_declaration_1.DeclarationRequest; // @ts-ignore: to avoid inlining LocatioLink as dynamic import\n\nlet __noDynamicImport;\n\nvar DocumentFilter;\n\n(function (DocumentFilter) {\n  function is(value) {\n    let candidate = value;\n    return Is.string(candidate.language) || Is.string(candidate.scheme) || Is.string(candidate.pattern);\n  }\n\n  DocumentFilter.is = is;\n})(DocumentFilter = exports.DocumentFilter || (exports.DocumentFilter = {}));\n/**\r\n * The `client/registerCapability` request is sent from the server to the client to register a new capability\r\n * handler on the client side.\r\n */\n\n\nvar RegistrationRequest;\n\n(function (RegistrationRequest) {\n  RegistrationRequest.type = new vscode_jsonrpc_1.RequestType('client/registerCapability');\n})(RegistrationRequest = exports.RegistrationRequest || (exports.RegistrationRequest = {}));\n/**\r\n * The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability\r\n * handler on the client side.\r\n */\n\n\nvar UnregistrationRequest;\n\n(function (UnregistrationRequest) {\n  UnregistrationRequest.type = new vscode_jsonrpc_1.RequestType('client/unregisterCapability');\n})(UnregistrationRequest = exports.UnregistrationRequest || (exports.UnregistrationRequest = {}));\n\nvar ResourceOperationKind;\n\n(function (ResourceOperationKind) {\n  /**\r\n   * Supports creating new files and folders.\r\n   */\n  ResourceOperationKind.Create = 'create';\n  /**\r\n   * Supports renaming existing files and folders.\r\n   */\n\n  ResourceOperationKind.Rename = 'rename';\n  /**\r\n   * Supports deleting existing files and folders.\r\n   */\n\n  ResourceOperationKind.Delete = 'delete';\n})(ResourceOperationKind = exports.ResourceOperationKind || (exports.ResourceOperationKind = {}));\n\nvar FailureHandlingKind;\n\n(function (FailureHandlingKind) {\n  /**\r\n   * Applying the workspace change is simply aborted if one of the changes provided\r\n   * fails. All operations executed before the failing operation stay executed.\r\n   */\n  FailureHandlingKind.Abort = 'abort';\n  /**\r\n   * All operations are executed transactional. That means they either all\r\n   * succeed or no changes at all are applied to the workspace.\r\n   */\n\n  FailureHandlingKind.Transactional = 'transactional';\n  /**\r\n   * If the workspace edit contains only textual file changes they are executed transactional.\r\n   * If resource changes (create, rename or delete file) are part of the change the failure\r\n   * handling startegy is abort.\r\n   */\n\n  FailureHandlingKind.TextOnlyTransactional = 'textOnlyTransactional';\n  /**\r\n   * The client tries to undo the operations already executed. But there is no\r\n   * guaruntee that this is succeeding.\r\n   */\n\n  FailureHandlingKind.Undo = 'undo';\n})(FailureHandlingKind = exports.FailureHandlingKind || (exports.FailureHandlingKind = {}));\n/**\r\n * Defines how the host (editor) should sync\r\n * document changes to the language server.\r\n */\n\n\nvar TextDocumentSyncKind;\n\n(function (TextDocumentSyncKind) {\n  /**\r\n   * Documents should not be synced at all.\r\n   */\n  TextDocumentSyncKind.None = 0;\n  /**\r\n   * Documents are synced by always sending the full content\r\n   * of the document.\r\n   */\n\n  TextDocumentSyncKind.Full = 1;\n  /**\r\n   * Documents are synced by sending the full content on open.\r\n   * After that only incremental updates to the document are\r\n   * send.\r\n   */\n\n  TextDocumentSyncKind.Incremental = 2;\n})(TextDocumentSyncKind = exports.TextDocumentSyncKind || (exports.TextDocumentSyncKind = {}));\n/**\r\n * The initialize request is sent from the client to the server.\r\n * It is sent once as the request after starting up the server.\r\n * The requests parameter is of type [InitializeParams](#InitializeParams)\r\n * the response if of type [InitializeResult](#InitializeResult) of a Thenable that\r\n * resolves to such.\r\n */\n\n\nvar InitializeRequest;\n\n(function (InitializeRequest) {\n  InitializeRequest.type = new vscode_jsonrpc_1.RequestType('initialize');\n})(InitializeRequest = exports.InitializeRequest || (exports.InitializeRequest = {}));\n/**\r\n * Known error codes for an `InitializeError`;\r\n */\n\n\nvar InitializeError;\n\n(function (InitializeError) {\n  /**\r\n   * If the protocol version provided by the client can't be handled by the server.\r\n   * @deprecated This initialize error got replaced by client capabilities. There is\r\n   * no version handshake in version 3.0x\r\n   */\n  InitializeError.unknownProtocolVersion = 1;\n})(InitializeError = exports.InitializeError || (exports.InitializeError = {}));\n/**\r\n * The intialized notification is sent from the client to the\r\n * server after the client is fully initialized and the server\r\n * is allowed to send requests from the server to the client.\r\n */\n\n\nvar InitializedNotification;\n\n(function (InitializedNotification) {\n  InitializedNotification.type = new vscode_jsonrpc_1.NotificationType('initialized');\n})(InitializedNotification = exports.InitializedNotification || (exports.InitializedNotification = {})); //---- Shutdown Method ----\n\n/**\r\n * A shutdown request is sent from the client to the server.\r\n * It is sent once when the client decides to shutdown the\r\n * server. The only notification that is sent after a shutdown request\r\n * is the exit event.\r\n */\n\n\nvar ShutdownRequest;\n\n(function (ShutdownRequest) {\n  ShutdownRequest.type = new vscode_jsonrpc_1.RequestType0('shutdown');\n})(ShutdownRequest = exports.ShutdownRequest || (exports.ShutdownRequest = {})); //---- Exit Notification ----\n\n/**\r\n * The exit event is sent from the client to the server to\r\n * ask the server to exit its process.\r\n */\n\n\nvar ExitNotification;\n\n(function (ExitNotification) {\n  ExitNotification.type = new vscode_jsonrpc_1.NotificationType0('exit');\n})(ExitNotification = exports.ExitNotification || (exports.ExitNotification = {})); //---- Configuration notification ----\n\n/**\r\n * The configuration change notification is sent from the client to the server\r\n * when the client's configuration has changed. The notification contains\r\n * the changed configuration as defined by the language client.\r\n */\n\n\nvar DidChangeConfigurationNotification;\n\n(function (DidChangeConfigurationNotification) {\n  DidChangeConfigurationNotification.type = new vscode_jsonrpc_1.NotificationType('workspace/didChangeConfiguration');\n})(DidChangeConfigurationNotification = exports.DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = {})); //---- Message show and log notifications ----\n\n/**\r\n * The message type\r\n */\n\n\nvar MessageType;\n\n(function (MessageType) {\n  /**\r\n   * An error message.\r\n   */\n  MessageType.Error = 1;\n  /**\r\n   * A warning message.\r\n   */\n\n  MessageType.Warning = 2;\n  /**\r\n   * An information message.\r\n   */\n\n  MessageType.Info = 3;\n  /**\r\n   * A log message.\r\n   */\n\n  MessageType.Log = 4;\n})(MessageType = exports.MessageType || (exports.MessageType = {}));\n/**\r\n * The show message notification is sent from a server to a client to ask\r\n * the client to display a particular message in the user interface.\r\n */\n\n\nvar ShowMessageNotification;\n\n(function (ShowMessageNotification) {\n  ShowMessageNotification.type = new vscode_jsonrpc_1.NotificationType('window/showMessage');\n})(ShowMessageNotification = exports.ShowMessageNotification || (exports.ShowMessageNotification = {}));\n/**\r\n * The show message request is sent from the server to the client to show a message\r\n * and a set of options actions to the user.\r\n */\n\n\nvar ShowMessageRequest;\n\n(function (ShowMessageRequest) {\n  ShowMessageRequest.type = new vscode_jsonrpc_1.RequestType('window/showMessageRequest');\n})(ShowMessageRequest = exports.ShowMessageRequest || (exports.ShowMessageRequest = {}));\n/**\r\n * The log message notification is sent from the server to the client to ask\r\n * the client to log a particular message.\r\n */\n\n\nvar LogMessageNotification;\n\n(function (LogMessageNotification) {\n  LogMessageNotification.type = new vscode_jsonrpc_1.NotificationType('window/logMessage');\n})(LogMessageNotification = exports.LogMessageNotification || (exports.LogMessageNotification = {})); //---- Telemetry notification\n\n/**\r\n * The telemetry event notification is sent from the server to the client to ask\r\n * the client to log telemetry data.\r\n */\n\n\nvar TelemetryEventNotification;\n\n(function (TelemetryEventNotification) {\n  TelemetryEventNotification.type = new vscode_jsonrpc_1.NotificationType('telemetry/event');\n})(TelemetryEventNotification = exports.TelemetryEventNotification || (exports.TelemetryEventNotification = {}));\n/**\r\n * The document open notification is sent from the client to the server to signal\r\n * newly opened text documents. The document's truth is now managed by the client\r\n * and the server must not try to read the document's truth using the document's\r\n * uri. Open in this sense means it is managed by the client. It doesn't necessarily\r\n * mean that its content is presented in an editor. An open notification must not\r\n * be sent more than once without a corresponding close notification send before.\r\n * This means open and close notification must be balanced and the max open count\r\n * is one.\r\n */\n\n\nvar DidOpenTextDocumentNotification;\n\n(function (DidOpenTextDocumentNotification) {\n  DidOpenTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/didOpen');\n})(DidOpenTextDocumentNotification = exports.DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = {}));\n/**\r\n * The document change notification is sent from the client to the server to signal\r\n * changes to a text document.\r\n */\n\n\nvar DidChangeTextDocumentNotification;\n\n(function (DidChangeTextDocumentNotification) {\n  DidChangeTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/didChange');\n})(DidChangeTextDocumentNotification = exports.DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = {}));\n/**\r\n * The document close notification is sent from the client to the server when\r\n * the document got closed in the client. The document's truth now exists where\r\n * the document's uri points to (e.g. if the document's uri is a file uri the\r\n * truth now exists on disk). As with the open notification the close notification\r\n * is about managing the document's content. Receiving a close notification\r\n * doesn't mean that the document was open in an editor before. A close\r\n * notification requires a previous open notification to be sent.\r\n */\n\n\nvar DidCloseTextDocumentNotification;\n\n(function (DidCloseTextDocumentNotification) {\n  DidCloseTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/didClose');\n})(DidCloseTextDocumentNotification = exports.DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = {}));\n/**\r\n * The document save notification is sent from the client to the server when\r\n * the document got saved in the client.\r\n */\n\n\nvar DidSaveTextDocumentNotification;\n\n(function (DidSaveTextDocumentNotification) {\n  DidSaveTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/didSave');\n})(DidSaveTextDocumentNotification = exports.DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = {}));\n/**\r\n * A document will save notification is sent from the client to the server before\r\n * the document is actually saved.\r\n */\n\n\nvar WillSaveTextDocumentNotification;\n\n(function (WillSaveTextDocumentNotification) {\n  WillSaveTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/willSave');\n})(WillSaveTextDocumentNotification = exports.WillSaveTextDocumentNotification || (exports.WillSaveTextDocumentNotification = {}));\n/**\r\n * A document will save request is sent from the client to the server before\r\n * the document is actually saved. The request can return an array of TextEdits\r\n * which will be applied to the text document before it is saved. Please note that\r\n * clients might drop results if computing the text edits took too long or if a\r\n * server constantly fails on this request. This is done to keep the save fast and\r\n * reliable.\r\n */\n\n\nvar WillSaveTextDocumentWaitUntilRequest;\n\n(function (WillSaveTextDocumentWaitUntilRequest) {\n  WillSaveTextDocumentWaitUntilRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/willSaveWaitUntil');\n})(WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentWaitUntilRequest || (exports.WillSaveTextDocumentWaitUntilRequest = {})); //---- File eventing ----\n\n/**\r\n * The watched files notification is sent from the client to the server when\r\n * the client detects changes to file watched by the language client.\r\n */\n\n\nvar DidChangeWatchedFilesNotification;\n\n(function (DidChangeWatchedFilesNotification) {\n  DidChangeWatchedFilesNotification.type = new vscode_jsonrpc_1.NotificationType('workspace/didChangeWatchedFiles');\n})(DidChangeWatchedFilesNotification = exports.DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = {}));\n/**\r\n * The file event type\r\n */\n\n\nvar FileChangeType;\n\n(function (FileChangeType) {\n  /**\r\n   * The file got created.\r\n   */\n  FileChangeType.Created = 1;\n  /**\r\n   * The file got changed.\r\n   */\n\n  FileChangeType.Changed = 2;\n  /**\r\n   * The file got deleted.\r\n   */\n\n  FileChangeType.Deleted = 3;\n})(FileChangeType = exports.FileChangeType || (exports.FileChangeType = {}));\n\nvar WatchKind;\n\n(function (WatchKind) {\n  /**\r\n   * Interested in create events.\r\n   */\n  WatchKind.Create = 1;\n  /**\r\n   * Interested in change events\r\n   */\n\n  WatchKind.Change = 2;\n  /**\r\n   * Interested in delete events\r\n   */\n\n  WatchKind.Delete = 4;\n})(WatchKind = exports.WatchKind || (exports.WatchKind = {})); //---- Diagnostic notification ----\n\n/**\r\n * Diagnostics notification are sent from the server to the client to signal\r\n * results of validation runs.\r\n */\n\n\nvar PublishDiagnosticsNotification;\n\n(function (PublishDiagnosticsNotification) {\n  PublishDiagnosticsNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/publishDiagnostics');\n})(PublishDiagnosticsNotification = exports.PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = {}));\n/**\r\n * How a completion was triggered\r\n */\n\n\nvar CompletionTriggerKind;\n\n(function (CompletionTriggerKind) {\n  /**\r\n   * Completion was triggered by typing an identifier (24x7 code\r\n   * complete), manual invocation (e.g Ctrl+Space) or via API.\r\n   */\n  CompletionTriggerKind.Invoked = 1;\n  /**\r\n   * Completion was triggered by a trigger character specified by\r\n   * the `triggerCharacters` properties of the `CompletionRegistrationOptions`.\r\n   */\n\n  CompletionTriggerKind.TriggerCharacter = 2;\n  /**\r\n   * Completion was re-triggered as current completion list is incomplete\r\n   */\n\n  CompletionTriggerKind.TriggerForIncompleteCompletions = 3;\n})(CompletionTriggerKind = exports.CompletionTriggerKind || (exports.CompletionTriggerKind = {}));\n/**\r\n * Request to request completion at a given text document position. The request's\r\n * parameter is of type [TextDocumentPosition](#TextDocumentPosition) the response\r\n * is of type [CompletionItem[]](#CompletionItem) or [CompletionList](#CompletionList)\r\n * or a Thenable that resolves to such.\r\n *\r\n * The request can delay the computation of the [`detail`](#CompletionItem.detail)\r\n * and [`documentation`](#CompletionItem.documentation) properties to the `completionItem/resolve`\r\n * request. However, properties that are needed for the initial sorting and filtering, like `sortText`,\r\n * `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.\r\n */\n\n\nvar CompletionRequest;\n\n(function (CompletionRequest) {\n  CompletionRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/completion');\n})(CompletionRequest = exports.CompletionRequest || (exports.CompletionRequest = {}));\n/**\r\n * Request to resolve additional information for a given completion item.The request's\r\n * parameter is of type [CompletionItem](#CompletionItem) the response\r\n * is of type [CompletionItem](#CompletionItem) or a Thenable that resolves to such.\r\n */\n\n\nvar CompletionResolveRequest;\n\n(function (CompletionResolveRequest) {\n  CompletionResolveRequest.type = new vscode_jsonrpc_1.RequestType('completionItem/resolve');\n})(CompletionResolveRequest = exports.CompletionResolveRequest || (exports.CompletionResolveRequest = {})); //---- Hover Support -------------------------------\n\n/**\r\n * Request to request hover information at a given text document position. The request's\r\n * parameter is of type [TextDocumentPosition](#TextDocumentPosition) the response is of\r\n * type [Hover](#Hover) or a Thenable that resolves to such.\r\n */\n\n\nvar HoverRequest;\n\n(function (HoverRequest) {\n  HoverRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/hover');\n})(HoverRequest = exports.HoverRequest || (exports.HoverRequest = {}));\n\nvar SignatureHelpRequest;\n\n(function (SignatureHelpRequest) {\n  SignatureHelpRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/signatureHelp');\n})(SignatureHelpRequest = exports.SignatureHelpRequest || (exports.SignatureHelpRequest = {})); //---- Goto Definition -------------------------------------\n\n/**\r\n * A request to resolve the definition location of a symbol at a given text\r\n * document position. The request's parameter is of type [TextDocumentPosition]\r\n * (#TextDocumentPosition) the response is of either type [Definition](#Definition)\r\n * or a typed array of [DefinitionLink](#DefinitionLink) or a Thenable that resolves\r\n * to such.\r\n */\n\n\nvar DefinitionRequest;\n\n(function (DefinitionRequest) {\n  DefinitionRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/definition');\n})(DefinitionRequest = exports.DefinitionRequest || (exports.DefinitionRequest = {}));\n/**\r\n * A request to resolve project-wide references for the symbol denoted\r\n * by the given text document position. The request's parameter is of\r\n * type [ReferenceParams](#ReferenceParams) the response is of type\r\n * [Location[]](#Location) or a Thenable that resolves to such.\r\n */\n\n\nvar ReferencesRequest;\n\n(function (ReferencesRequest) {\n  ReferencesRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/references');\n})(ReferencesRequest = exports.ReferencesRequest || (exports.ReferencesRequest = {})); //---- Document Highlight ----------------------------------\n\n/**\r\n * Request to resolve a [DocumentHighlight](#DocumentHighlight) for a given\r\n * text document position. The request's parameter is of type [TextDocumentPosition]\r\n * (#TextDocumentPosition) the request response is of type [DocumentHighlight[]]\r\n * (#DocumentHighlight) or a Thenable that resolves to such.\r\n */\n\n\nvar DocumentHighlightRequest;\n\n(function (DocumentHighlightRequest) {\n  DocumentHighlightRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/documentHighlight');\n})(DocumentHighlightRequest = exports.DocumentHighlightRequest || (exports.DocumentHighlightRequest = {})); //---- Document Symbol Provider ---------------------------\n\n/**\r\n * A request to list all symbols found in a given text document. The request's\r\n * parameter is of type [TextDocumentIdentifier](#TextDocumentIdentifier) the\r\n * response is of type [SymbolInformation[]](#SymbolInformation) or a Thenable\r\n * that resolves to such.\r\n */\n\n\nvar DocumentSymbolRequest;\n\n(function (DocumentSymbolRequest) {\n  DocumentSymbolRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/documentSymbol');\n})(DocumentSymbolRequest = exports.DocumentSymbolRequest || (exports.DocumentSymbolRequest = {})); //---- Workspace Symbol Provider ---------------------------\n\n/**\r\n * A request to list project-wide symbols matching the query string given\r\n * by the [WorkspaceSymbolParams](#WorkspaceSymbolParams). The response is\r\n * of type [SymbolInformation[]](#SymbolInformation) or a Thenable that\r\n * resolves to such.\r\n */\n\n\nvar WorkspaceSymbolRequest;\n\n(function (WorkspaceSymbolRequest) {\n  WorkspaceSymbolRequest.type = new vscode_jsonrpc_1.RequestType('workspace/symbol');\n})(WorkspaceSymbolRequest = exports.WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = {}));\n/**\r\n * A request to provide commands for the given text document and range.\r\n */\n\n\nvar CodeActionRequest;\n\n(function (CodeActionRequest) {\n  CodeActionRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/codeAction');\n})(CodeActionRequest = exports.CodeActionRequest || (exports.CodeActionRequest = {}));\n/**\r\n * A request to provide code lens for the given text document.\r\n */\n\n\nvar CodeLensRequest;\n\n(function (CodeLensRequest) {\n  CodeLensRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/codeLens');\n})(CodeLensRequest = exports.CodeLensRequest || (exports.CodeLensRequest = {}));\n/**\r\n * A request to resolve a command for a given code lens.\r\n */\n\n\nvar CodeLensResolveRequest;\n\n(function (CodeLensResolveRequest) {\n  CodeLensResolveRequest.type = new vscode_jsonrpc_1.RequestType('codeLens/resolve');\n})(CodeLensResolveRequest = exports.CodeLensResolveRequest || (exports.CodeLensResolveRequest = {}));\n/**\r\n * A request to to format a whole document.\r\n */\n\n\nvar DocumentFormattingRequest;\n\n(function (DocumentFormattingRequest) {\n  DocumentFormattingRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/formatting');\n})(DocumentFormattingRequest = exports.DocumentFormattingRequest || (exports.DocumentFormattingRequest = {}));\n/**\r\n * A request to to format a range in a document.\r\n */\n\n\nvar DocumentRangeFormattingRequest;\n\n(function (DocumentRangeFormattingRequest) {\n  DocumentRangeFormattingRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/rangeFormatting');\n})(DocumentRangeFormattingRequest = exports.DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = {}));\n/**\r\n * A request to format a document on type.\r\n */\n\n\nvar DocumentOnTypeFormattingRequest;\n\n(function (DocumentOnTypeFormattingRequest) {\n  DocumentOnTypeFormattingRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/onTypeFormatting');\n})(DocumentOnTypeFormattingRequest = exports.DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = {}));\n/**\r\n * A request to rename a symbol.\r\n */\n\n\nvar RenameRequest;\n\n(function (RenameRequest) {\n  RenameRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/rename');\n})(RenameRequest = exports.RenameRequest || (exports.RenameRequest = {}));\n/**\r\n * A request to test and perform the setup necessary for a rename.\r\n */\n\n\nvar PrepareRenameRequest;\n\n(function (PrepareRenameRequest) {\n  PrepareRenameRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/prepareRename');\n})(PrepareRenameRequest = exports.PrepareRenameRequest || (exports.PrepareRenameRequest = {}));\n/**\r\n * A request to provide document links\r\n */\n\n\nvar DocumentLinkRequest;\n\n(function (DocumentLinkRequest) {\n  DocumentLinkRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/documentLink');\n})(DocumentLinkRequest = exports.DocumentLinkRequest || (exports.DocumentLinkRequest = {}));\n/**\r\n * Request to resolve additional information for a given document link. The request's\r\n * parameter is of type [DocumentLink](#DocumentLink) the response\r\n * is of type [DocumentLink](#DocumentLink) or a Thenable that resolves to such.\r\n */\n\n\nvar DocumentLinkResolveRequest;\n\n(function (DocumentLinkResolveRequest) {\n  DocumentLinkResolveRequest.type = new vscode_jsonrpc_1.RequestType('documentLink/resolve');\n})(DocumentLinkResolveRequest = exports.DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = {}));\n/**\r\n * A request send from the client to the server to execute a command. The request might return\r\n * a workspace edit which the client will apply to the workspace.\r\n */\n\n\nvar ExecuteCommandRequest;\n\n(function (ExecuteCommandRequest) {\n  ExecuteCommandRequest.type = new vscode_jsonrpc_1.RequestType('workspace/executeCommand');\n})(ExecuteCommandRequest = exports.ExecuteCommandRequest || (exports.ExecuteCommandRequest = {}));\n/**\r\n * A request sent from the server to the client to modified certain resources.\r\n */\n\n\nvar ApplyWorkspaceEditRequest;\n\n(function (ApplyWorkspaceEditRequest) {\n  ApplyWorkspaceEditRequest.type = new vscode_jsonrpc_1.RequestType('workspace/applyEdit');\n})(ApplyWorkspaceEditRequest = exports.ApplyWorkspaceEditRequest || (exports.ApplyWorkspaceEditRequest = {}));","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/vscode-languageserver-protocol/lib/protocol.js"],"names":["Object","defineProperty","exports","value","Is","require","vscode_jsonrpc_1","protocol_implementation_1","ImplementationRequest","protocol_typeDefinition_1","TypeDefinitionRequest","protocol_workspaceFolders_1","WorkspaceFoldersRequest","DidChangeWorkspaceFoldersNotification","protocol_configuration_1","ConfigurationRequest","protocol_colorProvider_1","DocumentColorRequest","ColorPresentationRequest","protocol_foldingRange_1","FoldingRangeRequest","protocol_declaration_1","DeclarationRequest","__noDynamicImport","DocumentFilter","is","candidate","string","language","scheme","pattern","RegistrationRequest","type","RequestType","UnregistrationRequest","ResourceOperationKind","Create","Rename","Delete","FailureHandlingKind","Abort","Transactional","TextOnlyTransactional","Undo","TextDocumentSyncKind","None","Full","Incremental","InitializeRequest","InitializeError","unknownProtocolVersion","InitializedNotification","NotificationType","ShutdownRequest","RequestType0","ExitNotification","NotificationType0","DidChangeConfigurationNotification","MessageType","Error","Warning","Info","Log","ShowMessageNotification","ShowMessageRequest","LogMessageNotification","TelemetryEventNotification","DidOpenTextDocumentNotification","DidChangeTextDocumentNotification","DidCloseTextDocumentNotification","DidSaveTextDocumentNotification","WillSaveTextDocumentNotification","WillSaveTextDocumentWaitUntilRequest","DidChangeWatchedFilesNotification","FileChangeType","Created","Changed","Deleted","WatchKind","Change","PublishDiagnosticsNotification","CompletionTriggerKind","Invoked","TriggerCharacter","TriggerForIncompleteCompletions","CompletionRequest","CompletionResolveRequest","HoverRequest","SignatureHelpRequest","DefinitionRequest","ReferencesRequest","DocumentHighlightRequest","DocumentSymbolRequest","WorkspaceSymbolRequest","CodeActionRequest","CodeLensRequest","CodeLensResolveRequest","DocumentFormattingRequest","DocumentRangeFormattingRequest","DocumentOnTypeFormattingRequest","RenameRequest","PrepareRenameRequest","DocumentLinkRequest","DocumentLinkResolveRequest","ExecuteCommandRequest","ApplyWorkspaceEditRequest"],"mappings":"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","sourcesContent":["/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Is = require(\"./utils/is\");\r\nconst vscode_jsonrpc_1 = require(\"vscode-jsonrpc\");\r\nconst protocol_implementation_1 = require(\"./protocol.implementation\");\r\nexports.ImplementationRequest = protocol_implementation_1.ImplementationRequest;\r\nconst protocol_typeDefinition_1 = require(\"./protocol.typeDefinition\");\r\nexports.TypeDefinitionRequest = protocol_typeDefinition_1.TypeDefinitionRequest;\r\nconst protocol_workspaceFolders_1 = require(\"./protocol.workspaceFolders\");\r\nexports.WorkspaceFoldersRequest = protocol_workspaceFolders_1.WorkspaceFoldersRequest;\r\nexports.DidChangeWorkspaceFoldersNotification = protocol_workspaceFolders_1.DidChangeWorkspaceFoldersNotification;\r\nconst protocol_configuration_1 = require(\"./protocol.configuration\");\r\nexports.ConfigurationRequest = protocol_configuration_1.ConfigurationRequest;\r\nconst protocol_colorProvider_1 = require(\"./protocol.colorProvider\");\r\nexports.DocumentColorRequest = protocol_colorProvider_1.DocumentColorRequest;\r\nexports.ColorPresentationRequest = protocol_colorProvider_1.ColorPresentationRequest;\r\nconst protocol_foldingRange_1 = require(\"./protocol.foldingRange\");\r\nexports.FoldingRangeRequest = protocol_foldingRange_1.FoldingRangeRequest;\r\nconst protocol_declaration_1 = require(\"./protocol.declaration\");\r\nexports.DeclarationRequest = protocol_declaration_1.DeclarationRequest;\r\n// @ts-ignore: to avoid inlining LocatioLink as dynamic import\r\nlet __noDynamicImport;\r\nvar DocumentFilter;\r\n(function (DocumentFilter) {\r\n    function is(value) {\r\n        let candidate = value;\r\n        return Is.string(candidate.language) || Is.string(candidate.scheme) || Is.string(candidate.pattern);\r\n    }\r\n    DocumentFilter.is = is;\r\n})(DocumentFilter = exports.DocumentFilter || (exports.DocumentFilter = {}));\r\n/**\r\n * The `client/registerCapability` request is sent from the server to the client to register a new capability\r\n * handler on the client side.\r\n */\r\nvar RegistrationRequest;\r\n(function (RegistrationRequest) {\r\n    RegistrationRequest.type = new vscode_jsonrpc_1.RequestType('client/registerCapability');\r\n})(RegistrationRequest = exports.RegistrationRequest || (exports.RegistrationRequest = {}));\r\n/**\r\n * The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability\r\n * handler on the client side.\r\n */\r\nvar UnregistrationRequest;\r\n(function (UnregistrationRequest) {\r\n    UnregistrationRequest.type = new vscode_jsonrpc_1.RequestType('client/unregisterCapability');\r\n})(UnregistrationRequest = exports.UnregistrationRequest || (exports.UnregistrationRequest = {}));\r\nvar ResourceOperationKind;\r\n(function (ResourceOperationKind) {\r\n    /**\r\n     * Supports creating new files and folders.\r\n     */\r\n    ResourceOperationKind.Create = 'create';\r\n    /**\r\n     * Supports renaming existing files and folders.\r\n     */\r\n    ResourceOperationKind.Rename = 'rename';\r\n    /**\r\n     * Supports deleting existing files and folders.\r\n     */\r\n    ResourceOperationKind.Delete = 'delete';\r\n})(ResourceOperationKind = exports.ResourceOperationKind || (exports.ResourceOperationKind = {}));\r\nvar FailureHandlingKind;\r\n(function (FailureHandlingKind) {\r\n    /**\r\n     * Applying the workspace change is simply aborted if one of the changes provided\r\n     * fails. All operations executed before the failing operation stay executed.\r\n     */\r\n    FailureHandlingKind.Abort = 'abort';\r\n    /**\r\n     * All operations are executed transactional. That means they either all\r\n     * succeed or no changes at all are applied to the workspace.\r\n     */\r\n    FailureHandlingKind.Transactional = 'transactional';\r\n    /**\r\n     * If the workspace edit contains only textual file changes they are executed transactional.\r\n     * If resource changes (create, rename or delete file) are part of the change the failure\r\n     * handling startegy is abort.\r\n     */\r\n    FailureHandlingKind.TextOnlyTransactional = 'textOnlyTransactional';\r\n    /**\r\n     * The client tries to undo the operations already executed. But there is no\r\n     * guaruntee that this is succeeding.\r\n     */\r\n    FailureHandlingKind.Undo = 'undo';\r\n})(FailureHandlingKind = exports.FailureHandlingKind || (exports.FailureHandlingKind = {}));\r\n/**\r\n * Defines how the host (editor) should sync\r\n * document changes to the language server.\r\n */\r\nvar TextDocumentSyncKind;\r\n(function (TextDocumentSyncKind) {\r\n    /**\r\n     * Documents should not be synced at all.\r\n     */\r\n    TextDocumentSyncKind.None = 0;\r\n    /**\r\n     * Documents are synced by always sending the full content\r\n     * of the document.\r\n     */\r\n    TextDocumentSyncKind.Full = 1;\r\n    /**\r\n     * Documents are synced by sending the full content on open.\r\n     * After that only incremental updates to the document are\r\n     * send.\r\n     */\r\n    TextDocumentSyncKind.Incremental = 2;\r\n})(TextDocumentSyncKind = exports.TextDocumentSyncKind || (exports.TextDocumentSyncKind = {}));\r\n/**\r\n * The initialize request is sent from the client to the server.\r\n * It is sent once as the request after starting up the server.\r\n * The requests parameter is of type [InitializeParams](#InitializeParams)\r\n * the response if of type [InitializeResult](#InitializeResult) of a Thenable that\r\n * resolves to such.\r\n */\r\nvar InitializeRequest;\r\n(function (InitializeRequest) {\r\n    InitializeRequest.type = new vscode_jsonrpc_1.RequestType('initialize');\r\n})(InitializeRequest = exports.InitializeRequest || (exports.InitializeRequest = {}));\r\n/**\r\n * Known error codes for an `InitializeError`;\r\n */\r\nvar InitializeError;\r\n(function (InitializeError) {\r\n    /**\r\n     * If the protocol version provided by the client can't be handled by the server.\r\n     * @deprecated This initialize error got replaced by client capabilities. There is\r\n     * no version handshake in version 3.0x\r\n     */\r\n    InitializeError.unknownProtocolVersion = 1;\r\n})(InitializeError = exports.InitializeError || (exports.InitializeError = {}));\r\n/**\r\n * The intialized notification is sent from the client to the\r\n * server after the client is fully initialized and the server\r\n * is allowed to send requests from the server to the client.\r\n */\r\nvar InitializedNotification;\r\n(function (InitializedNotification) {\r\n    InitializedNotification.type = new vscode_jsonrpc_1.NotificationType('initialized');\r\n})(InitializedNotification = exports.InitializedNotification || (exports.InitializedNotification = {}));\r\n//---- Shutdown Method ----\r\n/**\r\n * A shutdown request is sent from the client to the server.\r\n * It is sent once when the client decides to shutdown the\r\n * server. The only notification that is sent after a shutdown request\r\n * is the exit event.\r\n */\r\nvar ShutdownRequest;\r\n(function (ShutdownRequest) {\r\n    ShutdownRequest.type = new vscode_jsonrpc_1.RequestType0('shutdown');\r\n})(ShutdownRequest = exports.ShutdownRequest || (exports.ShutdownRequest = {}));\r\n//---- Exit Notification ----\r\n/**\r\n * The exit event is sent from the client to the server to\r\n * ask the server to exit its process.\r\n */\r\nvar ExitNotification;\r\n(function (ExitNotification) {\r\n    ExitNotification.type = new vscode_jsonrpc_1.NotificationType0('exit');\r\n})(ExitNotification = exports.ExitNotification || (exports.ExitNotification = {}));\r\n//---- Configuration notification ----\r\n/**\r\n * The configuration change notification is sent from the client to the server\r\n * when the client's configuration has changed. The notification contains\r\n * the changed configuration as defined by the language client.\r\n */\r\nvar DidChangeConfigurationNotification;\r\n(function (DidChangeConfigurationNotification) {\r\n    DidChangeConfigurationNotification.type = new vscode_jsonrpc_1.NotificationType('workspace/didChangeConfiguration');\r\n})(DidChangeConfigurationNotification = exports.DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = {}));\r\n//---- Message show and log notifications ----\r\n/**\r\n * The message type\r\n */\r\nvar MessageType;\r\n(function (MessageType) {\r\n    /**\r\n     * An error message.\r\n     */\r\n    MessageType.Error = 1;\r\n    /**\r\n     * A warning message.\r\n     */\r\n    MessageType.Warning = 2;\r\n    /**\r\n     * An information message.\r\n     */\r\n    MessageType.Info = 3;\r\n    /**\r\n     * A log message.\r\n     */\r\n    MessageType.Log = 4;\r\n})(MessageType = exports.MessageType || (exports.MessageType = {}));\r\n/**\r\n * The show message notification is sent from a server to a client to ask\r\n * the client to display a particular message in the user interface.\r\n */\r\nvar ShowMessageNotification;\r\n(function (ShowMessageNotification) {\r\n    ShowMessageNotification.type = new vscode_jsonrpc_1.NotificationType('window/showMessage');\r\n})(ShowMessageNotification = exports.ShowMessageNotification || (exports.ShowMessageNotification = {}));\r\n/**\r\n * The show message request is sent from the server to the client to show a message\r\n * and a set of options actions to the user.\r\n */\r\nvar ShowMessageRequest;\r\n(function (ShowMessageRequest) {\r\n    ShowMessageRequest.type = new vscode_jsonrpc_1.RequestType('window/showMessageRequest');\r\n})(ShowMessageRequest = exports.ShowMessageRequest || (exports.ShowMessageRequest = {}));\r\n/**\r\n * The log message notification is sent from the server to the client to ask\r\n * the client to log a particular message.\r\n */\r\nvar LogMessageNotification;\r\n(function (LogMessageNotification) {\r\n    LogMessageNotification.type = new vscode_jsonrpc_1.NotificationType('window/logMessage');\r\n})(LogMessageNotification = exports.LogMessageNotification || (exports.LogMessageNotification = {}));\r\n//---- Telemetry notification\r\n/**\r\n * The telemetry event notification is sent from the server to the client to ask\r\n * the client to log telemetry data.\r\n */\r\nvar TelemetryEventNotification;\r\n(function (TelemetryEventNotification) {\r\n    TelemetryEventNotification.type = new vscode_jsonrpc_1.NotificationType('telemetry/event');\r\n})(TelemetryEventNotification = exports.TelemetryEventNotification || (exports.TelemetryEventNotification = {}));\r\n/**\r\n * The document open notification is sent from the client to the server to signal\r\n * newly opened text documents. The document's truth is now managed by the client\r\n * and the server must not try to read the document's truth using the document's\r\n * uri. Open in this sense means it is managed by the client. It doesn't necessarily\r\n * mean that its content is presented in an editor. An open notification must not\r\n * be sent more than once without a corresponding close notification send before.\r\n * This means open and close notification must be balanced and the max open count\r\n * is one.\r\n */\r\nvar DidOpenTextDocumentNotification;\r\n(function (DidOpenTextDocumentNotification) {\r\n    DidOpenTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/didOpen');\r\n})(DidOpenTextDocumentNotification = exports.DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = {}));\r\n/**\r\n * The document change notification is sent from the client to the server to signal\r\n * changes to a text document.\r\n */\r\nvar DidChangeTextDocumentNotification;\r\n(function (DidChangeTextDocumentNotification) {\r\n    DidChangeTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/didChange');\r\n})(DidChangeTextDocumentNotification = exports.DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = {}));\r\n/**\r\n * The document close notification is sent from the client to the server when\r\n * the document got closed in the client. The document's truth now exists where\r\n * the document's uri points to (e.g. if the document's uri is a file uri the\r\n * truth now exists on disk). As with the open notification the close notification\r\n * is about managing the document's content. Receiving a close notification\r\n * doesn't mean that the document was open in an editor before. A close\r\n * notification requires a previous open notification to be sent.\r\n */\r\nvar DidCloseTextDocumentNotification;\r\n(function (DidCloseTextDocumentNotification) {\r\n    DidCloseTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/didClose');\r\n})(DidCloseTextDocumentNotification = exports.DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = {}));\r\n/**\r\n * The document save notification is sent from the client to the server when\r\n * the document got saved in the client.\r\n */\r\nvar DidSaveTextDocumentNotification;\r\n(function (DidSaveTextDocumentNotification) {\r\n    DidSaveTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/didSave');\r\n})(DidSaveTextDocumentNotification = exports.DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = {}));\r\n/**\r\n * A document will save notification is sent from the client to the server before\r\n * the document is actually saved.\r\n */\r\nvar WillSaveTextDocumentNotification;\r\n(function (WillSaveTextDocumentNotification) {\r\n    WillSaveTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/willSave');\r\n})(WillSaveTextDocumentNotification = exports.WillSaveTextDocumentNotification || (exports.WillSaveTextDocumentNotification = {}));\r\n/**\r\n * A document will save request is sent from the client to the server before\r\n * the document is actually saved. The request can return an array of TextEdits\r\n * which will be applied to the text document before it is saved. Please note that\r\n * clients might drop results if computing the text edits took too long or if a\r\n * server constantly fails on this request. This is done to keep the save fast and\r\n * reliable.\r\n */\r\nvar WillSaveTextDocumentWaitUntilRequest;\r\n(function (WillSaveTextDocumentWaitUntilRequest) {\r\n    WillSaveTextDocumentWaitUntilRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/willSaveWaitUntil');\r\n})(WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentWaitUntilRequest || (exports.WillSaveTextDocumentWaitUntilRequest = {}));\r\n//---- File eventing ----\r\n/**\r\n * The watched files notification is sent from the client to the server when\r\n * the client detects changes to file watched by the language client.\r\n */\r\nvar DidChangeWatchedFilesNotification;\r\n(function (DidChangeWatchedFilesNotification) {\r\n    DidChangeWatchedFilesNotification.type = new vscode_jsonrpc_1.NotificationType('workspace/didChangeWatchedFiles');\r\n})(DidChangeWatchedFilesNotification = exports.DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = {}));\r\n/**\r\n * The file event type\r\n */\r\nvar FileChangeType;\r\n(function (FileChangeType) {\r\n    /**\r\n     * The file got created.\r\n     */\r\n    FileChangeType.Created = 1;\r\n    /**\r\n     * The file got changed.\r\n     */\r\n    FileChangeType.Changed = 2;\r\n    /**\r\n     * The file got deleted.\r\n     */\r\n    FileChangeType.Deleted = 3;\r\n})(FileChangeType = exports.FileChangeType || (exports.FileChangeType = {}));\r\nvar WatchKind;\r\n(function (WatchKind) {\r\n    /**\r\n     * Interested in create events.\r\n     */\r\n    WatchKind.Create = 1;\r\n    /**\r\n     * Interested in change events\r\n     */\r\n    WatchKind.Change = 2;\r\n    /**\r\n     * Interested in delete events\r\n     */\r\n    WatchKind.Delete = 4;\r\n})(WatchKind = exports.WatchKind || (exports.WatchKind = {}));\r\n//---- Diagnostic notification ----\r\n/**\r\n * Diagnostics notification are sent from the server to the client to signal\r\n * results of validation runs.\r\n */\r\nvar PublishDiagnosticsNotification;\r\n(function (PublishDiagnosticsNotification) {\r\n    PublishDiagnosticsNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/publishDiagnostics');\r\n})(PublishDiagnosticsNotification = exports.PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = {}));\r\n/**\r\n * How a completion was triggered\r\n */\r\nvar CompletionTriggerKind;\r\n(function (CompletionTriggerKind) {\r\n    /**\r\n     * Completion was triggered by typing an identifier (24x7 code\r\n     * complete), manual invocation (e.g Ctrl+Space) or via API.\r\n     */\r\n    CompletionTriggerKind.Invoked = 1;\r\n    /**\r\n     * Completion was triggered by a trigger character specified by\r\n     * the `triggerCharacters` properties of the `CompletionRegistrationOptions`.\r\n     */\r\n    CompletionTriggerKind.TriggerCharacter = 2;\r\n    /**\r\n     * Completion was re-triggered as current completion list is incomplete\r\n     */\r\n    CompletionTriggerKind.TriggerForIncompleteCompletions = 3;\r\n})(CompletionTriggerKind = exports.CompletionTriggerKind || (exports.CompletionTriggerKind = {}));\r\n/**\r\n * Request to request completion at a given text document position. The request's\r\n * parameter is of type [TextDocumentPosition](#TextDocumentPosition) the response\r\n * is of type [CompletionItem[]](#CompletionItem) or [CompletionList](#CompletionList)\r\n * or a Thenable that resolves to such.\r\n *\r\n * The request can delay the computation of the [`detail`](#CompletionItem.detail)\r\n * and [`documentation`](#CompletionItem.documentation) properties to the `completionItem/resolve`\r\n * request. However, properties that are needed for the initial sorting and filtering, like `sortText`,\r\n * `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.\r\n */\r\nvar CompletionRequest;\r\n(function (CompletionRequest) {\r\n    CompletionRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/completion');\r\n})(CompletionRequest = exports.CompletionRequest || (exports.CompletionRequest = {}));\r\n/**\r\n * Request to resolve additional information for a given completion item.The request's\r\n * parameter is of type [CompletionItem](#CompletionItem) the response\r\n * is of type [CompletionItem](#CompletionItem) or a Thenable that resolves to such.\r\n */\r\nvar CompletionResolveRequest;\r\n(function (CompletionResolveRequest) {\r\n    CompletionResolveRequest.type = new vscode_jsonrpc_1.RequestType('completionItem/resolve');\r\n})(CompletionResolveRequest = exports.CompletionResolveRequest || (exports.CompletionResolveRequest = {}));\r\n//---- Hover Support -------------------------------\r\n/**\r\n * Request to request hover information at a given text document position. The request's\r\n * parameter is of type [TextDocumentPosition](#TextDocumentPosition) the response is of\r\n * type [Hover](#Hover) or a Thenable that resolves to such.\r\n */\r\nvar HoverRequest;\r\n(function (HoverRequest) {\r\n    HoverRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/hover');\r\n})(HoverRequest = exports.HoverRequest || (exports.HoverRequest = {}));\r\nvar SignatureHelpRequest;\r\n(function (SignatureHelpRequest) {\r\n    SignatureHelpRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/signatureHelp');\r\n})(SignatureHelpRequest = exports.SignatureHelpRequest || (exports.SignatureHelpRequest = {}));\r\n//---- Goto Definition -------------------------------------\r\n/**\r\n * A request to resolve the definition location of a symbol at a given text\r\n * document position. The request's parameter is of type [TextDocumentPosition]\r\n * (#TextDocumentPosition) the response is of either type [Definition](#Definition)\r\n * or a typed array of [DefinitionLink](#DefinitionLink) or a Thenable that resolves\r\n * to such.\r\n */\r\nvar DefinitionRequest;\r\n(function (DefinitionRequest) {\r\n    DefinitionRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/definition');\r\n})(DefinitionRequest = exports.DefinitionRequest || (exports.DefinitionRequest = {}));\r\n/**\r\n * A request to resolve project-wide references for the symbol denoted\r\n * by the given text document position. The request's parameter is of\r\n * type [ReferenceParams](#ReferenceParams) the response is of type\r\n * [Location[]](#Location) or a Thenable that resolves to such.\r\n */\r\nvar ReferencesRequest;\r\n(function (ReferencesRequest) {\r\n    ReferencesRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/references');\r\n})(ReferencesRequest = exports.ReferencesRequest || (exports.ReferencesRequest = {}));\r\n//---- Document Highlight ----------------------------------\r\n/**\r\n * Request to resolve a [DocumentHighlight](#DocumentHighlight) for a given\r\n * text document position. The request's parameter is of type [TextDocumentPosition]\r\n * (#TextDocumentPosition) the request response is of type [DocumentHighlight[]]\r\n * (#DocumentHighlight) or a Thenable that resolves to such.\r\n */\r\nvar DocumentHighlightRequest;\r\n(function (DocumentHighlightRequest) {\r\n    DocumentHighlightRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/documentHighlight');\r\n})(DocumentHighlightRequest = exports.DocumentHighlightRequest || (exports.DocumentHighlightRequest = {}));\r\n//---- Document Symbol Provider ---------------------------\r\n/**\r\n * A request to list all symbols found in a given text document. The request's\r\n * parameter is of type [TextDocumentIdentifier](#TextDocumentIdentifier) the\r\n * response is of type [SymbolInformation[]](#SymbolInformation) or a Thenable\r\n * that resolves to such.\r\n */\r\nvar DocumentSymbolRequest;\r\n(function (DocumentSymbolRequest) {\r\n    DocumentSymbolRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/documentSymbol');\r\n})(DocumentSymbolRequest = exports.DocumentSymbolRequest || (exports.DocumentSymbolRequest = {}));\r\n//---- Workspace Symbol Provider ---------------------------\r\n/**\r\n * A request to list project-wide symbols matching the query string given\r\n * by the [WorkspaceSymbolParams](#WorkspaceSymbolParams). The response is\r\n * of type [SymbolInformation[]](#SymbolInformation) or a Thenable that\r\n * resolves to such.\r\n */\r\nvar WorkspaceSymbolRequest;\r\n(function (WorkspaceSymbolRequest) {\r\n    WorkspaceSymbolRequest.type = new vscode_jsonrpc_1.RequestType('workspace/symbol');\r\n})(WorkspaceSymbolRequest = exports.WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = {}));\r\n/**\r\n * A request to provide commands for the given text document and range.\r\n */\r\nvar CodeActionRequest;\r\n(function (CodeActionRequest) {\r\n    CodeActionRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/codeAction');\r\n})(CodeActionRequest = exports.CodeActionRequest || (exports.CodeActionRequest = {}));\r\n/**\r\n * A request to provide code lens for the given text document.\r\n */\r\nvar CodeLensRequest;\r\n(function (CodeLensRequest) {\r\n    CodeLensRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/codeLens');\r\n})(CodeLensRequest = exports.CodeLensRequest || (exports.CodeLensRequest = {}));\r\n/**\r\n * A request to resolve a command for a given code lens.\r\n */\r\nvar CodeLensResolveRequest;\r\n(function (CodeLensResolveRequest) {\r\n    CodeLensResolveRequest.type = new vscode_jsonrpc_1.RequestType('codeLens/resolve');\r\n})(CodeLensResolveRequest = exports.CodeLensResolveRequest || (exports.CodeLensResolveRequest = {}));\r\n/**\r\n * A request to to format a whole document.\r\n */\r\nvar DocumentFormattingRequest;\r\n(function (DocumentFormattingRequest) {\r\n    DocumentFormattingRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/formatting');\r\n})(DocumentFormattingRequest = exports.DocumentFormattingRequest || (exports.DocumentFormattingRequest = {}));\r\n/**\r\n * A request to to format a range in a document.\r\n */\r\nvar DocumentRangeFormattingRequest;\r\n(function (DocumentRangeFormattingRequest) {\r\n    DocumentRangeFormattingRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/rangeFormatting');\r\n})(DocumentRangeFormattingRequest = exports.DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = {}));\r\n/**\r\n * A request to format a document on type.\r\n */\r\nvar DocumentOnTypeFormattingRequest;\r\n(function (DocumentOnTypeFormattingRequest) {\r\n    DocumentOnTypeFormattingRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/onTypeFormatting');\r\n})(DocumentOnTypeFormattingRequest = exports.DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = {}));\r\n/**\r\n * A request to rename a symbol.\r\n */\r\nvar RenameRequest;\r\n(function (RenameRequest) {\r\n    RenameRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/rename');\r\n})(RenameRequest = exports.RenameRequest || (exports.RenameRequest = {}));\r\n/**\r\n * A request to test and perform the setup necessary for a rename.\r\n */\r\nvar PrepareRenameRequest;\r\n(function (PrepareRenameRequest) {\r\n    PrepareRenameRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/prepareRename');\r\n})(PrepareRenameRequest = exports.PrepareRenameRequest || (exports.PrepareRenameRequest = {}));\r\n/**\r\n * A request to provide document links\r\n */\r\nvar DocumentLinkRequest;\r\n(function (DocumentLinkRequest) {\r\n    DocumentLinkRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/documentLink');\r\n})(DocumentLinkRequest = exports.DocumentLinkRequest || (exports.DocumentLinkRequest = {}));\r\n/**\r\n * Request to resolve additional information for a given document link. The request's\r\n * parameter is of type [DocumentLink](#DocumentLink) the response\r\n * is of type [DocumentLink](#DocumentLink) or a Thenable that resolves to such.\r\n */\r\nvar DocumentLinkResolveRequest;\r\n(function (DocumentLinkResolveRequest) {\r\n    DocumentLinkResolveRequest.type = new vscode_jsonrpc_1.RequestType('documentLink/resolve');\r\n})(DocumentLinkResolveRequest = exports.DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = {}));\r\n/**\r\n * A request send from the client to the server to execute a command. The request might return\r\n * a workspace edit which the client will apply to the workspace.\r\n */\r\nvar ExecuteCommandRequest;\r\n(function (ExecuteCommandRequest) {\r\n    ExecuteCommandRequest.type = new vscode_jsonrpc_1.RequestType('workspace/executeCommand');\r\n})(ExecuteCommandRequest = exports.ExecuteCommandRequest || (exports.ExecuteCommandRequest = {}));\r\n/**\r\n * A request sent from the server to the client to modified certain resources.\r\n */\r\nvar ApplyWorkspaceEditRequest;\r\n(function (ApplyWorkspaceEditRequest) {\r\n    ApplyWorkspaceEditRequest.type = new vscode_jsonrpc_1.RequestType('workspace/applyEdit');\r\n})(ApplyWorkspaceEditRequest = exports.ApplyWorkspaceEditRequest || (exports.ApplyWorkspaceEditRequest = {}));\r\n"]},"metadata":{},"sourceType":"script"}