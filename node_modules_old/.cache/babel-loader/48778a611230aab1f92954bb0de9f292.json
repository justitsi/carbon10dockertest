{"ast":null,"code":"const execa = require('execa');\n\nfunction head(options) {\n  try {\n    return execa.sync('git', ['rev-parse', 'HEAD'], options).stdout;\n  } catch (error) {\n    return undefined;\n  }\n}\n\nfunction branch(options) {\n  try {\n    const headRef = execa.sync('git', ['rev-parse', '--abbrev-ref', 'HEAD'], options).stdout;\n\n    if (headRef === 'HEAD') {\n      const branch = execa.sync('git', ['show', '-s', '--pretty=%d', 'HEAD'], options).stdout.replace(/^\\(|\\)$/g, '').split(', ').find(branch => branch.startsWith('origin/'));\n      return branch ? branch.match(/^origin\\/(.+)/)[1] : undefined;\n    }\n\n    return headRef;\n  } catch (error) {\n    return undefined;\n  }\n}\n\nmodule.exports = {\n  head,\n  branch\n};","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/env-ci/lib/git.js"],"names":["execa","require","head","options","sync","stdout","error","undefined","branch","headRef","replace","split","find","startsWith","match","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,SAASC,IAAT,CAAcC,OAAd,EAAuB;AACtB,MAAI;AACH,WAAOH,KAAK,CAACI,IAAN,CAAW,KAAX,EAAkB,CAAC,WAAD,EAAc,MAAd,CAAlB,EAAyCD,OAAzC,EAAkDE,MAAzD;AACA,GAFD,CAEE,OAAOC,KAAP,EAAc;AACf,WAAOC,SAAP;AACA;AACD;;AAED,SAASC,MAAT,CAAgBL,OAAhB,EAAyB;AACxB,MAAI;AACH,UAAMM,OAAO,GAAGT,KAAK,CAACI,IAAN,CAAW,KAAX,EAAkB,CAAC,WAAD,EAAc,cAAd,EAA8B,MAA9B,CAAlB,EAAyDD,OAAzD,EAAkEE,MAAlF;;AAEA,QAAII,OAAO,KAAK,MAAhB,EAAwB;AACvB,YAAMD,MAAM,GAAGR,KAAK,CAClBI,IADa,CACR,KADQ,EACD,CAAC,MAAD,EAAS,IAAT,EAAe,aAAf,EAA8B,MAA9B,CADC,EACsCD,OADtC,EAEbE,MAFa,CAENK,OAFM,CAEE,UAFF,EAEc,EAFd,EAGbC,KAHa,CAGP,IAHO,EAIbC,IAJa,CAIRJ,MAAM,IAAIA,MAAM,CAACK,UAAP,CAAkB,SAAlB,CAJF,CAAf;AAKA,aAAOL,MAAM,GAAGA,MAAM,CAACM,KAAP,CAAa,eAAb,EAA8B,CAA9B,CAAH,GAAsCP,SAAnD;AACA;;AAED,WAAOE,OAAP;AACA,GAbD,CAaE,OAAOH,KAAP,EAAc;AACf,WAAOC,SAAP;AACA;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiB;AAACd,EAAAA,IAAD;AAAOM,EAAAA;AAAP,CAAjB","sourcesContent":["const execa = require('execa');\n\nfunction head(options) {\n\ttry {\n\t\treturn execa.sync('git', ['rev-parse', 'HEAD'], options).stdout;\n\t} catch (error) {\n\t\treturn undefined;\n\t}\n}\n\nfunction branch(options) {\n\ttry {\n\t\tconst headRef = execa.sync('git', ['rev-parse', '--abbrev-ref', 'HEAD'], options).stdout;\n\n\t\tif (headRef === 'HEAD') {\n\t\t\tconst branch = execa\n\t\t\t\t.sync('git', ['show', '-s', '--pretty=%d', 'HEAD'], options)\n\t\t\t\t.stdout.replace(/^\\(|\\)$/g, '')\n\t\t\t\t.split(', ')\n\t\t\t\t.find(branch => branch.startsWith('origin/'));\n\t\t\treturn branch ? branch.match(/^origin\\/(.+)/)[1] : undefined;\n\t\t}\n\n\t\treturn headRef;\n\t} catch (error) {\n\t\treturn undefined;\n\t}\n}\n\nmodule.exports = {head, branch};\n"]},"metadata":{},"sourceType":"script"}