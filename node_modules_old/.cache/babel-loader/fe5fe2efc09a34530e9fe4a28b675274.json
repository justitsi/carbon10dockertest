{"ast":null,"code":"'use strict';\n\nvar childProcess = require('child_process');\n\nvar escapeStringRegexp = require('escape-string-regexp');\n\nvar fs = require('graceful-fs');\n\nvar path = require('path');\n\nvar shell = require('shelljs');\n\nvar HAS_NATIVE_EXECSYNC = childProcess.hasOwnProperty('spawnSync');\nvar PATH_SEP = path.sep;\nvar RE_BRANCH = /^ref: refs\\/heads\\/(.*)\\n/;\n\nfunction _command(cmd, args) {\n  var result;\n\n  if (HAS_NATIVE_EXECSYNC) {\n    result = childProcess.spawnSync(cmd, args);\n\n    if (result.status !== 0) {\n      throw new Error('[git-rev-sync] failed to execute command: ' + result.stderr + '/' + result.error);\n    }\n\n    return result.stdout.toString('utf8').replace(/^\\s+|\\s+$/g, '');\n  }\n\n  result = shell.exec(cmd + ' ' + args.join(' '), {\n    silent: true\n  });\n\n  if (result.code !== 0) {\n    throw new Error('[git-rev-sync] failed to execute command: ' + result.stdout);\n  }\n\n  return result.stdout.toString('utf8').replace(/^\\s+|\\s+$/g, '');\n}\n\nfunction _getGitDirectory(start) {\n  if (start === undefined || start === null) {\n    start = module.parent.filename;\n  }\n\n  if (typeof start === 'string') {\n    start = start.split(PATH_SEP);\n  }\n\n  var gitRepoPath = start.join(PATH_SEP);\n  var testPath = gitRepoPath;\n\n  if (!testPath.length) {\n    throw new Error('[git-rev-sync] no git repository found');\n  }\n\n  testPath = path.resolve(testPath, '.git');\n\n  if (fs.existsSync(testPath)) {\n    if (!fs.statSync(testPath).isDirectory()) {\n      var parentRepoPath = fs.readFileSync(testPath, 'utf8').trim().split(' ').pop();\n\n      if (!path.isAbsolute(parentRepoPath)) {\n        parentRepoPath = path.resolve(gitRepoPath, parentRepoPath);\n      }\n\n      if (fs.existsSync(parentRepoPath)) {\n        return path.resolve(parentRepoPath);\n      }\n\n      throw new Error('[git-rev-sync] could not find repository from path' + parentRepoPath);\n    }\n\n    return testPath;\n  }\n\n  start.pop();\n  return _getGitDirectory(start);\n}\n\nfunction branch(dir) {\n  var gitDir = _getGitDirectory(dir);\n\n  var head = fs.readFileSync(path.resolve(gitDir, 'HEAD'), 'utf8');\n  var b = head.match(RE_BRANCH);\n\n  if (b) {\n    return b[1];\n  }\n\n  return 'Detached: ' + head.trim();\n}\n\nfunction long(dir) {\n  var b = branch(dir);\n\n  if (/Detached: /.test(b)) {\n    return b.substr(10);\n  }\n\n  var gitDir = _getGitDirectory(dir);\n\n  var gitRootDir = gitDir.indexOf('.git/worktrees/') > 0 ? gitDir.replace(/\\.git\\/worktrees\\/.+$/, '.git') : gitDir;\n  var refsFilePath = path.resolve(gitRootDir, 'refs', 'heads', b);\n  var ref;\n\n  if (fs.existsSync(refsFilePath)) {\n    ref = fs.readFileSync(refsFilePath, 'utf8');\n  } else {\n    // If there isn't an entry in /refs/heads for this branch, it may be that\n    // the ref is stored in the packfile (.git/packed-refs). Fall back to\n    // looking up the hash here.\n    var refToFind = ['refs', 'heads', b].join('/');\n    var packfileContents = fs.readFileSync(path.resolve(gitDir, 'packed-refs'), 'utf8');\n    var packfileRegex = new RegExp('(.*) ' + escapeStringRegexp(refToFind));\n    ref = packfileRegex.exec(packfileContents)[1];\n  }\n\n  return ref.trim();\n}\n\nfunction short(dir, len) {\n  return long(dir).substr(0, len || 7);\n}\n\nfunction message() {\n  return _command('git', ['log', '-1', '--pretty=%B']);\n}\n\nfunction tag(markDirty) {\n  if (markDirty) {\n    return _command('git', ['describe', '--always', '--tag', '--dirty', '--abbrev=0']);\n  }\n\n  return _command('git', ['describe', '--always', '--tag', '--abbrev=0']);\n}\n\nfunction tagFirstParent(markDirty) {\n  if (markDirty) {\n    return _command('git', ['describe', '--always', '--tag', '--dirty', '--abbrev=0', '--first-parent']);\n  }\n\n  return _command('git', ['describe', '--always', '--tag', '--abbrev=0', '--first-parent']);\n}\n\nfunction hasUnstagedChanges() {\n  var writeTree = _command('git', ['write-tree']);\n\n  return _command('git', ['diff-index', writeTree, '--']).length > 0;\n}\n\nfunction isDirty() {\n  return _command('git', ['diff-index', 'HEAD', '--']).length > 0;\n}\n\nfunction isTagDirty() {\n  try {\n    _command('git', ['describe', '--exact-match', '--tags']);\n  } catch (e) {\n    if (e.message.indexOf('no tag exactly matches')) {\n      return true;\n    }\n\n    throw e;\n  }\n\n  return false;\n}\n\nfunction remoteUrl() {\n  return _command('git', ['ls-remote', '--get-url']);\n}\n\nfunction date() {\n  return new Date(_command('git', ['log', '--no-color', '-n', '1', '--pretty=format:\"%ad\"']));\n}\n\nfunction count() {\n  return parseInt(_command('git', ['rev-list', '--all', '--count']), 10);\n}\n\nfunction log() {\n  throw new Error('not implemented');\n}\n\nmodule.exports = {\n  branch: branch,\n  count: count,\n  date: date,\n  hasUnstagedChanges: hasUnstagedChanges,\n  isDirty: isDirty,\n  isTagDirty: isTagDirty,\n  log: log,\n  long: long,\n  message: message,\n  remoteUrl: remoteUrl,\n  short: short,\n  tag: tag,\n  tagFirstParent: tagFirstParent\n};","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/git-rev-sync/index.js"],"names":["childProcess","require","escapeStringRegexp","fs","path","shell","HAS_NATIVE_EXECSYNC","hasOwnProperty","PATH_SEP","sep","RE_BRANCH","_command","cmd","args","result","spawnSync","status","Error","stderr","error","stdout","toString","replace","exec","join","silent","code","_getGitDirectory","start","undefined","module","parent","filename","split","gitRepoPath","testPath","length","resolve","existsSync","statSync","isDirectory","parentRepoPath","readFileSync","trim","pop","isAbsolute","branch","dir","gitDir","head","b","match","long","test","substr","gitRootDir","indexOf","refsFilePath","ref","refToFind","packfileContents","packfileRegex","RegExp","short","len","message","tag","markDirty","tagFirstParent","hasUnstagedChanges","writeTree","isDirty","isTagDirty","e","remoteUrl","date","Date","count","parseInt","log","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar childProcess = require('child_process');\nvar escapeStringRegexp = require('escape-string-regexp');\nvar fs = require('graceful-fs');\nvar path = require('path');\nvar shell = require('shelljs');\n\nvar HAS_NATIVE_EXECSYNC = childProcess.hasOwnProperty('spawnSync');\nvar PATH_SEP = path.sep;\nvar RE_BRANCH = /^ref: refs\\/heads\\/(.*)\\n/;\n\nfunction _command(cmd, args) {\n  var result;\n\n  if (HAS_NATIVE_EXECSYNC) {\n    result = childProcess.spawnSync(cmd, args);\n\n    if (result.status !== 0) {\n      throw new Error('[git-rev-sync] failed to execute command: ' + result.stderr + '/' + result.error);\n    }\n\n    return result.stdout.toString('utf8').replace(/^\\s+|\\s+$/g, '');\n  }\n\n  result = shell.exec(cmd + ' ' + args.join(' '), {silent: true});\n\n  if (result.code !== 0) {\n    throw new Error('[git-rev-sync] failed to execute command: ' + result.stdout);\n  }\n\n  return result.stdout.toString('utf8').replace(/^\\s+|\\s+$/g, '');\n}\n\nfunction _getGitDirectory(start) {\n  if (start === undefined || start === null) {\n    start = module.parent.filename;\n  }\n\n  if (typeof start === 'string') {\n    start = start.split(PATH_SEP);\n  }\n  var gitRepoPath = start.join(PATH_SEP);\n  var testPath = gitRepoPath;\n\n  if (!testPath.length) {\n    throw new Error('[git-rev-sync] no git repository found');\n  }\n\n  testPath = path.resolve(testPath, '.git');\n\n  if (fs.existsSync(testPath)) {\n    if (!fs.statSync(testPath).isDirectory()) {\n      var parentRepoPath = fs.readFileSync(testPath, 'utf8').trim().split(' ').pop();\n\n      if (!path.isAbsolute(parentRepoPath)) {\n        parentRepoPath = path.resolve(gitRepoPath, parentRepoPath);\n      }\n\n      if (fs.existsSync(parentRepoPath)) {\n        return path.resolve(parentRepoPath);\n      }\n\n      throw new Error('[git-rev-sync] could not find repository from path' + parentRepoPath);\n    }\n\n    return testPath;\n  }\n\n  start.pop();\n\n  return _getGitDirectory(start);\n}\n\nfunction branch(dir) {\n  var gitDir = _getGitDirectory(dir);\n\n  var head = fs.readFileSync(path.resolve(gitDir, 'HEAD'), 'utf8');\n  var b = head.match(RE_BRANCH);\n\n  if (b) {\n    return b[1];\n  }\n\n  return 'Detached: ' + head.trim();\n}\n\nfunction long(dir) {\n  var b = branch(dir);\n\n  if (/Detached: /.test(b)) {\n    return b.substr(10);\n  }\n\n  var gitDir = _getGitDirectory(dir);\n  var gitRootDir = gitDir.indexOf('.git/worktrees/') > 0 ?\n    gitDir.replace(/\\.git\\/worktrees\\/.+$/, '.git') :\n    gitDir;\n  var refsFilePath = path.resolve(gitRootDir, 'refs', 'heads', b);\n  var ref;\n\n  if (fs.existsSync(refsFilePath)) {\n    ref = fs.readFileSync(refsFilePath, 'utf8');\n  } else {\n    // If there isn't an entry in /refs/heads for this branch, it may be that\n    // the ref is stored in the packfile (.git/packed-refs). Fall back to\n    // looking up the hash here.\n    var refToFind = ['refs', 'heads', b].join('/');\n    var packfileContents = fs.readFileSync(path.resolve(gitDir, 'packed-refs'), 'utf8');\n    var packfileRegex = new RegExp('(.*) ' + escapeStringRegexp(refToFind));\n    ref = packfileRegex.exec(packfileContents)[1];\n  }\n\n  return ref.trim();\n}\n\nfunction short(dir, len) {\n  return long(dir).substr(0, len || 7);\n}\n\nfunction message() {\n  return _command('git', ['log', '-1', '--pretty=%B']);\n}\n\nfunction tag(markDirty) {\n  if (markDirty) {\n    return _command('git', ['describe', '--always', '--tag', '--dirty', '--abbrev=0']);\n  }\n\n  return _command('git', ['describe', '--always', '--tag', '--abbrev=0']);\n}\n\nfunction tagFirstParent(markDirty) {\n    if (markDirty) {\n        return _command('git', ['describe', '--always', '--tag', '--dirty', '--abbrev=0', '--first-parent']);\n    }\n\n    return _command('git', ['describe', '--always', '--tag', '--abbrev=0', '--first-parent']);\n}\n\nfunction hasUnstagedChanges() {\n  var writeTree = _command('git', ['write-tree']);\n  return _command('git', ['diff-index', writeTree, '--']).length > 0;\n}\n\nfunction isDirty() {\n  return _command('git', ['diff-index', 'HEAD', '--']).length > 0;\n}\n\nfunction isTagDirty() {\n  try {\n    _command('git', ['describe', '--exact-match', '--tags']);\n  } catch (e) {\n    if (e.message.indexOf('no tag exactly matches')) {\n      return true;\n    }\n\n    throw e;\n  }\n  return false;\n}\n\nfunction remoteUrl() {\n  return _command('git', ['ls-remote', '--get-url']);\n}\n\nfunction date() {\n  return new Date(_command('git', ['log', '--no-color', '-n', '1', '--pretty=format:\"%ad\"']));\n}\n\nfunction count() {\n  return parseInt(_command('git', ['rev-list', '--all', '--count']), 10);\n}\n\nfunction log() {\n  throw new Error('not implemented');\n}\n\nmodule.exports = {\n  branch : branch,\n  count: count,\n  date: date,\n  hasUnstagedChanges: hasUnstagedChanges,\n  isDirty: isDirty,\n  isTagDirty: isTagDirty,\n  log: log,\n  long: long,\n  message: message,\n  remoteUrl: remoteUrl,\n  short: short,\n  tag: tag,\n  tagFirstParent: tagFirstParent\n};\n"]},"metadata":{},"sourceType":"script"}