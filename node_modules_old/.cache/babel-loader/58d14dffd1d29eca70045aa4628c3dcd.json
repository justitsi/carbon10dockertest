{"ast":null,"code":"var fs = require('fs');\n\nvar path = require('path');\n\nvar common = require('./common');\n\nvar _ls = require('./ls');\n\ncommon.register('find', _find, {}); //@\n//@ ### find(path [, path ...])\n//@ ### find(path_array)\n//@ Examples:\n//@\n//@ ```javascript\n//@ find('src', 'lib');\n//@ find(['src', 'lib']); // same as above\n//@ find('.').filter(function(file) { return file.match(/\\.js$/); });\n//@ ```\n//@\n//@ Returns array of all files (however deep) in the given paths.\n//@\n//@ The main difference from `ls('-R', path)` is that the resulting file names\n//@ include the base directories, e.g. `lib/resources/file1` instead of just `file1`.\n\nfunction _find(options, paths) {\n  if (!paths) {\n    common.error('no path specified');\n  } else if (typeof paths === 'string') {\n    paths = [].slice.call(arguments, 1);\n  }\n\n  var list = [];\n\n  function pushFile(file) {\n    if (common.platform === 'win') {\n      file = file.replace(/\\\\/g, '/');\n    }\n\n    list.push(file);\n  } // why not simply do ls('-R', paths)? because the output wouldn't give the base dirs\n  // to get the base dir in the output, we need instead ls('-R', 'dir/*') for every directory\n\n\n  paths.forEach(function (file) {\n    var stat;\n\n    try {\n      stat = fs.statSync(file);\n    } catch (e) {\n      common.error('no such file or directory: ' + file);\n    }\n\n    pushFile(file);\n\n    if (stat.isDirectory()) {\n      _ls({\n        recursive: true,\n        all: true\n      }, file).forEach(function (subfile) {\n        pushFile(path.join(file, subfile));\n      });\n    }\n  });\n  return list;\n}\n\nmodule.exports = _find;","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/shelljs/src/find.js"],"names":["fs","require","path","common","_ls","register","_find","options","paths","error","slice","call","arguments","list","pushFile","file","platform","replace","push","forEach","stat","statSync","e","isDirectory","recursive","all","subfile","join","module","exports"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIG,GAAG,GAAGH,OAAO,CAAC,MAAD,CAAjB;;AAEAE,MAAM,CAACE,QAAP,CAAgB,MAAhB,EAAwBC,KAAxB,EAA+B,EAA/B,E,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,KAAT,CAAeC,OAAf,EAAwBC,KAAxB,EAA+B;AAC7B,MAAI,CAACA,KAAL,EAAY;AACVL,IAAAA,MAAM,CAACM,KAAP,CAAa,mBAAb;AACD,GAFD,MAEO,IAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AACpCA,IAAAA,KAAK,GAAG,GAAGE,KAAH,CAASC,IAAT,CAAcC,SAAd,EAAyB,CAAzB,CAAR;AACD;;AAED,MAAIC,IAAI,GAAG,EAAX;;AAEA,WAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,QAAIZ,MAAM,CAACa,QAAP,KAAoB,KAAxB,EAA+B;AAC7BD,MAAAA,IAAI,GAAGA,IAAI,CAACE,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAP;AACD;;AACDJ,IAAAA,IAAI,CAACK,IAAL,CAAUH,IAAV;AACD,GAd4B,CAgB7B;AACA;;;AAEAP,EAAAA,KAAK,CAACW,OAAN,CAAc,UAAUJ,IAAV,EAAgB;AAC5B,QAAIK,IAAJ;;AACA,QAAI;AACFA,MAAAA,IAAI,GAAGpB,EAAE,CAACqB,QAAH,CAAYN,IAAZ,CAAP;AACD,KAFD,CAEE,OAAOO,CAAP,EAAU;AACVnB,MAAAA,MAAM,CAACM,KAAP,CAAa,gCAAgCM,IAA7C;AACD;;AAEDD,IAAAA,QAAQ,CAACC,IAAD,CAAR;;AAEA,QAAIK,IAAI,CAACG,WAAL,EAAJ,EAAwB;AACtBnB,MAAAA,GAAG,CAAC;AAAEoB,QAAAA,SAAS,EAAE,IAAb;AAAmBC,QAAAA,GAAG,EAAE;AAAxB,OAAD,EAAiCV,IAAjC,CAAH,CAA0CI,OAA1C,CAAkD,UAAUO,OAAV,EAAmB;AACnEZ,QAAAA,QAAQ,CAACZ,IAAI,CAACyB,IAAL,CAAUZ,IAAV,EAAgBW,OAAhB,CAAD,CAAR;AACD,OAFD;AAGD;AACF,GAfD;AAiBA,SAAOb,IAAP;AACD;;AACDe,MAAM,CAACC,OAAP,GAAiBvB,KAAjB","sourcesContent":["var fs = require('fs');\nvar path = require('path');\nvar common = require('./common');\nvar _ls = require('./ls');\n\ncommon.register('find', _find, {});\n\n//@\n//@ ### find(path [, path ...])\n//@ ### find(path_array)\n//@ Examples:\n//@\n//@ ```javascript\n//@ find('src', 'lib');\n//@ find(['src', 'lib']); // same as above\n//@ find('.').filter(function(file) { return file.match(/\\.js$/); });\n//@ ```\n//@\n//@ Returns array of all files (however deep) in the given paths.\n//@\n//@ The main difference from `ls('-R', path)` is that the resulting file names\n//@ include the base directories, e.g. `lib/resources/file1` instead of just `file1`.\nfunction _find(options, paths) {\n  if (!paths) {\n    common.error('no path specified');\n  } else if (typeof paths === 'string') {\n    paths = [].slice.call(arguments, 1);\n  }\n\n  var list = [];\n\n  function pushFile(file) {\n    if (common.platform === 'win') {\n      file = file.replace(/\\\\/g, '/');\n    }\n    list.push(file);\n  }\n\n  // why not simply do ls('-R', paths)? because the output wouldn't give the base dirs\n  // to get the base dir in the output, we need instead ls('-R', 'dir/*') for every directory\n\n  paths.forEach(function (file) {\n    var stat;\n    try {\n      stat = fs.statSync(file);\n    } catch (e) {\n      common.error('no such file or directory: ' + file);\n    }\n\n    pushFile(file);\n\n    if (stat.isDirectory()) {\n      _ls({ recursive: true, all: true }, file).forEach(function (subfile) {\n        pushFile(path.join(file, subfile));\n      });\n    }\n  });\n\n  return list;\n}\nmodule.exports = _find;\n"]},"metadata":{},"sourceType":"script"}