{"ast":null,"code":"'use strict';\n\nconst renderers = {\n  silent: require('listr-silent-renderer'),\n  verbose: require('listr-verbose-renderer'),\n  default: require('listr-update-renderer')\n};\n\nconst isRendererSupported = renderer => process.stdout.isTTY === true || renderer.nonTTY === true;\n\nconst getRendererClass = renderer => {\n  if (typeof renderer === 'string') {\n    return renderers[renderer] || renderers.default;\n  }\n\n  return typeof renderer === 'function' ? renderer : renderers.default;\n};\n\nexports.getRenderer = (renderer, fallbackRenderer) => {\n  let ret = getRendererClass(renderer);\n\n  if (!isRendererSupported(ret)) {\n    ret = getRendererClass(fallbackRenderer);\n\n    if (!ret || !isRendererSupported(ret)) {\n      ret = renderers.verbose;\n    }\n  }\n\n  return ret;\n};","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/listr/lib/renderer.js"],"names":["renderers","silent","require","verbose","default","isRendererSupported","renderer","process","stdout","isTTY","nonTTY","getRendererClass","exports","getRenderer","fallbackRenderer","ret"],"mappings":"AAAA;;AACA,MAAMA,SAAS,GAAG;AACjBC,EAAAA,MAAM,EAAEC,OAAO,CAAC,uBAAD,CADE;AAEjBC,EAAAA,OAAO,EAAED,OAAO,CAAC,wBAAD,CAFC;AAGjBE,EAAAA,OAAO,EAAEF,OAAO,CAAC,uBAAD;AAHC,CAAlB;;AAMA,MAAMG,mBAAmB,GAAGC,QAAQ,IAAIC,OAAO,CAACC,MAAR,CAAeC,KAAf,KAAyB,IAAzB,IAAiCH,QAAQ,CAACI,MAAT,KAAoB,IAA7F;;AAEA,MAAMC,gBAAgB,GAAGL,QAAQ,IAAI;AACpC,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AACjC,WAAON,SAAS,CAACM,QAAD,CAAT,IAAuBN,SAAS,CAACI,OAAxC;AACA;;AAED,SAAO,OAAOE,QAAP,KAAoB,UAApB,GAAiCA,QAAjC,GAA4CN,SAAS,CAACI,OAA7D;AACA,CAND;;AAQAQ,OAAO,CAACC,WAAR,GAAsB,CAACP,QAAD,EAAWQ,gBAAX,KAAgC;AACrD,MAAIC,GAAG,GAAGJ,gBAAgB,CAACL,QAAD,CAA1B;;AAEA,MAAI,CAACD,mBAAmB,CAACU,GAAD,CAAxB,EAA+B;AAC9BA,IAAAA,GAAG,GAAGJ,gBAAgB,CAACG,gBAAD,CAAtB;;AAEA,QAAI,CAACC,GAAD,IAAQ,CAACV,mBAAmB,CAACU,GAAD,CAAhC,EAAuC;AACtCA,MAAAA,GAAG,GAAGf,SAAS,CAACG,OAAhB;AACA;AACD;;AAED,SAAOY,GAAP;AACA,CAZD","sourcesContent":["'use strict';\nconst renderers = {\n\tsilent: require('listr-silent-renderer'),\n\tverbose: require('listr-verbose-renderer'),\n\tdefault: require('listr-update-renderer')\n};\n\nconst isRendererSupported = renderer => process.stdout.isTTY === true || renderer.nonTTY === true;\n\nconst getRendererClass = renderer => {\n\tif (typeof renderer === 'string') {\n\t\treturn renderers[renderer] || renderers.default;\n\t}\n\n\treturn typeof renderer === 'function' ? renderer : renderers.default;\n};\n\nexports.getRenderer = (renderer, fallbackRenderer) => {\n\tlet ret = getRendererClass(renderer);\n\n\tif (!isRendererSupported(ret)) {\n\t\tret = getRendererClass(fallbackRenderer);\n\n\t\tif (!ret || !isRendererSupported(ret)) {\n\t\t\tret = renderers.verbose;\n\t\t}\n\t}\n\n\treturn ret;\n};\n"]},"metadata":{},"sourceType":"script"}