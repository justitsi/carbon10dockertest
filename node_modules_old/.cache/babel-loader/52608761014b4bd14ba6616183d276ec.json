{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeIncludesDirective = exports.gatherDirectives = exports.federationDirectives = exports.ProvidesDirective = exports.RequiresDirective = exports.ExternalDirective = exports.ExtendsDirective = exports.KeyDirective = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nexports.KeyDirective = new graphql_1.GraphQLDirective({\n  name: 'key',\n  locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE],\n  args: {\n    fields: {\n      type: graphql_1.GraphQLNonNull(graphql_1.GraphQLString)\n    }\n  }\n});\nexports.ExtendsDirective = new graphql_1.GraphQLDirective({\n  name: 'extends',\n  locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE]\n});\nexports.ExternalDirective = new graphql_1.GraphQLDirective({\n  name: 'external',\n  locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.FIELD_DEFINITION]\n});\nexports.RequiresDirective = new graphql_1.GraphQLDirective({\n  name: 'requires',\n  locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION],\n  args: {\n    fields: {\n      type: graphql_1.GraphQLNonNull(graphql_1.GraphQLString)\n    }\n  }\n});\nexports.ProvidesDirective = new graphql_1.GraphQLDirective({\n  name: 'provides',\n  locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION],\n  args: {\n    fields: {\n      type: graphql_1.GraphQLNonNull(graphql_1.GraphQLString)\n    }\n  }\n});\nexports.federationDirectives = [exports.KeyDirective, exports.ExtendsDirective, exports.ExternalDirective, exports.RequiresDirective, exports.ProvidesDirective];\nexports.default = exports.federationDirectives;\n\nfunction hasDirectives(node) {\n  return Boolean('directives' in node && node.directives);\n}\n\nfunction gatherDirectives(type) {\n  let directives = [];\n\n  if ('extensionASTNodes' in type && type.extensionASTNodes) {\n    for (const node of type.extensionASTNodes) {\n      if (hasDirectives(node)) {\n        directives = directives.concat(node.directives);\n      }\n    }\n  }\n\n  if (type.astNode && hasDirectives(type.astNode)) directives = directives.concat(type.astNode.directives);\n  return directives;\n}\n\nexports.gatherDirectives = gatherDirectives;\n\nfunction typeIncludesDirective(type, directiveName) {\n  if (graphql_1.isInputObjectType(type)) return false;\n  const directives = gatherDirectives(type);\n  return directives.some(directive => directive.name.value === directiveName);\n}\n\nexports.typeIncludesDirective = typeIncludesDirective;","map":{"version":3,"sources":["../src/directives.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.typeIncludesDirective = exports.gatherDirectives = exports.federationDirectives = exports.ProvidesDirective = exports.RequiresDirective = exports.ExternalDirective = exports.ExtendsDirective = exports.KeyDirective = void 0;\nconst graphql_1 = require(\"graphql\");\nexports.KeyDirective = new graphql_1.GraphQLDirective({\n    name: 'key',\n    locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE],\n    args: {\n        fields: {\n            type: graphql_1.GraphQLNonNull(graphql_1.GraphQLString),\n        },\n    },\n});\nexports.ExtendsDirective = new graphql_1.GraphQLDirective({\n    name: 'extends',\n    locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE],\n});\nexports.ExternalDirective = new graphql_1.GraphQLDirective({\n    name: 'external',\n    locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.FIELD_DEFINITION],\n});\nexports.RequiresDirective = new graphql_1.GraphQLDirective({\n    name: 'requires',\n    locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION],\n    args: {\n        fields: {\n            type: graphql_1.GraphQLNonNull(graphql_1.GraphQLString),\n        },\n    },\n});\nexports.ProvidesDirective = new graphql_1.GraphQLDirective({\n    name: 'provides',\n    locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION],\n    args: {\n        fields: {\n            type: graphql_1.GraphQLNonNull(graphql_1.GraphQLString),\n        },\n    },\n});\nexports.federationDirectives = [\n    exports.KeyDirective,\n    exports.ExtendsDirective,\n    exports.ExternalDirective,\n    exports.RequiresDirective,\n    exports.ProvidesDirective,\n];\nexports.default = exports.federationDirectives;\nfunction hasDirectives(node) {\n    return Boolean('directives' in node && node.directives);\n}\nfunction gatherDirectives(type) {\n    let directives = [];\n    if ('extensionASTNodes' in type && type.extensionASTNodes) {\n        for (const node of type.extensionASTNodes) {\n            if (hasDirectives(node)) {\n                directives = directives.concat(node.directives);\n            }\n        }\n    }\n    if (type.astNode && hasDirectives(type.astNode))\n        directives = directives.concat(type.astNode.directives);\n    return directives;\n}\nexports.gatherDirectives = gatherDirectives;\nfunction typeIncludesDirective(type, directiveName) {\n    if (graphql_1.isInputObjectType(type))\n        return false;\n    const directives = gatherDirectives(type);\n    return directives.some(directive => directive.name.value === directiveName);\n}\nexports.typeIncludesDirective = typeIncludesDirective;\n//# sourceMappingURL=directives.js.map"]},"metadata":{},"sourceType":"script"}