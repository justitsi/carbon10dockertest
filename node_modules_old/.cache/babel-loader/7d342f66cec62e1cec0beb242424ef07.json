{"ast":null,"code":"var fs = require('fs');\n\nvar polyfills = require('./polyfills.js');\n\nvar legacy = require('./legacy-streams.js');\n\nvar clone = require('./clone.js');\n\nvar queue = [];\n\nvar util = require('util');\n\nfunction noop() {}\n\nvar debug = noop;\nif (util.debuglog) debug = util.debuglog('gfs4');else if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || '')) debug = function () {\n  var m = util.format.apply(util, arguments);\n  m = 'GFS4: ' + m.split(/\\n/).join('\\nGFS4: ');\n  console.error(m);\n};\n\nif (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || '')) {\n  process.on('exit', function () {\n    debug(queue);\n\n    require('assert').equal(queue.length, 0);\n  });\n}\n\nmodule.exports = patch(clone(fs));\n\nif (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {\n  module.exports = patch(fs);\n  fs.__patched = true;\n} // Always patch fs.close/closeSync, because we want to\n// retry() whenever a close happens *anywhere* in the program.\n// This is essential when multiple graceful-fs instances are\n// in play at the same time.\n\n\nmodule.exports.close = function (fs$close) {\n  return function (fd, cb) {\n    return fs$close.call(fs, fd, function (err) {\n      if (!err) retry();\n      if (typeof cb === 'function') cb.apply(this, arguments);\n    });\n  };\n}(fs.close);\n\nmodule.exports.closeSync = function (fs$closeSync) {\n  return function (fd) {\n    // Note that graceful-fs also retries when fs.closeSync() fails.\n    // Looks like a bug to me, although it's probably a harmless one.\n    var rval = fs$closeSync.apply(fs, arguments);\n    retry();\n    return rval;\n  };\n}(fs.closeSync); // Only patch fs once, otherwise we'll run into a memory leak if\n// graceful-fs is loaded multiple times, such as in test environments that\n// reset the loaded modules between tests.\n// We look for the string `graceful-fs` from the comment above. This\n// way we are not adding any extra properties and it will detect if older\n// versions of graceful-fs are installed.\n\n\nif (!/\\bgraceful-fs\\b/.test(fs.closeSync.toString())) {\n  fs.closeSync = module.exports.closeSync;\n  fs.close = module.exports.close;\n}\n\nfunction patch(fs) {\n  // Everything that references the open() function needs to be in here\n  polyfills(fs);\n  fs.gracefulify = patch;\n  fs.FileReadStream = ReadStream; // Legacy name.\n\n  fs.FileWriteStream = WriteStream; // Legacy name.\n\n  fs.createReadStream = createReadStream;\n  fs.createWriteStream = createWriteStream;\n  var fs$readFile = fs.readFile;\n  fs.readFile = readFile;\n\n  function readFile(path, options, cb) {\n    if (typeof options === 'function') cb = options, options = null;\n    return go$readFile(path, options, cb);\n\n    function go$readFile(path, options, cb) {\n      return fs$readFile(path, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$readFile, [path, options, cb]]);else {\n          if (typeof cb === 'function') cb.apply(this, arguments);\n          retry();\n        }\n      });\n    }\n  }\n\n  var fs$writeFile = fs.writeFile;\n  fs.writeFile = writeFile;\n\n  function writeFile(path, data, options, cb) {\n    if (typeof options === 'function') cb = options, options = null;\n    return go$writeFile(path, data, options, cb);\n\n    function go$writeFile(path, data, options, cb) {\n      return fs$writeFile(path, data, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$writeFile, [path, data, options, cb]]);else {\n          if (typeof cb === 'function') cb.apply(this, arguments);\n          retry();\n        }\n      });\n    }\n  }\n\n  var fs$appendFile = fs.appendFile;\n  if (fs$appendFile) fs.appendFile = appendFile;\n\n  function appendFile(path, data, options, cb) {\n    if (typeof options === 'function') cb = options, options = null;\n    return go$appendFile(path, data, options, cb);\n\n    function go$appendFile(path, data, options, cb) {\n      return fs$appendFile(path, data, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$appendFile, [path, data, options, cb]]);else {\n          if (typeof cb === 'function') cb.apply(this, arguments);\n          retry();\n        }\n      });\n    }\n  }\n\n  var fs$readdir = fs.readdir;\n  fs.readdir = readdir;\n\n  function readdir(path, options, cb) {\n    var args = [path];\n\n    if (typeof options !== 'function') {\n      args.push(options);\n    } else {\n      cb = options;\n    }\n\n    args.push(go$readdir$cb);\n    return go$readdir(args);\n\n    function go$readdir$cb(err, files) {\n      if (files && files.sort) files.sort();\n      if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$readdir, [args]]);else {\n        if (typeof cb === 'function') cb.apply(this, arguments);\n        retry();\n      }\n    }\n  }\n\n  function go$readdir(args) {\n    return fs$readdir.apply(fs, args);\n  }\n\n  if (process.version.substr(0, 4) === 'v0.8') {\n    var legStreams = legacy(fs);\n    ReadStream = legStreams.ReadStream;\n    WriteStream = legStreams.WriteStream;\n  }\n\n  var fs$ReadStream = fs.ReadStream;\n\n  if (fs$ReadStream) {\n    ReadStream.prototype = Object.create(fs$ReadStream.prototype);\n    ReadStream.prototype.open = ReadStream$open;\n  }\n\n  var fs$WriteStream = fs.WriteStream;\n\n  if (fs$WriteStream) {\n    WriteStream.prototype = Object.create(fs$WriteStream.prototype);\n    WriteStream.prototype.open = WriteStream$open;\n  }\n\n  fs.ReadStream = ReadStream;\n  fs.WriteStream = WriteStream;\n\n  function ReadStream(path, options) {\n    if (this instanceof ReadStream) return fs$ReadStream.apply(this, arguments), this;else return ReadStream.apply(Object.create(ReadStream.prototype), arguments);\n  }\n\n  function ReadStream$open() {\n    var that = this;\n    open(that.path, that.flags, that.mode, function (err, fd) {\n      if (err) {\n        if (that.autoClose) that.destroy();\n        that.emit('error', err);\n      } else {\n        that.fd = fd;\n        that.emit('open', fd);\n        that.read();\n      }\n    });\n  }\n\n  function WriteStream(path, options) {\n    if (this instanceof WriteStream) return fs$WriteStream.apply(this, arguments), this;else return WriteStream.apply(Object.create(WriteStream.prototype), arguments);\n  }\n\n  function WriteStream$open() {\n    var that = this;\n    open(that.path, that.flags, that.mode, function (err, fd) {\n      if (err) {\n        that.destroy();\n        that.emit('error', err);\n      } else {\n        that.fd = fd;\n        that.emit('open', fd);\n      }\n    });\n  }\n\n  function createReadStream(path, options) {\n    return new ReadStream(path, options);\n  }\n\n  function createWriteStream(path, options) {\n    return new WriteStream(path, options);\n  }\n\n  var fs$open = fs.open;\n  fs.open = open;\n\n  function open(path, flags, mode, cb) {\n    if (typeof mode === 'function') cb = mode, mode = null;\n    return go$open(path, flags, mode, cb);\n\n    function go$open(path, flags, mode, cb) {\n      return fs$open(path, flags, mode, function (err, fd) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$open, [path, flags, mode, cb]]);else {\n          if (typeof cb === 'function') cb.apply(this, arguments);\n          retry();\n        }\n      });\n    }\n  }\n\n  return fs;\n}\n\nfunction enqueue(elem) {\n  debug('ENQUEUE', elem[0].name, elem[1]);\n  queue.push(elem);\n}\n\nfunction retry() {\n  var elem = queue.shift();\n\n  if (elem) {\n    debug('RETRY', elem[0].name, elem[1]);\n    elem[0].apply(null, elem[1]);\n  }\n}","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/git-rev-sync/node_modules/graceful-fs/graceful-fs.js"],"names":["fs","require","polyfills","legacy","clone","queue","util","noop","debug","debuglog","test","process","env","NODE_DEBUG","m","format","apply","arguments","split","join","console","error","on","equal","length","module","exports","patch","TEST_GRACEFUL_FS_GLOBAL_PATCH","__patched","close","fs$close","fd","cb","call","err","retry","closeSync","fs$closeSync","rval","toString","gracefulify","FileReadStream","ReadStream","FileWriteStream","WriteStream","createReadStream","createWriteStream","fs$readFile","readFile","path","options","go$readFile","code","enqueue","fs$writeFile","writeFile","data","go$writeFile","fs$appendFile","appendFile","go$appendFile","fs$readdir","readdir","args","push","go$readdir$cb","go$readdir","files","sort","version","substr","legStreams","fs$ReadStream","prototype","Object","create","open","ReadStream$open","fs$WriteStream","WriteStream$open","that","flags","mode","autoClose","destroy","emit","read","fs$open","go$open","elem","name","shift"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,gBAAD,CAAvB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,qBAAD,CAApB;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,YAAD,CAAnB;;AAEA,IAAII,KAAK,GAAG,EAAZ;;AAEA,IAAIC,IAAI,GAAGL,OAAO,CAAC,MAAD,CAAlB;;AAEA,SAASM,IAAT,GAAiB,CAAE;;AAEnB,IAAIC,KAAK,GAAGD,IAAZ;AACA,IAAID,IAAI,CAACG,QAAT,EACED,KAAK,GAAGF,IAAI,CAACG,QAAL,CAAc,MAAd,CAAR,CADF,KAEK,IAAI,YAAYC,IAAZ,CAAiBC,OAAO,CAACC,GAAR,CAAYC,UAAZ,IAA0B,EAA3C,CAAJ,EACHL,KAAK,GAAG,YAAW;AACjB,MAAIM,CAAC,GAAGR,IAAI,CAACS,MAAL,CAAYC,KAAZ,CAAkBV,IAAlB,EAAwBW,SAAxB,CAAR;AACAH,EAAAA,CAAC,GAAG,WAAWA,CAAC,CAACI,KAAF,CAAQ,IAAR,EAAcC,IAAd,CAAmB,UAAnB,CAAf;AACAC,EAAAA,OAAO,CAACC,KAAR,CAAcP,CAAd;AACD,CAJD;;AAMF,IAAI,YAAYJ,IAAZ,CAAiBC,OAAO,CAACC,GAAR,CAAYC,UAAZ,IAA0B,EAA3C,CAAJ,EAAoD;AAClDF,EAAAA,OAAO,CAACW,EAAR,CAAW,MAAX,EAAmB,YAAW;AAC5Bd,IAAAA,KAAK,CAACH,KAAD,CAAL;;AACAJ,IAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBsB,KAAlB,CAAwBlB,KAAK,CAACmB,MAA9B,EAAsC,CAAtC;AACD,GAHD;AAID;;AAEDC,MAAM,CAACC,OAAP,GAAiBC,KAAK,CAACvB,KAAK,CAACJ,EAAD,CAAN,CAAtB;;AACA,IAAIW,OAAO,CAACC,GAAR,CAAYgB,6BAAZ,IAA6C,CAAC5B,EAAE,CAAC6B,SAArD,EAAgE;AAC5DJ,EAAAA,MAAM,CAACC,OAAP,GAAiBC,KAAK,CAAC3B,EAAD,CAAtB;AACAA,EAAAA,EAAE,CAAC6B,SAAH,GAAe,IAAf;AACH,C,CAED;AACA;AACA;AACA;;;AACAJ,MAAM,CAACC,OAAP,CAAeI,KAAf,GAAwB,UAAUC,QAAV,EAAoB;AAAE,SAAO,UAAUC,EAAV,EAAcC,EAAd,EAAkB;AACrE,WAAOF,QAAQ,CAACG,IAAT,CAAclC,EAAd,EAAkBgC,EAAlB,EAAsB,UAAUG,GAAV,EAAe;AAC1C,UAAI,CAACA,GAAL,EACEC,KAAK;AAEP,UAAI,OAAOH,EAAP,KAAc,UAAlB,EACEA,EAAE,CAACjB,KAAH,CAAS,IAAT,EAAeC,SAAf;AACH,KANM,CAAP;AAOD,GAR6C;AAQ5C,CARqB,CAQnBjB,EAAE,CAAC8B,KARgB,CAAvB;;AAUAL,MAAM,CAACC,OAAP,CAAeW,SAAf,GAA4B,UAAUC,YAAV,EAAwB;AAAE,SAAO,UAAUN,EAAV,EAAc;AACzE;AACA;AACA,QAAIO,IAAI,GAAGD,YAAY,CAACtB,KAAb,CAAmBhB,EAAnB,EAAuBiB,SAAvB,CAAX;AACAmB,IAAAA,KAAK;AACL,WAAOG,IAAP;AACD,GANqD;AAMpD,CANyB,CAMvBvC,EAAE,CAACqC,SANoB,CAA3B,C,CAQA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAI,CAAC,kBAAkB3B,IAAlB,CAAuBV,EAAE,CAACqC,SAAH,CAAaG,QAAb,EAAvB,CAAL,EAAsD;AACpDxC,EAAAA,EAAE,CAACqC,SAAH,GAAeZ,MAAM,CAACC,OAAP,CAAeW,SAA9B;AACArC,EAAAA,EAAE,CAAC8B,KAAH,GAAWL,MAAM,CAACC,OAAP,CAAeI,KAA1B;AACD;;AAED,SAASH,KAAT,CAAgB3B,EAAhB,EAAoB;AAClB;AACAE,EAAAA,SAAS,CAACF,EAAD,CAAT;AACAA,EAAAA,EAAE,CAACyC,WAAH,GAAiBd,KAAjB;AACA3B,EAAAA,EAAE,CAAC0C,cAAH,GAAoBC,UAApB,CAJkB,CAIe;;AACjC3C,EAAAA,EAAE,CAAC4C,eAAH,GAAqBC,WAArB,CALkB,CAKiB;;AACnC7C,EAAAA,EAAE,CAAC8C,gBAAH,GAAsBA,gBAAtB;AACA9C,EAAAA,EAAE,CAAC+C,iBAAH,GAAuBA,iBAAvB;AACA,MAAIC,WAAW,GAAGhD,EAAE,CAACiD,QAArB;AACAjD,EAAAA,EAAE,CAACiD,QAAH,GAAcA,QAAd;;AACA,WAASA,QAAT,CAAmBC,IAAnB,EAAyBC,OAAzB,EAAkClB,EAAlC,EAAsC;AACpC,QAAI,OAAOkB,OAAP,KAAmB,UAAvB,EACElB,EAAE,GAAGkB,OAAL,EAAcA,OAAO,GAAG,IAAxB;AAEF,WAAOC,WAAW,CAACF,IAAD,EAAOC,OAAP,EAAgBlB,EAAhB,CAAlB;;AAEA,aAASmB,WAAT,CAAsBF,IAAtB,EAA4BC,OAA5B,EAAqClB,EAArC,EAAyC;AACvC,aAAOe,WAAW,CAACE,IAAD,EAAOC,OAAP,EAAgB,UAAUhB,GAAV,EAAe;AAC/C,YAAIA,GAAG,KAAKA,GAAG,CAACkB,IAAJ,KAAa,QAAb,IAAyBlB,GAAG,CAACkB,IAAJ,KAAa,QAA3C,CAAP,EACEC,OAAO,CAAC,CAACF,WAAD,EAAc,CAACF,IAAD,EAAOC,OAAP,EAAgBlB,EAAhB,CAAd,CAAD,CAAP,CADF,KAEK;AACH,cAAI,OAAOA,EAAP,KAAc,UAAlB,EACEA,EAAE,CAACjB,KAAH,CAAS,IAAT,EAAeC,SAAf;AACFmB,UAAAA,KAAK;AACN;AACF,OARiB,CAAlB;AASD;AACF;;AAED,MAAImB,YAAY,GAAGvD,EAAE,CAACwD,SAAtB;AACAxD,EAAAA,EAAE,CAACwD,SAAH,GAAeA,SAAf;;AACA,WAASA,SAAT,CAAoBN,IAApB,EAA0BO,IAA1B,EAAgCN,OAAhC,EAAyClB,EAAzC,EAA6C;AAC3C,QAAI,OAAOkB,OAAP,KAAmB,UAAvB,EACElB,EAAE,GAAGkB,OAAL,EAAcA,OAAO,GAAG,IAAxB;AAEF,WAAOO,YAAY,CAACR,IAAD,EAAOO,IAAP,EAAaN,OAAb,EAAsBlB,EAAtB,CAAnB;;AAEA,aAASyB,YAAT,CAAuBR,IAAvB,EAA6BO,IAA7B,EAAmCN,OAAnC,EAA4ClB,EAA5C,EAAgD;AAC9C,aAAOsB,YAAY,CAACL,IAAD,EAAOO,IAAP,EAAaN,OAAb,EAAsB,UAAUhB,GAAV,EAAe;AACtD,YAAIA,GAAG,KAAKA,GAAG,CAACkB,IAAJ,KAAa,QAAb,IAAyBlB,GAAG,CAACkB,IAAJ,KAAa,QAA3C,CAAP,EACEC,OAAO,CAAC,CAACI,YAAD,EAAe,CAACR,IAAD,EAAOO,IAAP,EAAaN,OAAb,EAAsBlB,EAAtB,CAAf,CAAD,CAAP,CADF,KAEK;AACH,cAAI,OAAOA,EAAP,KAAc,UAAlB,EACEA,EAAE,CAACjB,KAAH,CAAS,IAAT,EAAeC,SAAf;AACFmB,UAAAA,KAAK;AACN;AACF,OARkB,CAAnB;AASD;AACF;;AAED,MAAIuB,aAAa,GAAG3D,EAAE,CAAC4D,UAAvB;AACA,MAAID,aAAJ,EACE3D,EAAE,CAAC4D,UAAH,GAAgBA,UAAhB;;AACF,WAASA,UAAT,CAAqBV,IAArB,EAA2BO,IAA3B,EAAiCN,OAAjC,EAA0ClB,EAA1C,EAA8C;AAC5C,QAAI,OAAOkB,OAAP,KAAmB,UAAvB,EACElB,EAAE,GAAGkB,OAAL,EAAcA,OAAO,GAAG,IAAxB;AAEF,WAAOU,aAAa,CAACX,IAAD,EAAOO,IAAP,EAAaN,OAAb,EAAsBlB,EAAtB,CAApB;;AAEA,aAAS4B,aAAT,CAAwBX,IAAxB,EAA8BO,IAA9B,EAAoCN,OAApC,EAA6ClB,EAA7C,EAAiD;AAC/C,aAAO0B,aAAa,CAACT,IAAD,EAAOO,IAAP,EAAaN,OAAb,EAAsB,UAAUhB,GAAV,EAAe;AACvD,YAAIA,GAAG,KAAKA,GAAG,CAACkB,IAAJ,KAAa,QAAb,IAAyBlB,GAAG,CAACkB,IAAJ,KAAa,QAA3C,CAAP,EACEC,OAAO,CAAC,CAACO,aAAD,EAAgB,CAACX,IAAD,EAAOO,IAAP,EAAaN,OAAb,EAAsBlB,EAAtB,CAAhB,CAAD,CAAP,CADF,KAEK;AACH,cAAI,OAAOA,EAAP,KAAc,UAAlB,EACEA,EAAE,CAACjB,KAAH,CAAS,IAAT,EAAeC,SAAf;AACFmB,UAAAA,KAAK;AACN;AACF,OARmB,CAApB;AASD;AACF;;AAED,MAAI0B,UAAU,GAAG9D,EAAE,CAAC+D,OAApB;AACA/D,EAAAA,EAAE,CAAC+D,OAAH,GAAaA,OAAb;;AACA,WAASA,OAAT,CAAkBb,IAAlB,EAAwBC,OAAxB,EAAiClB,EAAjC,EAAqC;AACnC,QAAI+B,IAAI,GAAG,CAACd,IAAD,CAAX;;AACA,QAAI,OAAOC,OAAP,KAAmB,UAAvB,EAAmC;AACjCa,MAAAA,IAAI,CAACC,IAAL,CAAUd,OAAV;AACD,KAFD,MAEO;AACLlB,MAAAA,EAAE,GAAGkB,OAAL;AACD;;AACDa,IAAAA,IAAI,CAACC,IAAL,CAAUC,aAAV;AAEA,WAAOC,UAAU,CAACH,IAAD,CAAjB;;AAEA,aAASE,aAAT,CAAwB/B,GAAxB,EAA6BiC,KAA7B,EAAoC;AAClC,UAAIA,KAAK,IAAIA,KAAK,CAACC,IAAnB,EACED,KAAK,CAACC,IAAN;AAEF,UAAIlC,GAAG,KAAKA,GAAG,CAACkB,IAAJ,KAAa,QAAb,IAAyBlB,GAAG,CAACkB,IAAJ,KAAa,QAA3C,CAAP,EACEC,OAAO,CAAC,CAACa,UAAD,EAAa,CAACH,IAAD,CAAb,CAAD,CAAP,CADF,KAGK;AACH,YAAI,OAAO/B,EAAP,KAAc,UAAlB,EACEA,EAAE,CAACjB,KAAH,CAAS,IAAT,EAAeC,SAAf;AACFmB,QAAAA,KAAK;AACN;AACF;AACF;;AAED,WAAS+B,UAAT,CAAqBH,IAArB,EAA2B;AACzB,WAAOF,UAAU,CAAC9C,KAAX,CAAiBhB,EAAjB,EAAqBgE,IAArB,CAAP;AACD;;AAED,MAAIrD,OAAO,CAAC2D,OAAR,CAAgBC,MAAhB,CAAuB,CAAvB,EAA0B,CAA1B,MAAiC,MAArC,EAA6C;AAC3C,QAAIC,UAAU,GAAGrE,MAAM,CAACH,EAAD,CAAvB;AACA2C,IAAAA,UAAU,GAAG6B,UAAU,CAAC7B,UAAxB;AACAE,IAAAA,WAAW,GAAG2B,UAAU,CAAC3B,WAAzB;AACD;;AAED,MAAI4B,aAAa,GAAGzE,EAAE,CAAC2C,UAAvB;;AACA,MAAI8B,aAAJ,EAAmB;AACjB9B,IAAAA,UAAU,CAAC+B,SAAX,GAAuBC,MAAM,CAACC,MAAP,CAAcH,aAAa,CAACC,SAA5B,CAAvB;AACA/B,IAAAA,UAAU,CAAC+B,SAAX,CAAqBG,IAArB,GAA4BC,eAA5B;AACD;;AAED,MAAIC,cAAc,GAAG/E,EAAE,CAAC6C,WAAxB;;AACA,MAAIkC,cAAJ,EAAoB;AAClBlC,IAAAA,WAAW,CAAC6B,SAAZ,GAAwBC,MAAM,CAACC,MAAP,CAAcG,cAAc,CAACL,SAA7B,CAAxB;AACA7B,IAAAA,WAAW,CAAC6B,SAAZ,CAAsBG,IAAtB,GAA6BG,gBAA7B;AACD;;AAEDhF,EAAAA,EAAE,CAAC2C,UAAH,GAAgBA,UAAhB;AACA3C,EAAAA,EAAE,CAAC6C,WAAH,GAAiBA,WAAjB;;AAEA,WAASF,UAAT,CAAqBO,IAArB,EAA2BC,OAA3B,EAAoC;AAClC,QAAI,gBAAgBR,UAApB,EACE,OAAO8B,aAAa,CAACzD,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,GAAsC,IAA7C,CADF,KAGE,OAAO0B,UAAU,CAAC3B,KAAX,CAAiB2D,MAAM,CAACC,MAAP,CAAcjC,UAAU,CAAC+B,SAAzB,CAAjB,EAAsDzD,SAAtD,CAAP;AACH;;AAED,WAAS6D,eAAT,GAA4B;AAC1B,QAAIG,IAAI,GAAG,IAAX;AACAJ,IAAAA,IAAI,CAACI,IAAI,CAAC/B,IAAN,EAAY+B,IAAI,CAACC,KAAjB,EAAwBD,IAAI,CAACE,IAA7B,EAAmC,UAAUhD,GAAV,EAAeH,EAAf,EAAmB;AACxD,UAAIG,GAAJ,EAAS;AACP,YAAI8C,IAAI,CAACG,SAAT,EACEH,IAAI,CAACI,OAAL;AAEFJ,QAAAA,IAAI,CAACK,IAAL,CAAU,OAAV,EAAmBnD,GAAnB;AACD,OALD,MAKO;AACL8C,QAAAA,IAAI,CAACjD,EAAL,GAAUA,EAAV;AACAiD,QAAAA,IAAI,CAACK,IAAL,CAAU,MAAV,EAAkBtD,EAAlB;AACAiD,QAAAA,IAAI,CAACM,IAAL;AACD;AACF,KAXG,CAAJ;AAYD;;AAED,WAAS1C,WAAT,CAAsBK,IAAtB,EAA4BC,OAA5B,EAAqC;AACnC,QAAI,gBAAgBN,WAApB,EACE,OAAOkC,cAAc,CAAC/D,KAAf,CAAqB,IAArB,EAA2BC,SAA3B,GAAuC,IAA9C,CADF,KAGE,OAAO4B,WAAW,CAAC7B,KAAZ,CAAkB2D,MAAM,CAACC,MAAP,CAAc/B,WAAW,CAAC6B,SAA1B,CAAlB,EAAwDzD,SAAxD,CAAP;AACH;;AAED,WAAS+D,gBAAT,GAA6B;AAC3B,QAAIC,IAAI,GAAG,IAAX;AACAJ,IAAAA,IAAI,CAACI,IAAI,CAAC/B,IAAN,EAAY+B,IAAI,CAACC,KAAjB,EAAwBD,IAAI,CAACE,IAA7B,EAAmC,UAAUhD,GAAV,EAAeH,EAAf,EAAmB;AACxD,UAAIG,GAAJ,EAAS;AACP8C,QAAAA,IAAI,CAACI,OAAL;AACAJ,QAAAA,IAAI,CAACK,IAAL,CAAU,OAAV,EAAmBnD,GAAnB;AACD,OAHD,MAGO;AACL8C,QAAAA,IAAI,CAACjD,EAAL,GAAUA,EAAV;AACAiD,QAAAA,IAAI,CAACK,IAAL,CAAU,MAAV,EAAkBtD,EAAlB;AACD;AACF,KARG,CAAJ;AASD;;AAED,WAASc,gBAAT,CAA2BI,IAA3B,EAAiCC,OAAjC,EAA0C;AACxC,WAAO,IAAIR,UAAJ,CAAeO,IAAf,EAAqBC,OAArB,CAAP;AACD;;AAED,WAASJ,iBAAT,CAA4BG,IAA5B,EAAkCC,OAAlC,EAA2C;AACzC,WAAO,IAAIN,WAAJ,CAAgBK,IAAhB,EAAsBC,OAAtB,CAAP;AACD;;AAED,MAAIqC,OAAO,GAAGxF,EAAE,CAAC6E,IAAjB;AACA7E,EAAAA,EAAE,CAAC6E,IAAH,GAAUA,IAAV;;AACA,WAASA,IAAT,CAAe3B,IAAf,EAAqBgC,KAArB,EAA4BC,IAA5B,EAAkClD,EAAlC,EAAsC;AACpC,QAAI,OAAOkD,IAAP,KAAgB,UAApB,EACElD,EAAE,GAAGkD,IAAL,EAAWA,IAAI,GAAG,IAAlB;AAEF,WAAOM,OAAO,CAACvC,IAAD,EAAOgC,KAAP,EAAcC,IAAd,EAAoBlD,EAApB,CAAd;;AAEA,aAASwD,OAAT,CAAkBvC,IAAlB,EAAwBgC,KAAxB,EAA+BC,IAA/B,EAAqClD,EAArC,EAAyC;AACvC,aAAOuD,OAAO,CAACtC,IAAD,EAAOgC,KAAP,EAAcC,IAAd,EAAoB,UAAUhD,GAAV,EAAeH,EAAf,EAAmB;AACnD,YAAIG,GAAG,KAAKA,GAAG,CAACkB,IAAJ,KAAa,QAAb,IAAyBlB,GAAG,CAACkB,IAAJ,KAAa,QAA3C,CAAP,EACEC,OAAO,CAAC,CAACmC,OAAD,EAAU,CAACvC,IAAD,EAAOgC,KAAP,EAAcC,IAAd,EAAoBlD,EAApB,CAAV,CAAD,CAAP,CADF,KAEK;AACH,cAAI,OAAOA,EAAP,KAAc,UAAlB,EACEA,EAAE,CAACjB,KAAH,CAAS,IAAT,EAAeC,SAAf;AACFmB,UAAAA,KAAK;AACN;AACF,OARa,CAAd;AASD;AACF;;AAED,SAAOpC,EAAP;AACD;;AAED,SAASsD,OAAT,CAAkBoC,IAAlB,EAAwB;AACtBlF,EAAAA,KAAK,CAAC,SAAD,EAAYkF,IAAI,CAAC,CAAD,CAAJ,CAAQC,IAApB,EAA0BD,IAAI,CAAC,CAAD,CAA9B,CAAL;AACArF,EAAAA,KAAK,CAAC4D,IAAN,CAAWyB,IAAX;AACD;;AAED,SAAStD,KAAT,GAAkB;AAChB,MAAIsD,IAAI,GAAGrF,KAAK,CAACuF,KAAN,EAAX;;AACA,MAAIF,IAAJ,EAAU;AACRlF,IAAAA,KAAK,CAAC,OAAD,EAAUkF,IAAI,CAAC,CAAD,CAAJ,CAAQC,IAAlB,EAAwBD,IAAI,CAAC,CAAD,CAA5B,CAAL;AACAA,IAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQ1E,KAAR,CAAc,IAAd,EAAoB0E,IAAI,CAAC,CAAD,CAAxB;AACD;AACF","sourcesContent":["var fs = require('fs')\nvar polyfills = require('./polyfills.js')\nvar legacy = require('./legacy-streams.js')\nvar clone = require('./clone.js')\n\nvar queue = []\n\nvar util = require('util')\n\nfunction noop () {}\n\nvar debug = noop\nif (util.debuglog)\n  debug = util.debuglog('gfs4')\nelse if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || ''))\n  debug = function() {\n    var m = util.format.apply(util, arguments)\n    m = 'GFS4: ' + m.split(/\\n/).join('\\nGFS4: ')\n    console.error(m)\n  }\n\nif (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || '')) {\n  process.on('exit', function() {\n    debug(queue)\n    require('assert').equal(queue.length, 0)\n  })\n}\n\nmodule.exports = patch(clone(fs))\nif (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {\n    module.exports = patch(fs)\n    fs.__patched = true;\n}\n\n// Always patch fs.close/closeSync, because we want to\n// retry() whenever a close happens *anywhere* in the program.\n// This is essential when multiple graceful-fs instances are\n// in play at the same time.\nmodule.exports.close = (function (fs$close) { return function (fd, cb) {\n  return fs$close.call(fs, fd, function (err) {\n    if (!err)\n      retry()\n\n    if (typeof cb === 'function')\n      cb.apply(this, arguments)\n  })\n}})(fs.close)\n\nmodule.exports.closeSync = (function (fs$closeSync) { return function (fd) {\n  // Note that graceful-fs also retries when fs.closeSync() fails.\n  // Looks like a bug to me, although it's probably a harmless one.\n  var rval = fs$closeSync.apply(fs, arguments)\n  retry()\n  return rval\n}})(fs.closeSync)\n\n// Only patch fs once, otherwise we'll run into a memory leak if\n// graceful-fs is loaded multiple times, such as in test environments that\n// reset the loaded modules between tests.\n// We look for the string `graceful-fs` from the comment above. This\n// way we are not adding any extra properties and it will detect if older\n// versions of graceful-fs are installed.\nif (!/\\bgraceful-fs\\b/.test(fs.closeSync.toString())) {\n  fs.closeSync = module.exports.closeSync;\n  fs.close = module.exports.close;\n}\n\nfunction patch (fs) {\n  // Everything that references the open() function needs to be in here\n  polyfills(fs)\n  fs.gracefulify = patch\n  fs.FileReadStream = ReadStream;  // Legacy name.\n  fs.FileWriteStream = WriteStream;  // Legacy name.\n  fs.createReadStream = createReadStream\n  fs.createWriteStream = createWriteStream\n  var fs$readFile = fs.readFile\n  fs.readFile = readFile\n  function readFile (path, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    return go$readFile(path, options, cb)\n\n    function go$readFile (path, options, cb) {\n      return fs$readFile(path, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$readFile, [path, options, cb]])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n          retry()\n        }\n      })\n    }\n  }\n\n  var fs$writeFile = fs.writeFile\n  fs.writeFile = writeFile\n  function writeFile (path, data, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    return go$writeFile(path, data, options, cb)\n\n    function go$writeFile (path, data, options, cb) {\n      return fs$writeFile(path, data, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$writeFile, [path, data, options, cb]])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n          retry()\n        }\n      })\n    }\n  }\n\n  var fs$appendFile = fs.appendFile\n  if (fs$appendFile)\n    fs.appendFile = appendFile\n  function appendFile (path, data, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    return go$appendFile(path, data, options, cb)\n\n    function go$appendFile (path, data, options, cb) {\n      return fs$appendFile(path, data, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$appendFile, [path, data, options, cb]])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n          retry()\n        }\n      })\n    }\n  }\n\n  var fs$readdir = fs.readdir\n  fs.readdir = readdir\n  function readdir (path, options, cb) {\n    var args = [path]\n    if (typeof options !== 'function') {\n      args.push(options)\n    } else {\n      cb = options\n    }\n    args.push(go$readdir$cb)\n\n    return go$readdir(args)\n\n    function go$readdir$cb (err, files) {\n      if (files && files.sort)\n        files.sort()\n\n      if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n        enqueue([go$readdir, [args]])\n\n      else {\n        if (typeof cb === 'function')\n          cb.apply(this, arguments)\n        retry()\n      }\n    }\n  }\n\n  function go$readdir (args) {\n    return fs$readdir.apply(fs, args)\n  }\n\n  if (process.version.substr(0, 4) === 'v0.8') {\n    var legStreams = legacy(fs)\n    ReadStream = legStreams.ReadStream\n    WriteStream = legStreams.WriteStream\n  }\n\n  var fs$ReadStream = fs.ReadStream\n  if (fs$ReadStream) {\n    ReadStream.prototype = Object.create(fs$ReadStream.prototype)\n    ReadStream.prototype.open = ReadStream$open\n  }\n\n  var fs$WriteStream = fs.WriteStream\n  if (fs$WriteStream) {\n    WriteStream.prototype = Object.create(fs$WriteStream.prototype)\n    WriteStream.prototype.open = WriteStream$open\n  }\n\n  fs.ReadStream = ReadStream\n  fs.WriteStream = WriteStream\n\n  function ReadStream (path, options) {\n    if (this instanceof ReadStream)\n      return fs$ReadStream.apply(this, arguments), this\n    else\n      return ReadStream.apply(Object.create(ReadStream.prototype), arguments)\n  }\n\n  function ReadStream$open () {\n    var that = this\n    open(that.path, that.flags, that.mode, function (err, fd) {\n      if (err) {\n        if (that.autoClose)\n          that.destroy()\n\n        that.emit('error', err)\n      } else {\n        that.fd = fd\n        that.emit('open', fd)\n        that.read()\n      }\n    })\n  }\n\n  function WriteStream (path, options) {\n    if (this instanceof WriteStream)\n      return fs$WriteStream.apply(this, arguments), this\n    else\n      return WriteStream.apply(Object.create(WriteStream.prototype), arguments)\n  }\n\n  function WriteStream$open () {\n    var that = this\n    open(that.path, that.flags, that.mode, function (err, fd) {\n      if (err) {\n        that.destroy()\n        that.emit('error', err)\n      } else {\n        that.fd = fd\n        that.emit('open', fd)\n      }\n    })\n  }\n\n  function createReadStream (path, options) {\n    return new ReadStream(path, options)\n  }\n\n  function createWriteStream (path, options) {\n    return new WriteStream(path, options)\n  }\n\n  var fs$open = fs.open\n  fs.open = open\n  function open (path, flags, mode, cb) {\n    if (typeof mode === 'function')\n      cb = mode, mode = null\n\n    return go$open(path, flags, mode, cb)\n\n    function go$open (path, flags, mode, cb) {\n      return fs$open(path, flags, mode, function (err, fd) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$open, [path, flags, mode, cb]])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n          retry()\n        }\n      })\n    }\n  }\n\n  return fs\n}\n\nfunction enqueue (elem) {\n  debug('ENQUEUE', elem[0].name, elem[1])\n  queue.push(elem)\n}\n\nfunction retry () {\n  var elem = queue.shift()\n  if (elem) {\n    debug('RETRY', elem[0].name, elem[1])\n    elem[0].apply(null, elem[1])\n  }\n}\n"]},"metadata":{},"sourceType":"script"}