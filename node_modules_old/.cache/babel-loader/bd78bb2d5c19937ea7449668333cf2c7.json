{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst path = require(\"path\");\n\nconst timestamp = () => new Date().toISOString();\n\nlet timer;\n\nconst wait = ms => new Promise(resolve => {\n  if (timer) timer.unref();\n  timer = setTimeout(() => resolve(), ms);\n});\n\nfunction chomp(s) {\n  if (s.endsWith('\\n')) return s.replace(/\\n$/, '');\n  return s;\n}\n\nclass Logger {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(file) {\n    this.file = file;\n    this.flushing = Promise.resolve();\n    this.buffer = [];\n  }\n\n  log(msg) {\n    const stripAnsi = require('strip-ansi');\n\n    msg = stripAnsi(chomp(msg));\n    const lines = msg.split('\\n').map(l => `${timestamp()} ${l}`.trimRight());\n    this.buffer.push(...lines); // tslint:disable-next-line no-console\n\n    this.flush(50).catch(console.error);\n  }\n\n  async flush(waitForMs = 0) {\n    await wait(waitForMs);\n    this.flushing = this.flushing.then(async () => {\n      if (this.buffer.length === 0) return;\n      const mylines = this.buffer;\n      this.buffer = [];\n\n      const fs = require('fs-extra');\n\n      await fs.mkdirp(path.dirname(this.file));\n      await fs.appendFile(this.file, mylines.join('\\n') + '\\n');\n    });\n    await this.flushing;\n  }\n\n}\n\nexports.Logger = Logger;","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/@oclif/errors/lib/logger.js"],"names":["Object","defineProperty","exports","value","path","require","timestamp","Date","toISOString","timer","wait","ms","Promise","resolve","unref","setTimeout","chomp","s","endsWith","replace","Logger","constructor","file","flushing","buffer","log","msg","stripAnsi","lines","split","map","l","trimRight","push","flush","catch","console","error","waitForMs","then","length","mylines","fs","mkdirp","dirname","appendFile","join"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,SAAS,GAAG,MAAM,IAAIC,IAAJ,GAAWC,WAAX,EAAxB;;AACA,IAAIC,KAAJ;;AACA,MAAMC,IAAI,GAAIC,EAAD,IAAQ,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AACxC,MAAIJ,KAAJ,EACIA,KAAK,CAACK,KAAN;AACJL,EAAAA,KAAK,GAAGM,UAAU,CAAC,MAAMF,OAAO,EAAd,EAAkBF,EAAlB,CAAlB;AACH,CAJoB,CAArB;;AAKA,SAASK,KAAT,CAAeC,CAAf,EAAkB;AACd,MAAIA,CAAC,CAACC,QAAF,CAAW,IAAX,CAAJ,EACI,OAAOD,CAAC,CAACE,OAAF,CAAU,KAAV,EAAiB,EAAjB,CAAP;AACJ,SAAOF,CAAP;AACH;;AACD,MAAMG,MAAN,CAAa;AACT;AACAC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBX,OAAO,CAACC,OAAR,EAAhB;AACA,SAAKW,MAAL,GAAc,EAAd;AACH;;AACDC,EAAAA,GAAG,CAACC,GAAD,EAAM;AACL,UAAMC,SAAS,GAAGtB,OAAO,CAAC,YAAD,CAAzB;;AACAqB,IAAAA,GAAG,GAAGC,SAAS,CAACX,KAAK,CAACU,GAAD,CAAN,CAAf;AACA,UAAME,KAAK,GAAGF,GAAG,CAACG,KAAJ,CAAU,IAAV,EAAgBC,GAAhB,CAAoBC,CAAC,IAAK,GAAEzB,SAAS,EAAG,IAAGyB,CAAE,EAApB,CAAsBC,SAAtB,EAAzB,CAAd;AACA,SAAKR,MAAL,CAAYS,IAAZ,CAAiB,GAAGL,KAApB,EAJK,CAKL;;AACA,SAAKM,KAAL,CAAW,EAAX,EAAeC,KAAf,CAAqBC,OAAO,CAACC,KAA7B;AACH;;AACD,QAAMH,KAAN,CAAYI,SAAS,GAAG,CAAxB,EAA2B;AACvB,UAAM5B,IAAI,CAAC4B,SAAD,CAAV;AACA,SAAKf,QAAL,GAAgB,KAAKA,QAAL,CAAcgB,IAAd,CAAmB,YAAY;AAC3C,UAAI,KAAKf,MAAL,CAAYgB,MAAZ,KAAuB,CAA3B,EACI;AACJ,YAAMC,OAAO,GAAG,KAAKjB,MAArB;AACA,WAAKA,MAAL,GAAc,EAAd;;AACA,YAAMkB,EAAE,GAAGrC,OAAO,CAAC,UAAD,CAAlB;;AACA,YAAMqC,EAAE,CAACC,MAAH,CAAUvC,IAAI,CAACwC,OAAL,CAAa,KAAKtB,IAAlB,CAAV,CAAN;AACA,YAAMoB,EAAE,CAACG,UAAH,CAAc,KAAKvB,IAAnB,EAAyBmB,OAAO,CAACK,IAAR,CAAa,IAAb,IAAqB,IAA9C,CAAN;AACH,KARe,CAAhB;AASA,UAAM,KAAKvB,QAAX;AACH;;AA3BQ;;AA6BbrB,OAAO,CAACkB,MAAR,GAAiBA,MAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = require(\"path\");\nconst timestamp = () => new Date().toISOString();\nlet timer;\nconst wait = (ms) => new Promise(resolve => {\n    if (timer)\n        timer.unref();\n    timer = setTimeout(() => resolve(), ms);\n});\nfunction chomp(s) {\n    if (s.endsWith('\\n'))\n        return s.replace(/\\n$/, '');\n    return s;\n}\nclass Logger {\n    // eslint-disable-next-line no-useless-constructor\n    constructor(file) {\n        this.file = file;\n        this.flushing = Promise.resolve();\n        this.buffer = [];\n    }\n    log(msg) {\n        const stripAnsi = require('strip-ansi');\n        msg = stripAnsi(chomp(msg));\n        const lines = msg.split('\\n').map(l => `${timestamp()} ${l}`.trimRight());\n        this.buffer.push(...lines);\n        // tslint:disable-next-line no-console\n        this.flush(50).catch(console.error);\n    }\n    async flush(waitForMs = 0) {\n        await wait(waitForMs);\n        this.flushing = this.flushing.then(async () => {\n            if (this.buffer.length === 0)\n                return;\n            const mylines = this.buffer;\n            this.buffer = [];\n            const fs = require('fs-extra');\n            await fs.mkdirp(path.dirname(this.file));\n            await fs.appendFile(this.file, mylines.join('\\n') + '\\n');\n        });\n        await this.flushing;\n    }\n}\nexports.Logger = Logger;\n"]},"metadata":{},"sourceType":"script"}