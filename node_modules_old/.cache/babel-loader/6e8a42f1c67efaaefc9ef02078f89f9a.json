{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _git_log_format_markers = require(\"./constants/git_log_format_markers\");\n\nconst parseCommit = commit => {\n  const hash = commit[0];\n  const authorName = commit[1];\n  const authorEmail = commit[2];\n  const date = commit[3];\n  const messageIndex = commit.findIndex(line => line.match(_git_log_format_markers.gitLogMessageMarker));\n  const fileIndex = commit.findIndex(line => line.match(_git_log_format_markers.gitLogFileMarker));\n  const message = commit.slice(messageIndex + 1, fileIndex).join('\\n');\n  const files = commit.slice(fileIndex + 1);\n  const addPattern = /^A\\s([^\\s]+)/;\n  const deletePattern = /^D\\s([^\\s]+)/;\n  const modifyPattern = /^M\\s([^\\s]+)/;\n  const renamePattern = /^R[0-9]+\\s(.+)\\s(.+)/;\n\n  const filterFileChanges = pattern => {\n    return files.reduce((accumulator, file) => {\n      const match = file.match(pattern);\n\n      if (match) {\n        accumulator.push({\n          path: match[1]\n        });\n      }\n\n      return accumulator;\n    }, []);\n  };\n\n  const filesRenamed = files.reduce((accumulator, file) => {\n    const match = file.match(renamePattern);\n\n    if (match) {\n      accumulator.push({\n        oldPath: match[1],\n        newPath: match[2]\n      });\n    }\n\n    return accumulator;\n  }, []);\n  const parsedCommit = {\n    hash,\n    authorName,\n    authorEmail,\n    date,\n    message,\n    filesAdded: filterFileChanges(addPattern),\n    filesDeleted: filterFileChanges(deletePattern),\n    filesModified: filterFileChanges(modifyPattern),\n    filesRenamed\n  };\n  return parsedCommit;\n};\n\nvar _default = parseCommit;\nexports.default = _default;","map":{"version":3,"sources":["../src/parse_commit.js"],"names":["parseCommit","commit","hash","authorName","authorEmail","date","messageIndex","line","gitLogMessageMarker","fileIndex","gitLogFileMarker","message","files","addPattern","deletePattern","modifyPattern","renamePattern","filterFileChanges","pattern","match","file","accumulator","path","filesRenamed","oldPath","newPath","parsedCommit","filesAdded","filesDeleted","filesModified"],"mappings":";;;;;;;AAQA,IAAA,uBAAA,GAAA,OAAA,CAAA,oCAAA,CAAA;;AAKA,MAAMA,WAAW,GAAIC,MAAD,IAAiC;AACnD,QAAMC,IAAI,GAAGD,MAAM,CAAnB,CAAmB,CAAnB;AACA,QAAME,UAAU,GAAGF,MAAM,CAAzB,CAAyB,CAAzB;AACA,QAAMG,WAAW,GAAGH,MAAM,CAA1B,CAA0B,CAA1B;AACA,QAAMI,IAAI,GAAGJ,MAAM,CAAnB,CAAmB,CAAnB;AAEA,QAAMK,YAAY,GAAGL,MAAM,CAANA,SAAAA,CAAiBM,IAAI,IACxCA,IAAI,CAAJA,KAAAA,CAAWC,uBAAAA,CADb,mBACED,CADmBN,CAArB;AAGA,QAAMQ,SAAS,GAAGR,MAAM,CAANA,SAAAA,CAAiBM,IAAI,IAAIA,IAAI,CAAJA,KAAAA,CAAWG,uBAAAA,CAAtD,gBAA2CH,CAAzBN,CAAlB;AACA,QAAMU,OAAO,GAAGV,MAAM,CAANA,KAAAA,CAAaK,YAAY,GAAzBL,CAAAA,EAAAA,SAAAA,EAAAA,IAAAA,CAAhB,IAAgBA,CAAhB;AACA,QAAMW,KAAK,GAAGX,MAAM,CAANA,KAAAA,CAAaQ,SAAS,GAApC,CAAcR,CAAd;AAEA,QAAMY,UAAU,GAAhB,cAAA;AACA,QAAMC,aAAa,GAAnB,cAAA;AACA,QAAMC,aAAa,GAAnB,cAAA;AACA,QAAMC,aAAa,GAAnB,sBAAA;;AAEA,QAAMC,iBAAiB,GAAIC,OAAD,IAAiC;AACzD,WAAO,KAAK,CAAL,MAAA,CAAa,CAAA,WAAA,EAAA,IAAA,KAAuB;AACzC,YAAMC,KAAK,GAAGC,IAAI,CAAJA,KAAAA,CAAd,OAAcA,CAAd;;AACA,UAAA,KAAA,EAAW;AACTC,QAAAA,WAAW,CAAXA,IAAAA,CAAiB;AAACC,UAAAA,IAAI,EAAEH,KAAK,CAAA,CAAA;AAAZ,SAAjBE;AACD;;AAED,aAAA,WAAA;AANK,KAAA,EAAP,EAAO,CAAP;AADF,GAAA;;AAWA,QAAME,YAA0B,GAAG,KAAK,CAAL,MAAA,CAAa,CAAA,WAAA,EAAA,IAAA,KAAuB;AACrE,UAAMJ,KAAK,GAAGC,IAAI,CAAJA,KAAAA,CAAd,aAAcA,CAAd;;AACA,QAAA,KAAA,EAAW;AACTC,MAAAA,WAAW,CAAXA,IAAAA,CAAiB;AACfG,QAAAA,OAAO,EAAEL,KAAK,CADC,CACD,CADC;AAEfM,QAAAA,OAAO,EAAEN,KAAK,CAAA,CAAA;AAFC,OAAjBE;AAID;;AACD,WAAA,WAAA;AARiC,GAAA,EAAnC,EAAmC,CAAnC;AAWA,QAAMK,YAAY,GAAG;AAAA,IAAA,IAAA;AAAA,IAAA,UAAA;AAAA,IAAA,WAAA;AAAA,IAAA,IAAA;AAAA,IAAA,OAAA;AAMnBC,IAAAA,UAAU,EAAEV,iBAAiB,CANV,UAMU,CANV;AAOnBW,IAAAA,YAAY,EAAEX,iBAAiB,CAPZ,aAOY,CAPZ;AAQnBY,IAAAA,aAAa,EAAEZ,iBAAiB,CARb,aAQa,CARb;AASnBM,IAAAA;AATmB,GAArB;AAYA,SAAA,YAAA;AApDF,CAAA;;eAuDevB,W","sourcesContent":["// @flow\n\nimport type {\n  GitCommit,\n  FileModification,\n  FileRename\n} from './types/git_commit_type';\n\nimport {\n  gitLogMessageMarker,\n  gitLogFileMarker\n} from './constants/git_log_format_markers';\n\nconst parseCommit = (commit: string[]): GitCommit => {\n  const hash = commit[0];\n  const authorName = commit[1];\n  const authorEmail = commit[2];\n  const date = commit[3];\n\n  const messageIndex = commit.findIndex(line =>\n    line.match(gitLogMessageMarker)\n  );\n  const fileIndex = commit.findIndex(line => line.match(gitLogFileMarker));\n  const message = commit.slice(messageIndex + 1, fileIndex).join('\\n');\n  const files = commit.slice(fileIndex + 1);\n\n  const addPattern = /^A\\s([^\\s]+)/;\n  const deletePattern = /^D\\s([^\\s]+)/;\n  const modifyPattern = /^M\\s([^\\s]+)/;\n  const renamePattern = /^R[0-9]+\\s(.+)\\s(.+)/;\n\n  const filterFileChanges = (pattern): FileModification[] => {\n    return files.reduce((accumulator, file) => {\n      const match = file.match(pattern);\n      if (match) {\n        accumulator.push({path: match[1]});\n      }\n\n      return accumulator;\n    }, []);\n  };\n\n  const filesRenamed: FileRename[] = files.reduce((accumulator, file) => {\n    const match = file.match(renamePattern);\n    if (match) {\n      accumulator.push({\n        oldPath: match[1],\n        newPath: match[2]\n      });\n    }\n    return accumulator;\n  }, []);\n\n  const parsedCommit = {\n    hash,\n    authorName,\n    authorEmail,\n    date,\n    message,\n    filesAdded: filterFileChanges(addPattern),\n    filesDeleted: filterFileChanges(deletePattern),\n    filesModified: filterFileChanges(modifyPattern),\n    filesRenamed\n  };\n\n  return parsedCommit;\n};\n\nexport default parseCommit;\n"]},"metadata":{},"sourceType":"script"}