{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst path_1 = require(\"path\");\n\nconst lodash_merge_1 = __importDefault(require(\"lodash.merge\"));\n\nconst vscode_uri_1 = __importDefault(require(\"vscode-uri\"));\n\nconst utils_1 = require(\"./utils\");\n\nexports.DefaultEngineStatsWindow = {\n  to: -0,\n  from: -86400\n};\nexports.DefaultEngineConfig = {\n  endpoint: \"https://engine-graphql.apollographql.com/api/graphql\"\n};\nexports.DefaultConfigBase = {\n  includes: [\"src/**/*.{ts,tsx,js,jsx,graphql,gql}\"],\n  excludes: [\"**/node_modules\", \"**/__tests__\"]\n};\nexports.DefaultClientConfig = Object.assign(Object.assign({}, exports.DefaultConfigBase), {\n  tagName: \"gql\",\n  clientOnlyDirectives: [\"connection\", \"type\"],\n  clientSchemaDirectives: [\"client\", \"rest\"],\n  addTypename: true,\n  statsWindow: exports.DefaultEngineStatsWindow\n});\nexports.DefaultServiceConfig = Object.assign(Object.assign({}, exports.DefaultConfigBase), {\n  endpoint: {\n    url: \"http://localhost:4000/graphql\"\n  }\n});\n\nclass ApolloConfig {\n  constructor(rawConfig, configURI) {\n    this.rawConfig = rawConfig;\n    this.configURI = configURI;\n    this.isService = !!rawConfig.service;\n    this.isClient = !!rawConfig.client;\n    this.engine = rawConfig.engine;\n    this._graphId = utils_1.getGraphIdFromConfig(rawConfig);\n    this.client = rawConfig.client;\n    this.service = rawConfig.service;\n  }\n\n  get configDirURI() {\n    return this.configURI && this.configURI.fsPath.match(/\\.(ts|js|json)$/i) ? vscode_uri_1.default.parse(path_1.dirname(this.configURI.fsPath)) : this.configURI;\n  }\n\n  get projects() {\n    const configs = [];\n    const {\n      client,\n      service\n    } = this.rawConfig;\n    if (client) configs.push(new ClientConfig(this.rawConfig, this.configURI));\n    if (service) configs.push(new ServiceConfig(this.rawConfig, this.configURI));\n    return configs;\n  }\n\n  set variant(variant) {\n    this._variant = variant;\n  }\n\n  get variant() {\n    if (this._variant) return this._variant;\n    let tag = \"current\";\n\n    if (this.client && typeof this.client.service === \"string\") {\n      const parsedVariant = utils_1.parseServiceSpecifier(this.client.service)[1];\n      if (parsedVariant) tag = parsedVariant;\n    } else if (this.service && typeof this.service.name === \"string\") {\n      const parsedVariant = utils_1.parseServiceSpecifier(this.service.name)[1];\n      if (parsedVariant) tag = parsedVariant;\n    }\n\n    return tag;\n  }\n\n  set graph(graphId) {\n    this._graphId = graphId;\n  }\n\n  get graph() {\n    if (this._graphId) return this._graphId;\n    return utils_1.getGraphIdFromConfig(this.rawConfig);\n  }\n\n  setDefaults({\n    client,\n    engine,\n    service\n  }) {\n    const config = lodash_merge_1.default(this.rawConfig, {\n      client,\n      engine,\n      service\n    });\n    this.rawConfig = config;\n    this.client = config.client;\n    this.service = config.service;\n    if (engine) this.engine = config.engine;\n  }\n\n}\n\nexports.ApolloConfig = ApolloConfig;\n\nclass ClientConfig extends ApolloConfig {}\n\nexports.ClientConfig = ClientConfig;\n\nclass ServiceConfig extends ApolloConfig {}\n\nexports.ServiceConfig = ServiceConfig;","map":{"version":3,"sources":["../../src/config/config.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAA,MAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AACA,MAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AAEA,MAAA,YAAA,GAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAQa,OAAA,CAAA,wBAAA,GAA2B;AACtC,EAAA,EAAE,EAAE,CAAC,CADiC;AAEtC,EAAA,IAAI,EAAE,CAAC;AAF+B,CAA3B;AAyBA,OAAA,CAAA,mBAAA,GAAsB;AACjC,EAAA,QAAQ,EAAE;AADuB,CAAtB;AAIA,OAAA,CAAA,iBAAA,GAAoB;AAC/B,EAAA,QAAQ,EAAE,CAAC,sCAAD,CADqB;AAE/B,EAAA,QAAQ,EAAE,CAAC,iBAAD,EAAoB,cAApB;AAFqB,CAApB;AAsDA,OAAA,CAAA,mBAAA,GAAmB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAC3B,OAAA,CAAA,iBAD2B,CAAA,EACV;AACpB,EAAA,OAAO,EAAE,KADW;AAEpB,EAAA,oBAAoB,EAAE,CAAC,YAAD,EAAe,MAAf,CAFF;AAGpB,EAAA,sBAAsB,EAAE,CAAC,QAAD,EAAW,MAAX,CAHJ;AAIpB,EAAA,WAAW,EAAE,IAJO;AAKpB,EAAA,WAAW,EAAE,OAAA,CAAA;AALO,CADU,CAAnB;AAeA,OAAA,CAAA,oBAAA,GAAoB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAC5B,OAAA,CAAA,iBAD4B,CAAA,EACX;AACpB,EAAA,QAAQ,EAAE;AACR,IAAA,GAAG,EAAE;AADG;AADU,CADW,CAApB;;AAiBb,MAAa,YAAb,CAAyB;AASvB,EAAA,WAAA,CAAmB,SAAnB,EAAyD,SAAzD,EAAwE;AAArD,SAAA,SAAA,GAAA,SAAA;AAAsC,SAAA,SAAA,GAAA,SAAA;AACvD,SAAK,SAAL,GAAiB,CAAC,CAAC,SAAS,CAAC,OAA7B;AACA,SAAK,QAAL,GAAgB,CAAC,CAAC,SAAS,CAAC,MAA5B;AACA,SAAK,MAAL,GAAc,SAAS,CAAC,MAAxB;AACA,SAAK,QAAL,GAAgB,OAAA,CAAA,oBAAA,CAAqB,SAArB,CAAhB;AACA,SAAK,MAAL,GAAc,SAAS,CAAC,MAAxB;AACA,SAAK,OAAL,GAAe,SAAS,CAAC,OAAzB;AACD;;AAED,MAAI,YAAJ,GAAgB;AAEd,WAAO,KAAK,SAAL,IAAkB,KAAK,SAAL,CAAe,MAAf,CAAsB,KAAtB,CAA4B,kBAA5B,CAAlB,GACH,YAAA,CAAA,OAAA,CAAI,KAAJ,CAAU,MAAA,CAAA,OAAA,CAAQ,KAAK,SAAL,CAAe,MAAvB,CAAV,CADG,GAEH,KAAK,SAFT;AAGD;;AAED,MAAI,QAAJ,GAAY;AACV,UAAM,OAAO,GAAG,EAAhB;AACA,UAAM;AAAE,MAAA,MAAF;AAAU,MAAA;AAAV,QAAsB,KAAK,SAAjC;AACA,QAAI,MAAJ,EAAY,OAAO,CAAC,IAAR,CAAa,IAAI,YAAJ,CAAiB,KAAK,SAAtB,EAAiC,KAAK,SAAtC,CAAb;AACZ,QAAI,OAAJ,EACE,OAAO,CAAC,IAAR,CAAa,IAAI,aAAJ,CAAkB,KAAK,SAAvB,EAAkC,KAAK,SAAvC,CAAb;AACF,WAAO,OAAP;AACD;;AAED,MAAI,OAAJ,CAAY,OAAZ,EAA2B;AACzB,SAAK,QAAL,GAAgB,OAAhB;AACD;;AAED,MAAI,OAAJ,GAAW;AACT,QAAI,KAAK,QAAT,EAAmB,OAAO,KAAK,QAAZ;AACnB,QAAI,GAAG,GAAW,SAAlB;;AACA,QAAI,KAAK,MAAL,IAAe,OAAO,KAAK,MAAL,CAAY,OAAnB,KAA+B,QAAlD,EAA4D;AAC1D,YAAM,aAAa,GAAG,OAAA,CAAA,qBAAA,CAAsB,KAAK,MAAL,CAAY,OAAlC,EAA2C,CAA3C,CAAtB;AACA,UAAI,aAAJ,EAAmB,GAAG,GAAG,aAAN;AACpB,KAHD,MAGO,IAAI,KAAK,OAAL,IAAgB,OAAO,KAAK,OAAL,CAAa,IAApB,KAA6B,QAAjD,EAA2D;AAChE,YAAM,aAAa,GAAG,OAAA,CAAA,qBAAA,CAAsB,KAAK,OAAL,CAAa,IAAnC,EAAyC,CAAzC,CAAtB;AACA,UAAI,aAAJ,EAAmB,GAAG,GAAG,aAAN;AACpB;;AACD,WAAO,GAAP;AACD;;AAED,MAAI,KAAJ,CAAU,OAAV,EAAqC;AACnC,SAAK,QAAL,GAAgB,OAAhB;AACD;;AAED,MAAI,KAAJ,GAAS;AACP,QAAI,KAAK,QAAT,EAAmB,OAAO,KAAK,QAAZ;AACnB,WAAO,OAAA,CAAA,oBAAA,CAAqB,KAAK,SAA1B,CAAP;AACD;;AAGM,EAAA,WAAW,CAAC;AAAE,IAAA,MAAF;AAAU,IAAA,MAAV;AAAkB,IAAA;AAAlB,GAAD,EAAiC;AACjD,UAAM,MAAM,GAAG,cAAA,CAAA,OAAA,CAAM,KAAK,SAAX,EAAsB;AAAE,MAAA,MAAF;AAAU,MAAA,MAAV;AAAkB,MAAA;AAAlB,KAAtB,CAAf;AACA,SAAK,SAAL,GAAiB,MAAjB;AACA,SAAK,MAAL,GAAc,MAAM,CAAC,MAArB;AACA,SAAK,OAAL,GAAe,MAAM,CAAC,OAAtB;AACA,QAAI,MAAJ,EAAY,KAAK,MAAL,GAAc,MAAM,CAAC,MAArB;AACb;;AAnEsB;;AAAzB,OAAA,CAAA,YAAA,GAAA,YAAA;;AAsEA,MAAa,YAAb,SAAkC,YAAlC,CAA8C;;AAA9C,OAAA,CAAA,YAAA,GAAA,YAAA;;AAIA,MAAa,aAAb,SAAmC,YAAnC,CAA+C;;AAA/C,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path_1 = require(\"path\");\nconst lodash_merge_1 = __importDefault(require(\"lodash.merge\"));\nconst vscode_uri_1 = __importDefault(require(\"vscode-uri\"));\nconst utils_1 = require(\"./utils\");\nexports.DefaultEngineStatsWindow = {\n    to: -0,\n    from: -86400\n};\nexports.DefaultEngineConfig = {\n    endpoint: \"https://engine-graphql.apollographql.com/api/graphql\"\n};\nexports.DefaultConfigBase = {\n    includes: [\"src/**/*.{ts,tsx,js,jsx,graphql,gql}\"],\n    excludes: [\"**/node_modules\", \"**/__tests__\"]\n};\nexports.DefaultClientConfig = Object.assign(Object.assign({}, exports.DefaultConfigBase), { tagName: \"gql\", clientOnlyDirectives: [\"connection\", \"type\"], clientSchemaDirectives: [\"client\", \"rest\"], addTypename: true, statsWindow: exports.DefaultEngineStatsWindow });\nexports.DefaultServiceConfig = Object.assign(Object.assign({}, exports.DefaultConfigBase), { endpoint: {\n        url: \"http://localhost:4000/graphql\"\n    } });\nclass ApolloConfig {\n    constructor(rawConfig, configURI) {\n        this.rawConfig = rawConfig;\n        this.configURI = configURI;\n        this.isService = !!rawConfig.service;\n        this.isClient = !!rawConfig.client;\n        this.engine = rawConfig.engine;\n        this._graphId = utils_1.getGraphIdFromConfig(rawConfig);\n        this.client = rawConfig.client;\n        this.service = rawConfig.service;\n    }\n    get configDirURI() {\n        return this.configURI && this.configURI.fsPath.match(/\\.(ts|js|json)$/i)\n            ? vscode_uri_1.default.parse(path_1.dirname(this.configURI.fsPath))\n            : this.configURI;\n    }\n    get projects() {\n        const configs = [];\n        const { client, service } = this.rawConfig;\n        if (client)\n            configs.push(new ClientConfig(this.rawConfig, this.configURI));\n        if (service)\n            configs.push(new ServiceConfig(this.rawConfig, this.configURI));\n        return configs;\n    }\n    set variant(variant) {\n        this._variant = variant;\n    }\n    get variant() {\n        if (this._variant)\n            return this._variant;\n        let tag = \"current\";\n        if (this.client && typeof this.client.service === \"string\") {\n            const parsedVariant = utils_1.parseServiceSpecifier(this.client.service)[1];\n            if (parsedVariant)\n                tag = parsedVariant;\n        }\n        else if (this.service && typeof this.service.name === \"string\") {\n            const parsedVariant = utils_1.parseServiceSpecifier(this.service.name)[1];\n            if (parsedVariant)\n                tag = parsedVariant;\n        }\n        return tag;\n    }\n    set graph(graphId) {\n        this._graphId = graphId;\n    }\n    get graph() {\n        if (this._graphId)\n            return this._graphId;\n        return utils_1.getGraphIdFromConfig(this.rawConfig);\n    }\n    setDefaults({ client, engine, service }) {\n        const config = lodash_merge_1.default(this.rawConfig, { client, engine, service });\n        this.rawConfig = config;\n        this.client = config.client;\n        this.service = config.service;\n        if (engine)\n            this.engine = config.engine;\n    }\n}\nexports.ApolloConfig = ApolloConfig;\nclass ClientConfig extends ApolloConfig {\n}\nexports.ClientConfig = ClientConfig;\nclass ServiceConfig extends ApolloConfig {\n}\nexports.ServiceConfig = ServiceConfig;\n//# sourceMappingURL=config.js.map"]},"metadata":{},"sourceType":"script"}