{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\ncommon.register('which', _which, {\n  allowGlobbing: false,\n  cmdOptions: {\n    'a': 'all'\n  }\n}); // XP's system default value for PATHEXT system variable, just in case it's not\n// set on Windows.\n\nvar XP_DEFAULT_PATHEXT = '.com;.exe;.bat;.cmd;.vbs;.vbe;.js;.jse;.wsf;.wsh'; // Cross-platform method for splitting environment PATH variables\n\nfunction splitPath(p) {\n  return p ? p.split(path.delimiter) : [];\n}\n\nfunction checkPath(pathName) {\n  return fs.existsSync(pathName) && !fs.statSync(pathName).isDirectory();\n} //@\n//@ ### which(command)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var nodeExec = which('node');\n//@ ```\n//@\n//@ Searches for `command` in the system's PATH. On Windows, this uses the\n//@ `PATHEXT` variable to append the extension if it's not already executable.\n//@ Returns string containing the absolute path to the command.\n\n\nfunction _which(options, cmd) {\n  if (!cmd) common.error('must specify command');\n  var pathEnv = process.env.path || process.env.Path || process.env.PATH;\n  var pathArray = splitPath(pathEnv);\n  var queryMatches = []; // No relative/absolute paths provided?\n\n  if (cmd.indexOf('/') === -1) {\n    // Assume that there are no extensions to append to queries (this is the\n    // case for unix)\n    var pathExtArray = [''];\n\n    if (common.platform === 'win') {\n      // In case the PATHEXT variable is somehow not set (e.g.\n      // child_process.spawn with an empty environment), use the XP default.\n      var pathExtEnv = process.env.PATHEXT || XP_DEFAULT_PATHEXT;\n      pathExtArray = splitPath(pathExtEnv.toUpperCase());\n    } // Search for command in PATH\n\n\n    for (var k = 0; k < pathArray.length; k++) {\n      // already found it\n      if (queryMatches.length > 0 && !options.all) break;\n      var attempt = path.resolve(pathArray[k], cmd);\n\n      if (common.platform === 'win') {\n        attempt = attempt.toUpperCase();\n      }\n\n      var match = attempt.match(/\\.[^<>:\"/\\|?*.]+$/);\n\n      if (match && pathExtArray.indexOf(match[0]) >= 0) {\n        // this is Windows-only\n        // The user typed a query with the file extension, like\n        // `which('node.exe')`\n        if (checkPath(attempt)) {\n          queryMatches.push(attempt);\n          break;\n        }\n      } else {\n        // All-platforms\n        // Cycle through the PATHEXT array, and check each extension\n        // Note: the array is always [''] on Unix\n        for (var i = 0; i < pathExtArray.length; i++) {\n          var ext = pathExtArray[i];\n          var newAttempt = attempt + ext;\n\n          if (checkPath(newAttempt)) {\n            queryMatches.push(newAttempt);\n            break;\n          }\n        }\n      }\n    }\n  } else if (checkPath(cmd)) {\n    // a valid absolute or relative path\n    queryMatches.push(path.resolve(cmd));\n  }\n\n  if (queryMatches.length > 0) {\n    return options.all ? queryMatches : queryMatches[0];\n  }\n\n  return options.all ? [] : null;\n}\n\nmodule.exports = _which;","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/shelljs/src/which.js"],"names":["common","require","fs","path","register","_which","allowGlobbing","cmdOptions","XP_DEFAULT_PATHEXT","splitPath","p","split","delimiter","checkPath","pathName","existsSync","statSync","isDirectory","options","cmd","error","pathEnv","process","env","Path","PATH","pathArray","queryMatches","indexOf","pathExtArray","platform","pathExtEnv","PATHEXT","toUpperCase","k","length","all","attempt","resolve","match","push","i","ext","newAttempt","module","exports"],"mappings":"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","sourcesContent":["var common = require('./common');\nvar fs = require('fs');\nvar path = require('path');\n\ncommon.register('which', _which, {\n  allowGlobbing: false,\n  cmdOptions: {\n    'a': 'all',\n  },\n});\n\n// XP's system default value for PATHEXT system variable, just in case it's not\n// set on Windows.\nvar XP_DEFAULT_PATHEXT = '.com;.exe;.bat;.cmd;.vbs;.vbe;.js;.jse;.wsf;.wsh';\n\n// Cross-platform method for splitting environment PATH variables\nfunction splitPath(p) {\n  return p ? p.split(path.delimiter) : [];\n}\n\nfunction checkPath(pathName) {\n  return fs.existsSync(pathName) && !fs.statSync(pathName).isDirectory();\n}\n\n//@\n//@ ### which(command)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var nodeExec = which('node');\n//@ ```\n//@\n//@ Searches for `command` in the system's PATH. On Windows, this uses the\n//@ `PATHEXT` variable to append the extension if it's not already executable.\n//@ Returns string containing the absolute path to the command.\nfunction _which(options, cmd) {\n  if (!cmd) common.error('must specify command');\n\n  var pathEnv = process.env.path || process.env.Path || process.env.PATH;\n  var pathArray = splitPath(pathEnv);\n\n  var queryMatches = [];\n\n  // No relative/absolute paths provided?\n  if (cmd.indexOf('/') === -1) {\n    // Assume that there are no extensions to append to queries (this is the\n    // case for unix)\n    var pathExtArray = [''];\n    if (common.platform === 'win') {\n      // In case the PATHEXT variable is somehow not set (e.g.\n      // child_process.spawn with an empty environment), use the XP default.\n      var pathExtEnv = process.env.PATHEXT || XP_DEFAULT_PATHEXT;\n      pathExtArray = splitPath(pathExtEnv.toUpperCase());\n    }\n\n    // Search for command in PATH\n    for (var k = 0; k < pathArray.length; k++) {\n      // already found it\n      if (queryMatches.length > 0 && !options.all) break;\n\n      var attempt = path.resolve(pathArray[k], cmd);\n\n      if (common.platform === 'win') {\n        attempt = attempt.toUpperCase();\n      }\n\n      var match = attempt.match(/\\.[^<>:\"/\\|?*.]+$/);\n      if (match && pathExtArray.indexOf(match[0]) >= 0) { // this is Windows-only\n        // The user typed a query with the file extension, like\n        // `which('node.exe')`\n        if (checkPath(attempt)) {\n          queryMatches.push(attempt);\n          break;\n        }\n      } else { // All-platforms\n        // Cycle through the PATHEXT array, and check each extension\n        // Note: the array is always [''] on Unix\n        for (var i = 0; i < pathExtArray.length; i++) {\n          var ext = pathExtArray[i];\n          var newAttempt = attempt + ext;\n          if (checkPath(newAttempt)) {\n            queryMatches.push(newAttempt);\n            break;\n          }\n        }\n      }\n    }\n  } else if (checkPath(cmd)) { // a valid absolute or relative path\n    queryMatches.push(path.resolve(cmd));\n  }\n\n  if (queryMatches.length > 0) {\n    return options.all ? queryMatches : queryMatches[0];\n  }\n  return options.all ? [] : null;\n}\nmodule.exports = _which;\n"]},"metadata":{},"sourceType":"script"}