{"ast":null,"code":"var _jsxFileName = \"/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/src/content/SynonymPage/SynonimDisplay.js\";\nimport React, { Component } from 'react';\nimport ItemList from '../../components/ItemList';\nconst headers = [{\n  key: \"word\",\n  header: \"word\"\n}, {\n  key: \"score\",\n  header: \"score\"\n}];\nrowsToBeDisplayed = [];\n\nclass WordDisplay extends React.Component {\n  getWordList() {\n    console.log(\"getting synonyms for word \" + this.props.word);\n    fetch('https://api.datamuse.com/words?ml=' + this.props.word).then(res => res.json()).then(data => {\n      rows = data.map((dataPoint, index) => ({\n        id: index,\n        word: dataPoint.word,\n        score: dataPoint.score\n      }));\n    }).catch(console.log);\n  }\n\n  render() {\n    this.getWordList();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }, \"This is the word display element for the word:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 63\n      }\n    }), \" \", this.props.word), /*#__PURE__*/React.createElement(ItemList, {\n      headers: headers,\n      rows: rowsToBeDisplayed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default WordDisplay;","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/src/content/SynonymPage/SynonimDisplay.js"],"names":["React","Component","ItemList","headers","key","header","rowsToBeDisplayed","WordDisplay","getWordList","console","log","props","word","fetch","then","res","json","data","rows","map","dataPoint","index","id","score","catch","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,2BAArB;AAEA,MAAMC,OAAO,GAAG,CACZ;AACEC,EAAAA,GAAG,EAAE,MADP;AAEEC,EAAAA,MAAM,EAAE;AAFV,CADY,EAKZ;AACED,EAAAA,GAAG,EAAE,OADP;AAEEC,EAAAA,MAAM,EAAE;AAFV,CALY,CAAhB;AAWAC,iBAAiB,GAAG,EAApB;;AAEA,MAAMC,WAAN,SAA0BP,KAAK,CAACC,SAAhC,CAA0C;AACtCO,EAAAA,WAAW,GAAG;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAA6B,KAAKC,KAAL,CAAWC,IAApD;AACAC,IAAAA,KAAK,CAAC,uCAAqC,KAAKF,KAAL,CAAWC,IAAjD,CAAL,CACCE,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEOG,IAAD,IAAU;AACZC,MAAAA,IAAI,GAAGD,IAAI,CAACE,GAAL,CAAS,CAACC,SAAD,EAAYC,KAAZ,MAAqB;AACjCC,QAAAA,EAAE,EAACD,KAD8B;AAEjCT,QAAAA,IAAI,EAACQ,SAAS,CAACR,IAFkB;AAGjCW,QAAAA,KAAK,EAACH,SAAS,CAACG;AAHiB,OAArB,CAAT,CAAP;AAKC,KARL,EASCC,KATD,CASOf,OAAO,CAACC,GATf;AAUH;;AAGDe,EAAAA,MAAM,GAAG;AACL,SAAKjB,WAAL;AACA,wBACI,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sEAAkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlD,OAAyD,KAAKG,KAAL,CAAWC,IAApE,CADA,eAEA,oBAAC,QAAD;AACI,MAAA,OAAO,EAAIT,OADf;AAEI,MAAA,IAAI,EAAIG,iBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,CADJ;AAUH;;AA5BqC;;AA8B1C,eAAeC,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport ItemList from '../../components/ItemList';\n\nconst headers = [\n    {\n      key: \"word\",\n      header: \"word\",\n    },\n    {\n      key: \"score\",\n      header: \"score\",\n    }\n  ];\n\nrowsToBeDisplayed = []\n\nclass WordDisplay extends React.Component {\n    getWordList (){\n        console.log(\"getting synonyms for word \"+this.props.word)\n        fetch('https://api.datamuse.com/words?ml='+this.props.word)\n        .then(res => res.json())\n        .then((data) => {\n            rows = data.map((dataPoint, index)=>({\n                id:index,\n                word:dataPoint.word,\n                score:dataPoint.score,\n            }));\n            })\n        .catch(console.log)\n    }\n    \n\n    render (){\n        this.getWordList()\n        return (\n            <> \n            <h3>This is the word display element for the word:<br/> {this.props.word}</h3>\n            <ItemList\n                headers = {headers}\n                rows = {rowsToBeDisplayed}\n            />\n\n            </>\n        );\n    }\n}\nexport default WordDisplay;"]},"metadata":{},"sourceType":"module"}