{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst document_1 = require(\"../document\");\n\nconst graphql_1 = require(\"graphql\");\n\nexports.apolloClientSchema = `#graphql\n\"\"\"\nDirect the client to resolve this field locally, either from the cache or local resolvers.\n\"\"\"\ndirective @client(\n  \"\"\"\n  When true, the client will never use the cache for this value. See\n  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true\n  \"\"\"\n  always: Boolean\n) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT\n\n\"\"\"\nExport this locally resolved field as a variable to be used in the remainder of this query. See\nhttps://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables\n\"\"\"\ndirective @export(\n  \"\"\"\n  The variable name to export this field as.\n  \"\"\"\n  as: String!\n) on FIELD\n\n\"\"\"\nSpecify a custom store key for this result. See\nhttps://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive\n\"\"\"\ndirective @connection(\n  \"\"\"\n  Specify the store key.\n  \"\"\"\n  key: String!\n  \"\"\"\n  An array of query argument names to include in the generated custom store key.\n  \"\"\"\n  filter: [String!]\n) on FIELD\n`;\nexports.apolloClientSchemaDocument = new document_1.GraphQLDocument(new graphql_1.Source(exports.apolloClientSchema));","map":{"version":3,"sources":["../../src/project/defaultClientSchema.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,UAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEa,OAAA,CAAA,kBAAA,GAAqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAArB;AAuCA,OAAA,CAAA,0BAAA,GAA6B,IAAI,UAAA,CAAA,eAAJ,CACxC,IAAI,SAAA,CAAA,MAAJ,CAAW,OAAA,CAAA,kBAAX,CADwC,CAA7B","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst document_1 = require(\"../document\");\nconst graphql_1 = require(\"graphql\");\nexports.apolloClientSchema = `#graphql\n\"\"\"\nDirect the client to resolve this field locally, either from the cache or local resolvers.\n\"\"\"\ndirective @client(\n  \"\"\"\n  When true, the client will never use the cache for this value. See\n  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true\n  \"\"\"\n  always: Boolean\n) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT\n\n\"\"\"\nExport this locally resolved field as a variable to be used in the remainder of this query. See\nhttps://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables\n\"\"\"\ndirective @export(\n  \"\"\"\n  The variable name to export this field as.\n  \"\"\"\n  as: String!\n) on FIELD\n\n\"\"\"\nSpecify a custom store key for this result. See\nhttps://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive\n\"\"\"\ndirective @connection(\n  \"\"\"\n  Specify the store key.\n  \"\"\"\n  key: String!\n  \"\"\"\n  An array of query argument names to include in the generated custom store key.\n  \"\"\"\n  filter: [String!]\n) on FIELD\n`;\nexports.apolloClientSchemaDocument = new document_1.GraphQLDocument(new graphql_1.Source(exports.apolloClientSchema));\n//# sourceMappingURL=defaultClientSchema.js.map"]},"metadata":{},"sourceType":"script"}