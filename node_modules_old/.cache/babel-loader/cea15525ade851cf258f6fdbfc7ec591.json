{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst base_1 = require(\"./base\");\n\nconst graphql_1 = require(\"graphql\");\n\nconst vscode_languageserver_1 = require(\"vscode-languageserver\");\n\nconst source_1 = require(\"../utilities/source\");\n\nconst format_1 = require(\"../format\");\n\nconst fileSet_1 = require(\"../fileSet\");\n\nconst defaultClientSchema_1 = require(\"./defaultClientSchema\");\n\nconst graphql_2 = require(\"../utilities/graphql\");\n\nconst validation_1 = require(\"../errors/validation\");\n\nconst diagnostics_1 = require(\"../diagnostics\");\n\nfunction schemaHasASTNodes(schema) {\n  const queryType = schema && schema.getQueryType();\n  return !!(queryType && queryType.astNode);\n}\n\nfunction augmentSchemaWithGeneratedSDLIfNeeded(schema) {\n  if (schemaHasASTNodes(schema)) return schema;\n  const sdl = graphql_1.printSchema(schema);\n  return graphql_1.buildSchema(new graphql_1.Source(sdl, `graphql-schema:/schema.graphql?${encodeURIComponent(sdl)}`));\n}\n\nfunction isClientProject(project) {\n  return project instanceof GraphQLClientProject;\n}\n\nexports.isClientProject = isClientProject;\n\nclass GraphQLClientProject extends base_1.GraphQLProject {\n  constructor({\n    config,\n    loadingHandler,\n    rootURI,\n    clientIdentity\n  }) {\n    const fileSet = new fileSet_1.FileSet({\n      rootURI: config.configDirURI || rootURI,\n      includes: [...config.client.includes, \".env\", \"apollo.config.js\"],\n      excludes: config.client.excludes,\n      configURI: config.configURI\n    });\n    super({\n      config,\n      fileSet,\n      loadingHandler,\n      clientIdentity\n    });\n    this.rootURI = rootURI;\n    this.serviceID = config.graph;\n\n    const filterConfigAndEnvFiles = path => !(path.includes(\"apollo.config\") || path.includes(\".env\") || config.configURI && path === config.configURI.fsPath);\n\n    if (fileSet.allFiles().filter(filterConfigAndEnvFiles).length === 0) {\n      console.warn(\"⚠️  It looks like there are 0 files associated with this Apollo Project. \" + \"This may be because you don't have any files yet, or your includes/excludes \" + \"fields are configured incorrectly, and Apollo can't find your files. \" + \"For help configuring Apollo projects, see this guide: https://go.apollo.dev/t/config\");\n    }\n\n    const {\n      validationRules\n    } = this.config.client;\n\n    if (typeof validationRules === \"function\") {\n      this._validationRules = validation_1.defaultValidationRules.filter(validationRules);\n    } else {\n      this._validationRules = validationRules;\n    }\n\n    this.loadEngineData();\n  }\n\n  get displayName() {\n    return this.config.graph || \"Unnamed Project\";\n  }\n\n  initialize() {\n    return [this.scanAllIncludedFiles(), this.loadServiceSchema()];\n  }\n\n  getProjectStats() {\n    const filterTypes = type => !/^__|Boolean|ID|Int|String|Float/.test(type);\n\n    const serviceTypes = this.serviceSchema ? Object.keys(this.serviceSchema.getTypeMap()).filter(filterTypes).length : 0;\n    const totalTypes = this.schema ? Object.keys(this.schema.getTypeMap()).filter(filterTypes).length : 0;\n    return {\n      type: \"client\",\n      serviceId: this.serviceID,\n      types: {\n        service: serviceTypes,\n        client: totalTypes - serviceTypes,\n        total: totalTypes\n      },\n      tag: this.config.variant,\n      loaded: Boolean(this.schema || this.serviceSchema),\n      lastFetch: this.lastLoadDate\n    };\n  }\n\n  onDecorations(handler) {\n    this._onDecorations = handler;\n  }\n\n  onSchemaTags(handler) {\n    this._onSchemaTags = handler;\n  }\n\n  async updateSchemaTag(tag) {\n    await this.loadServiceSchema(tag);\n    this.invalidate();\n  }\n\n  async loadServiceSchema(tag) {\n    await this.loadingHandler.handle(`Loading schema for ${this.displayName}`, (async () => {\n      this.serviceSchema = augmentSchemaWithGeneratedSDLIfNeeded((await this.schemaProvider.resolveSchema({\n        tag: tag || this.config.variant,\n        force: true\n      })));\n      this.schema = graphql_1.extendSchema(this.serviceSchema, this.clientSchema);\n    })());\n  }\n\n  async resolveSchema() {\n    if (!this.schema) throw new Error();\n    return this.schema;\n  }\n\n  get clientSchema() {\n    return {\n      kind: graphql_1.Kind.DOCUMENT,\n      definitions: [...this.typeSystemDefinitionsAndExtensions, ...this.missingApolloClientDirectives]\n    };\n  }\n\n  get missingApolloClientDirectives() {\n    const {\n      serviceSchema\n    } = this;\n    const serviceDirectives = serviceSchema ? serviceSchema.getDirectives().map(directive => directive.name) : [];\n    const clientDirectives = this.typeSystemDefinitionsAndExtensions.filter(graphql_2.isDirectiveDefinitionNode).map(def => def.name.value);\n    const existingDirectives = serviceDirectives.concat(clientDirectives);\n    const apolloAst = defaultClientSchema_1.apolloClientSchemaDocument.ast;\n    if (!apolloAst) return [];\n    const apolloDirectives = apolloAst.definitions.filter(graphql_2.isDirectiveDefinitionNode).map(def => def.name.value);\n\n    for (const existingDirective of existingDirectives) {\n      if (apolloDirectives.includes(existingDirective)) {\n        return [];\n      }\n    }\n\n    return apolloAst.definitions;\n  }\n\n  addClientMetadataToSchemaNodes() {\n    const {\n      schema,\n      serviceSchema\n    } = this;\n    if (!schema || !serviceSchema) return;\n    graphql_1.visit(this.clientSchema, {\n      ObjectTypeExtension(node) {\n        const type = schema.getType(node.name.value);\n        const {\n          fields\n        } = node;\n        if (!fields || !type) return;\n        const localInfo = type.clientSchema || {};\n        localInfo.localFields = [...(localInfo.localFields || []), ...fields.map(field => field.name.value)];\n        type.clientSchema = localInfo;\n      }\n\n    });\n  }\n\n  async validate() {\n    if (!this._onDiagnostics) return;\n    if (!this.serviceSchema) return;\n    const diagnosticSet = new diagnostics_1.DiagnosticSet();\n\n    try {\n      this.schema = graphql_1.extendSchema(this.serviceSchema, this.clientSchema);\n      this.addClientMetadataToSchemaNodes();\n    } catch (error) {\n      if (error instanceof graphql_1.GraphQLError) {\n        const uri = error.source && error.source.name;\n\n        if (uri) {\n          diagnosticSet.addDiagnostics(uri, diagnostics_1.diagnosticsFromError(error, vscode_languageserver_1.DiagnosticSeverity.Error, \"Validation\"));\n        }\n      } else {\n        console.error(error);\n      }\n\n      this.schema = this.serviceSchema;\n    }\n\n    const fragments = this.fragments;\n\n    for (const [uri, documentsForFile] of this.documentsByFile) {\n      for (const document of documentsForFile) {\n        diagnosticSet.addDiagnostics(uri, diagnostics_1.collectExecutableDefinitionDiagnositics(this.schema, document, fragments, this._validationRules));\n      }\n    }\n\n    for (const [uri, diagnostics] of diagnosticSet.entries()) {\n      this._onDiagnostics({\n        uri,\n        diagnostics\n      });\n    }\n\n    this.diagnosticSet = diagnosticSet;\n    this.generateDecorations();\n  }\n\n  async loadEngineData() {\n    const engineClient = this.engineClient;\n    if (!engineClient) return;\n    const serviceID = this.serviceID;\n    if (!serviceID) return;\n    await this.loadingHandler.handle(`Loading Apollo Graph Manager data for ${this.displayName}`, (async () => {\n      try {\n        const {\n          schemaTags,\n          fieldStats\n        } = await engineClient.loadSchemaTagsAndFieldStats(serviceID);\n        this._onSchemaTags && this._onSchemaTags([serviceID, schemaTags]);\n        this.fieldStats = fieldStats;\n        this.lastLoadDate = +new Date();\n        this.generateDecorations();\n      } catch (e) {\n        console.error(e);\n      }\n    })());\n  }\n\n  generateDecorations() {\n    if (!this._onDecorations) return;\n    if (!this.schema) return;\n    const decorations = [];\n\n    for (const [uri, queryDocumentsForFile] of this.documentsByFile) {\n      for (const queryDocument of queryDocumentsForFile) {\n        if (queryDocument.ast && this.fieldStats) {\n          const fieldStats = this.fieldStats;\n          const typeInfo = new graphql_1.TypeInfo(this.schema);\n          graphql_1.visit(queryDocument.ast, graphql_1.visitWithTypeInfo(typeInfo, {\n            enter: node => {\n              if (node.kind == \"Field\" && typeInfo.getParentType()) {\n                const parentName = typeInfo.getParentType().name;\n                const parentEngineStat = fieldStats.get(parentName);\n                const engineStat = parentEngineStat ? parentEngineStat.get(node.name.value) : undefined;\n\n                if (engineStat && engineStat > 1) {\n                  decorations.push({\n                    document: uri,\n                    message: `~${format_1.formatMS(engineStat, 0)}`,\n                    range: source_1.rangeForASTNode(node)\n                  });\n                }\n              }\n            }\n          }));\n        }\n      }\n    }\n\n    this._onDecorations(decorations);\n  }\n\n  get fragments() {\n    const fragments = Object.create(null);\n\n    for (const document of this.documents) {\n      if (!document.ast) continue;\n\n      for (const definition of document.ast.definitions) {\n        if (definition.kind === graphql_1.Kind.FRAGMENT_DEFINITION) {\n          fragments[definition.name.value] = definition;\n        }\n      }\n    }\n\n    return fragments;\n  }\n\n  get operations() {\n    const operations = Object.create(null);\n\n    for (const document of this.documents) {\n      if (!document.ast) continue;\n\n      for (const definition of document.ast.definitions) {\n        if (definition.kind === graphql_1.Kind.OPERATION_DEFINITION) {\n          if (!definition.name) {\n            throw new graphql_1.GraphQLError(\"Apollo does not support anonymous operations\", [definition]);\n          }\n\n          operations[definition.name.value] = definition;\n        }\n      }\n    }\n\n    return operations;\n  }\n\n  get mergedOperationsAndFragments() {\n    return graphql_1.separateOperations({\n      kind: graphql_1.Kind.DOCUMENT,\n      definitions: [...Object.values(this.fragments), ...Object.values(this.operations)]\n    });\n  }\n\n  get mergedOperationsAndFragmentsForService() {\n    const {\n      clientOnlyDirectives,\n      clientSchemaDirectives,\n      addTypename\n    } = this.config.client;\n    const current = this.mergedOperationsAndFragments;\n    if ((!clientOnlyDirectives || !clientOnlyDirectives.length) && (!clientSchemaDirectives || !clientSchemaDirectives.length)) return current;\n    const filtered = Object.create(null);\n\n    for (const operationName in current) {\n      const document = current[operationName];\n      let serviceOnly = graphql_2.removeDirectiveAnnotatedFields(graphql_2.removeDirectives(document, clientOnlyDirectives), clientSchemaDirectives);\n      if (addTypename) serviceOnly = graphql_2.withTypenameFieldAddedWhereNeeded(serviceOnly);\n\n      if (serviceOnly.definitions.filter(Boolean).length) {\n        filtered[operationName] = serviceOnly;\n      }\n    }\n\n    return filtered;\n  }\n\n  getOperationFieldsFromFieldDefinition(fieldName, parent) {\n    if (!this.schema || !parent) return [];\n    const fields = [];\n    const typeInfo = new graphql_1.TypeInfo(this.schema);\n\n    for (const document of this.documents) {\n      if (!document.ast) continue;\n      graphql_1.visit(document.ast, graphql_1.visitWithTypeInfo(typeInfo, {\n        Field(node) {\n          if (node.name.value !== fieldName) return;\n          const parentType = typeInfo.getParentType();\n\n          if (parentType && parentType.name === parent.name.value) {\n            fields.push(node);\n          }\n\n          return;\n        }\n\n      }));\n    }\n\n    return fields;\n  }\n\n  fragmentSpreadsForFragment(fragmentName) {\n    const fragmentSpreads = [];\n\n    for (const document of this.documents) {\n      if (!document.ast) continue;\n      graphql_1.visit(document.ast, {\n        FragmentSpread(node) {\n          if (node.name.value === fragmentName) {\n            fragmentSpreads.push(node);\n          }\n        }\n\n      });\n    }\n\n    return fragmentSpreads;\n  }\n\n}\n\nexports.GraphQLClientProject = GraphQLClientProject;","map":{"version":3,"sources":["../../src/project/client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = require(\"./base\");\nconst graphql_1 = require(\"graphql\");\nconst vscode_languageserver_1 = require(\"vscode-languageserver\");\nconst source_1 = require(\"../utilities/source\");\nconst format_1 = require(\"../format\");\nconst fileSet_1 = require(\"../fileSet\");\nconst defaultClientSchema_1 = require(\"./defaultClientSchema\");\nconst graphql_2 = require(\"../utilities/graphql\");\nconst validation_1 = require(\"../errors/validation\");\nconst diagnostics_1 = require(\"../diagnostics\");\nfunction schemaHasASTNodes(schema) {\n    const queryType = schema && schema.getQueryType();\n    return !!(queryType && queryType.astNode);\n}\nfunction augmentSchemaWithGeneratedSDLIfNeeded(schema) {\n    if (schemaHasASTNodes(schema))\n        return schema;\n    const sdl = graphql_1.printSchema(schema);\n    return graphql_1.buildSchema(new graphql_1.Source(sdl, `graphql-schema:/schema.graphql?${encodeURIComponent(sdl)}`));\n}\nfunction isClientProject(project) {\n    return project instanceof GraphQLClientProject;\n}\nexports.isClientProject = isClientProject;\nclass GraphQLClientProject extends base_1.GraphQLProject {\n    constructor({ config, loadingHandler, rootURI, clientIdentity }) {\n        const fileSet = new fileSet_1.FileSet({\n            rootURI: config.configDirURI || rootURI,\n            includes: [...config.client.includes, \".env\", \"apollo.config.js\"],\n            excludes: config.client.excludes,\n            configURI: config.configURI\n        });\n        super({ config, fileSet, loadingHandler, clientIdentity });\n        this.rootURI = rootURI;\n        this.serviceID = config.graph;\n        const filterConfigAndEnvFiles = (path) => !(path.includes(\"apollo.config\") ||\n            path.includes(\".env\") ||\n            (config.configURI && path === config.configURI.fsPath));\n        if (fileSet.allFiles().filter(filterConfigAndEnvFiles).length === 0) {\n            console.warn(\"⚠️  It looks like there are 0 files associated with this Apollo Project. \" +\n                \"This may be because you don't have any files yet, or your includes/excludes \" +\n                \"fields are configured incorrectly, and Apollo can't find your files. \" +\n                \"For help configuring Apollo projects, see this guide: https://go.apollo.dev/t/config\");\n        }\n        const { validationRules } = this.config.client;\n        if (typeof validationRules === \"function\") {\n            this._validationRules = validation_1.defaultValidationRules.filter(validationRules);\n        }\n        else {\n            this._validationRules = validationRules;\n        }\n        this.loadEngineData();\n    }\n    get displayName() {\n        return this.config.graph || \"Unnamed Project\";\n    }\n    initialize() {\n        return [this.scanAllIncludedFiles(), this.loadServiceSchema()];\n    }\n    getProjectStats() {\n        const filterTypes = (type) => !/^__|Boolean|ID|Int|String|Float/.test(type);\n        const serviceTypes = this.serviceSchema\n            ? Object.keys(this.serviceSchema.getTypeMap()).filter(filterTypes).length\n            : 0;\n        const totalTypes = this.schema\n            ? Object.keys(this.schema.getTypeMap()).filter(filterTypes).length\n            : 0;\n        return {\n            type: \"client\",\n            serviceId: this.serviceID,\n            types: {\n                service: serviceTypes,\n                client: totalTypes - serviceTypes,\n                total: totalTypes\n            },\n            tag: this.config.variant,\n            loaded: Boolean(this.schema || this.serviceSchema),\n            lastFetch: this.lastLoadDate\n        };\n    }\n    onDecorations(handler) {\n        this._onDecorations = handler;\n    }\n    onSchemaTags(handler) {\n        this._onSchemaTags = handler;\n    }\n    async updateSchemaTag(tag) {\n        await this.loadServiceSchema(tag);\n        this.invalidate();\n    }\n    async loadServiceSchema(tag) {\n        await this.loadingHandler.handle(`Loading schema for ${this.displayName}`, (async () => {\n            this.serviceSchema = augmentSchemaWithGeneratedSDLIfNeeded(await this.schemaProvider.resolveSchema({\n                tag: tag || this.config.variant,\n                force: true\n            }));\n            this.schema = graphql_1.extendSchema(this.serviceSchema, this.clientSchema);\n        })());\n    }\n    async resolveSchema() {\n        if (!this.schema)\n            throw new Error();\n        return this.schema;\n    }\n    get clientSchema() {\n        return {\n            kind: graphql_1.Kind.DOCUMENT,\n            definitions: [\n                ...this.typeSystemDefinitionsAndExtensions,\n                ...this.missingApolloClientDirectives\n            ]\n        };\n    }\n    get missingApolloClientDirectives() {\n        const { serviceSchema } = this;\n        const serviceDirectives = serviceSchema\n            ? serviceSchema.getDirectives().map(directive => directive.name)\n            : [];\n        const clientDirectives = this.typeSystemDefinitionsAndExtensions\n            .filter(graphql_2.isDirectiveDefinitionNode)\n            .map(def => def.name.value);\n        const existingDirectives = serviceDirectives.concat(clientDirectives);\n        const apolloAst = defaultClientSchema_1.apolloClientSchemaDocument.ast;\n        if (!apolloAst)\n            return [];\n        const apolloDirectives = apolloAst.definitions\n            .filter(graphql_2.isDirectiveDefinitionNode)\n            .map(def => def.name.value);\n        for (const existingDirective of existingDirectives) {\n            if (apolloDirectives.includes(existingDirective)) {\n                return [];\n            }\n        }\n        return apolloAst.definitions;\n    }\n    addClientMetadataToSchemaNodes() {\n        const { schema, serviceSchema } = this;\n        if (!schema || !serviceSchema)\n            return;\n        graphql_1.visit(this.clientSchema, {\n            ObjectTypeExtension(node) {\n                const type = schema.getType(node.name.value);\n                const { fields } = node;\n                if (!fields || !type)\n                    return;\n                const localInfo = type.clientSchema || {};\n                localInfo.localFields = [\n                    ...(localInfo.localFields || []),\n                    ...fields.map(field => field.name.value)\n                ];\n                type.clientSchema = localInfo;\n            }\n        });\n    }\n    async validate() {\n        if (!this._onDiagnostics)\n            return;\n        if (!this.serviceSchema)\n            return;\n        const diagnosticSet = new diagnostics_1.DiagnosticSet();\n        try {\n            this.schema = graphql_1.extendSchema(this.serviceSchema, this.clientSchema);\n            this.addClientMetadataToSchemaNodes();\n        }\n        catch (error) {\n            if (error instanceof graphql_1.GraphQLError) {\n                const uri = error.source && error.source.name;\n                if (uri) {\n                    diagnosticSet.addDiagnostics(uri, diagnostics_1.diagnosticsFromError(error, vscode_languageserver_1.DiagnosticSeverity.Error, \"Validation\"));\n                }\n            }\n            else {\n                console.error(error);\n            }\n            this.schema = this.serviceSchema;\n        }\n        const fragments = this.fragments;\n        for (const [uri, documentsForFile] of this.documentsByFile) {\n            for (const document of documentsForFile) {\n                diagnosticSet.addDiagnostics(uri, diagnostics_1.collectExecutableDefinitionDiagnositics(this.schema, document, fragments, this._validationRules));\n            }\n        }\n        for (const [uri, diagnostics] of diagnosticSet.entries()) {\n            this._onDiagnostics({ uri, diagnostics });\n        }\n        this.diagnosticSet = diagnosticSet;\n        this.generateDecorations();\n    }\n    async loadEngineData() {\n        const engineClient = this.engineClient;\n        if (!engineClient)\n            return;\n        const serviceID = this.serviceID;\n        if (!serviceID)\n            return;\n        await this.loadingHandler.handle(`Loading Apollo Graph Manager data for ${this.displayName}`, (async () => {\n            try {\n                const { schemaTags, fieldStats } = await engineClient.loadSchemaTagsAndFieldStats(serviceID);\n                this._onSchemaTags && this._onSchemaTags([serviceID, schemaTags]);\n                this.fieldStats = fieldStats;\n                this.lastLoadDate = +new Date();\n                this.generateDecorations();\n            }\n            catch (e) {\n                console.error(e);\n            }\n        })());\n    }\n    generateDecorations() {\n        if (!this._onDecorations)\n            return;\n        if (!this.schema)\n            return;\n        const decorations = [];\n        for (const [uri, queryDocumentsForFile] of this.documentsByFile) {\n            for (const queryDocument of queryDocumentsForFile) {\n                if (queryDocument.ast && this.fieldStats) {\n                    const fieldStats = this.fieldStats;\n                    const typeInfo = new graphql_1.TypeInfo(this.schema);\n                    graphql_1.visit(queryDocument.ast, graphql_1.visitWithTypeInfo(typeInfo, {\n                        enter: node => {\n                            if (node.kind == \"Field\" && typeInfo.getParentType()) {\n                                const parentName = typeInfo.getParentType().name;\n                                const parentEngineStat = fieldStats.get(parentName);\n                                const engineStat = parentEngineStat\n                                    ? parentEngineStat.get(node.name.value)\n                                    : undefined;\n                                if (engineStat && engineStat > 1) {\n                                    decorations.push({\n                                        document: uri,\n                                        message: `~${format_1.formatMS(engineStat, 0)}`,\n                                        range: source_1.rangeForASTNode(node)\n                                    });\n                                }\n                            }\n                        }\n                    }));\n                }\n            }\n        }\n        this._onDecorations(decorations);\n    }\n    get fragments() {\n        const fragments = Object.create(null);\n        for (const document of this.documents) {\n            if (!document.ast)\n                continue;\n            for (const definition of document.ast.definitions) {\n                if (definition.kind === graphql_1.Kind.FRAGMENT_DEFINITION) {\n                    fragments[definition.name.value] = definition;\n                }\n            }\n        }\n        return fragments;\n    }\n    get operations() {\n        const operations = Object.create(null);\n        for (const document of this.documents) {\n            if (!document.ast)\n                continue;\n            for (const definition of document.ast.definitions) {\n                if (definition.kind === graphql_1.Kind.OPERATION_DEFINITION) {\n                    if (!definition.name) {\n                        throw new graphql_1.GraphQLError(\"Apollo does not support anonymous operations\", [definition]);\n                    }\n                    operations[definition.name.value] = definition;\n                }\n            }\n        }\n        return operations;\n    }\n    get mergedOperationsAndFragments() {\n        return graphql_1.separateOperations({\n            kind: graphql_1.Kind.DOCUMENT,\n            definitions: [\n                ...Object.values(this.fragments),\n                ...Object.values(this.operations)\n            ]\n        });\n    }\n    get mergedOperationsAndFragmentsForService() {\n        const { clientOnlyDirectives, clientSchemaDirectives, addTypename } = this.config.client;\n        const current = this.mergedOperationsAndFragments;\n        if ((!clientOnlyDirectives || !clientOnlyDirectives.length) &&\n            (!clientSchemaDirectives || !clientSchemaDirectives.length))\n            return current;\n        const filtered = Object.create(null);\n        for (const operationName in current) {\n            const document = current[operationName];\n            let serviceOnly = graphql_2.removeDirectiveAnnotatedFields(graphql_2.removeDirectives(document, clientOnlyDirectives), clientSchemaDirectives);\n            if (addTypename)\n                serviceOnly = graphql_2.withTypenameFieldAddedWhereNeeded(serviceOnly);\n            if (serviceOnly.definitions.filter(Boolean).length) {\n                filtered[operationName] = serviceOnly;\n            }\n        }\n        return filtered;\n    }\n    getOperationFieldsFromFieldDefinition(fieldName, parent) {\n        if (!this.schema || !parent)\n            return [];\n        const fields = [];\n        const typeInfo = new graphql_1.TypeInfo(this.schema);\n        for (const document of this.documents) {\n            if (!document.ast)\n                continue;\n            graphql_1.visit(document.ast, graphql_1.visitWithTypeInfo(typeInfo, {\n                Field(node) {\n                    if (node.name.value !== fieldName)\n                        return;\n                    const parentType = typeInfo.getParentType();\n                    if (parentType && parentType.name === parent.name.value) {\n                        fields.push(node);\n                    }\n                    return;\n                }\n            }));\n        }\n        return fields;\n    }\n    fragmentSpreadsForFragment(fragmentName) {\n        const fragmentSpreads = [];\n        for (const document of this.documents) {\n            if (!document.ast)\n                continue;\n            graphql_1.visit(document.ast, {\n                FragmentSpread(node) {\n                    if (node.name.value === fragmentName) {\n                        fragmentSpreads.push(node);\n                    }\n                }\n            });\n        }\n        return fragmentSpreads;\n    }\n}\nexports.GraphQLClientProject = GraphQLClientProject;\n//# sourceMappingURL=client.js.map"]},"metadata":{},"sourceType":"script"}