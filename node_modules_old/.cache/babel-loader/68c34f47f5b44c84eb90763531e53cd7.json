{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SEVERITY = undefined;\nexports.getDiagnostics = getDiagnostics;\nexports.validateQuery = validateQuery;\nexports.getRange = getRange;\n\nvar _assert = require('assert');\n\nvar _assert2 = _interopRequireDefault(_assert);\n\nvar _graphql = require('graphql');\n\nvar _graphqlLanguageServiceParser = require('@apollographql/graphql-language-service-parser');\n\nvar _graphqlLanguageServiceUtils = require('@apollographql/graphql-language-service-utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n *  Copyright (c) Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  \n */\n\n\nvar SEVERITY = exports.SEVERITY = {\n  ERROR: 1,\n  WARNING: 2,\n  INFORMATION: 3,\n  HINT: 4\n};\n\nfunction getDiagnostics(query) {\n  var schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var customRules = arguments[2];\n  var isRelayCompatMode = arguments[3];\n  var ast = null;\n\n  try {\n    ast = (0, _graphql.parse)(query);\n  } catch (error) {\n    var range = getRange(error.locations[0], query);\n    return [{\n      severity: SEVERITY.ERROR,\n      message: error.message,\n      source: 'GraphQL: Syntax',\n      range: range\n    }];\n  }\n\n  return validateQuery(ast, schema, customRules, isRelayCompatMode);\n}\n\nfunction validateQuery(ast) {\n  var schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var customRules = arguments[2];\n  var isRelayCompatMode = arguments[3]; // We cannot validate the query unless a schema is provided.\n\n  if (!schema) {\n    return [];\n  }\n\n  var validationErrorAnnotations = mapCat((0, _graphqlLanguageServiceUtils.validateWithCustomRules)(schema, ast, customRules, isRelayCompatMode), function (error) {\n    return annotations(error, SEVERITY.ERROR, 'Validation');\n  }); // Note: findDeprecatedUsages was added in graphql@0.9.0, but we want to\n  // support older versions of graphql-js.\n\n  var deprecationWarningAnnotations = !_graphql.findDeprecatedUsages ? [] : mapCat((0, _graphql.findDeprecatedUsages)(schema, ast), function (error) {\n    return annotations(error, SEVERITY.WARNING, 'Deprecation');\n  });\n  return validationErrorAnnotations.concat(deprecationWarningAnnotations);\n} // General utility for map-cating (aka flat-mapping).\n\n\nfunction mapCat(array, mapper) {\n  return Array.prototype.concat.apply([], array.map(mapper));\n}\n\nfunction annotations(error, severity, type) {\n  if (!error.nodes) {\n    return [];\n  }\n\n  return error.nodes.map(function (node) {\n    var highlightNode = node.kind !== 'Variable' && node.name ? node.name : node.variable ? node.variable : node;\n    (0, _assert2.default)(error.locations, 'GraphQL validation error requires locations.');\n    var loc = error.locations[0];\n    var highlightLoc = getLocation(highlightNode);\n    var end = loc.column + (highlightLoc.end - highlightLoc.start);\n    return {\n      source: 'GraphQL: ' + type,\n      message: error.message,\n      severity: severity,\n      range: new _graphqlLanguageServiceUtils.Range(new _graphqlLanguageServiceUtils.Position(loc.line - 1, loc.column - 1), new _graphqlLanguageServiceUtils.Position(loc.line - 1, end))\n    };\n  });\n}\n\nfunction getRange(location, queryText) {\n  var parser = (0, _graphqlLanguageServiceParser.onlineParser)();\n  var state = parser.startState();\n  var lines = queryText.split('\\n');\n  (0, _assert2.default)(lines.length >= location.line, 'Query text must have more lines than where the error happened');\n  var stream = null;\n\n  for (var i = 0; i < location.line; i++) {\n    stream = new _graphqlLanguageServiceParser.CharacterStream(lines[i]);\n\n    while (!stream.eol()) {\n      var style = parser.token(stream, state);\n\n      if (style === 'invalidchar') {\n        break;\n      }\n    }\n  }\n\n  (0, _assert2.default)(stream, 'Expected Parser stream to be available.');\n  var line = location.line - 1;\n  var start = stream.getStartOfToken();\n  var end = stream.getCurrentPosition();\n  return new _graphqlLanguageServiceUtils.Range(new _graphqlLanguageServiceUtils.Position(line, start), new _graphqlLanguageServiceUtils.Position(line, end));\n}\n/**\n * Get location info from a node in a type-safe way.\n *\n * The only way a node could not have a location is if we initialized the parser\n * (and therefore the lexer) with the `noLocation` option, but we always\n * call `parse` without options above.\n */\n\n\nfunction getLocation(node) {\n  var typeCastedNode = node;\n  var location = typeCastedNode.loc;\n  (0, _assert2.default)(location, 'Expected ASTNode to have a location.');\n  return location;\n}","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/@apollographql/graphql-language-service-interface/dist/getDiagnostics.js"],"names":["Object","defineProperty","exports","value","SEVERITY","undefined","getDiagnostics","validateQuery","getRange","_assert","require","_assert2","_interopRequireDefault","_graphql","_graphqlLanguageServiceParser","_graphqlLanguageServiceUtils","obj","__esModule","default","ERROR","WARNING","INFORMATION","HINT","query","schema","arguments","length","customRules","isRelayCompatMode","ast","parse","error","range","locations","severity","message","source","validationErrorAnnotations","mapCat","validateWithCustomRules","annotations","deprecationWarningAnnotations","findDeprecatedUsages","concat","array","mapper","Array","prototype","apply","map","type","nodes","node","highlightNode","kind","name","variable","loc","highlightLoc","getLocation","end","column","start","Range","Position","line","location","queryText","parser","onlineParser","state","startState","lines","split","stream","i","CharacterStream","eol","style","token","getStartOfToken","getCurrentPosition","typeCastedNode"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,QAAR,GAAmBC,SAAnB;AACAH,OAAO,CAACI,cAAR,GAAyBA,cAAzB;AACAJ,OAAO,CAACK,aAAR,GAAwBA,aAAxB;AACAL,OAAO,CAACM,QAAR,GAAmBA,QAAnB;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,QAAD,CAArB;;AAEA,IAAIC,QAAQ,GAAGC,sBAAsB,CAACH,OAAD,CAArC;;AAEA,IAAII,QAAQ,GAAGH,OAAO,CAAC,SAAD,CAAtB;;AAEA,IAAII,6BAA6B,GAAGJ,OAAO,CAAC,gDAAD,CAA3C;;AAEA,IAAIK,4BAA4B,GAAGL,OAAO,CAAC,+CAAD,CAA1C;;AAEA,SAASE,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;AAE/F;;;;;;;;;;;AAUA,IAAIZ,QAAQ,GAAGF,OAAO,CAACE,QAAR,GAAmB;AAChCe,EAAAA,KAAK,EAAE,CADyB;AAEhCC,EAAAA,OAAO,EAAE,CAFuB;AAGhCC,EAAAA,WAAW,EAAE,CAHmB;AAIhCC,EAAAA,IAAI,EAAE;AAJ0B,CAAlC;;AAOA,SAAShB,cAAT,CAAwBiB,KAAxB,EAA+B;AAC7B,MAAIC,MAAM,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBpB,SAAzC,GAAqDoB,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAjF;AACA,MAAIE,WAAW,GAAGF,SAAS,CAAC,CAAD,CAA3B;AACA,MAAIG,iBAAiB,GAAGH,SAAS,CAAC,CAAD,CAAjC;AAEA,MAAII,GAAG,GAAG,IAAV;;AACA,MAAI;AACFA,IAAAA,GAAG,GAAG,CAAC,GAAGhB,QAAQ,CAACiB,KAAb,EAAoBP,KAApB,CAAN;AACD,GAFD,CAEE,OAAOQ,KAAP,EAAc;AACd,QAAIC,KAAK,GAAGxB,QAAQ,CAACuB,KAAK,CAACE,SAAN,CAAgB,CAAhB,CAAD,EAAqBV,KAArB,CAApB;AACA,WAAO,CAAC;AACNW,MAAAA,QAAQ,EAAE9B,QAAQ,CAACe,KADb;AAENgB,MAAAA,OAAO,EAAEJ,KAAK,CAACI,OAFT;AAGNC,MAAAA,MAAM,EAAE,iBAHF;AAINJ,MAAAA,KAAK,EAAEA;AAJD,KAAD,CAAP;AAMD;;AAED,SAAOzB,aAAa,CAACsB,GAAD,EAAML,MAAN,EAAcG,WAAd,EAA2BC,iBAA3B,CAApB;AACD;;AAED,SAASrB,aAAT,CAAuBsB,GAAvB,EAA4B;AAC1B,MAAIL,MAAM,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBpB,SAAzC,GAAqDoB,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAjF;AACA,MAAIE,WAAW,GAAGF,SAAS,CAAC,CAAD,CAA3B;AACA,MAAIG,iBAAiB,GAAGH,SAAS,CAAC,CAAD,CAAjC,CAH0B,CAK1B;;AACA,MAAI,CAACD,MAAL,EAAa;AACX,WAAO,EAAP;AACD;;AAED,MAAIa,0BAA0B,GAAGC,MAAM,CAAC,CAAC,GAAGvB,4BAA4B,CAACwB,uBAAjC,EAA0Df,MAA1D,EAAkEK,GAAlE,EAAuEF,WAAvE,EAAoFC,iBAApF,CAAD,EAAyG,UAAUG,KAAV,EAAiB;AAC/J,WAAOS,WAAW,CAACT,KAAD,EAAQ3B,QAAQ,CAACe,KAAjB,EAAwB,YAAxB,CAAlB;AACD,GAFsC,CAAvC,CAV0B,CAa1B;AACA;;AACA,MAAIsB,6BAA6B,GAAG,CAAC5B,QAAQ,CAAC6B,oBAAV,GAAiC,EAAjC,GAAsCJ,MAAM,CAAC,CAAC,GAAGzB,QAAQ,CAAC6B,oBAAb,EAAmClB,MAAnC,EAA2CK,GAA3C,CAAD,EAAkD,UAAUE,KAAV,EAAiB;AACjJ,WAAOS,WAAW,CAACT,KAAD,EAAQ3B,QAAQ,CAACgB,OAAjB,EAA0B,aAA1B,CAAlB;AACD,GAF+E,CAAhF;AAGA,SAAOiB,0BAA0B,CAACM,MAA3B,CAAkCF,6BAAlC,CAAP;AACD,C,CAED;;;AACA,SAASH,MAAT,CAAgBM,KAAhB,EAAuBC,MAAvB,EAA+B;AAC7B,SAAOC,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,CAAuBK,KAAvB,CAA6B,EAA7B,EAAiCJ,KAAK,CAACK,GAAN,CAAUJ,MAAV,CAAjC,CAAP;AACD;;AAED,SAASL,WAAT,CAAqBT,KAArB,EAA4BG,QAA5B,EAAsCgB,IAAtC,EAA4C;AAC1C,MAAI,CAACnB,KAAK,CAACoB,KAAX,EAAkB;AAChB,WAAO,EAAP;AACD;;AACD,SAAOpB,KAAK,CAACoB,KAAN,CAAYF,GAAZ,CAAgB,UAAUG,IAAV,EAAgB;AACrC,QAAIC,aAAa,GAAGD,IAAI,CAACE,IAAL,KAAc,UAAd,IAA4BF,IAAI,CAACG,IAAjC,GAAwCH,IAAI,CAACG,IAA7C,GAAoDH,IAAI,CAACI,QAAL,GAAgBJ,IAAI,CAACI,QAArB,GAAgCJ,IAAxG;AAEA,KAAC,GAAGzC,QAAQ,CAACO,OAAb,EAAsBa,KAAK,CAACE,SAA5B,EAAuC,8CAAvC;AACA,QAAIwB,GAAG,GAAG1B,KAAK,CAACE,SAAN,CAAgB,CAAhB,CAAV;AACA,QAAIyB,YAAY,GAAGC,WAAW,CAACN,aAAD,CAA9B;AACA,QAAIO,GAAG,GAAGH,GAAG,CAACI,MAAJ,IAAcH,YAAY,CAACE,GAAb,GAAmBF,YAAY,CAACI,KAA9C,CAAV;AACA,WAAO;AACL1B,MAAAA,MAAM,EAAE,cAAcc,IADjB;AAELf,MAAAA,OAAO,EAAEJ,KAAK,CAACI,OAFV;AAGLD,MAAAA,QAAQ,EAAEA,QAHL;AAILF,MAAAA,KAAK,EAAE,IAAIjB,4BAA4B,CAACgD,KAAjC,CAAuC,IAAIhD,4BAA4B,CAACiD,QAAjC,CAA0CP,GAAG,CAACQ,IAAJ,GAAW,CAArD,EAAwDR,GAAG,CAACI,MAAJ,GAAa,CAArE,CAAvC,EAAgH,IAAI9C,4BAA4B,CAACiD,QAAjC,CAA0CP,GAAG,CAACQ,IAAJ,GAAW,CAArD,EAAwDL,GAAxD,CAAhH;AAJF,KAAP;AAMD,GAbM,CAAP;AAcD;;AAED,SAASpD,QAAT,CAAkB0D,QAAlB,EAA4BC,SAA5B,EAAuC;AACrC,MAAIC,MAAM,GAAG,CAAC,GAAGtD,6BAA6B,CAACuD,YAAlC,GAAb;AACA,MAAIC,KAAK,GAAGF,MAAM,CAACG,UAAP,EAAZ;AACA,MAAIC,KAAK,GAAGL,SAAS,CAACM,KAAV,CAAgB,IAAhB,CAAZ;AAEA,GAAC,GAAG9D,QAAQ,CAACO,OAAb,EAAsBsD,KAAK,CAAC9C,MAAN,IAAgBwC,QAAQ,CAACD,IAA/C,EAAqD,+DAArD;AAEA,MAAIS,MAAM,GAAG,IAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,QAAQ,CAACD,IAA7B,EAAmCU,CAAC,EAApC,EAAwC;AACtCD,IAAAA,MAAM,GAAG,IAAI5D,6BAA6B,CAAC8D,eAAlC,CAAkDJ,KAAK,CAACG,CAAD,CAAvD,CAAT;;AACA,WAAO,CAACD,MAAM,CAACG,GAAP,EAAR,EAAsB;AACpB,UAAIC,KAAK,GAAGV,MAAM,CAACW,KAAP,CAAaL,MAAb,EAAqBJ,KAArB,CAAZ;;AACA,UAAIQ,KAAK,KAAK,aAAd,EAA6B;AAC3B;AACD;AACF;AACF;;AAED,GAAC,GAAGnE,QAAQ,CAACO,OAAb,EAAsBwD,MAAtB,EAA8B,yCAA9B;AAEA,MAAIT,IAAI,GAAGC,QAAQ,CAACD,IAAT,GAAgB,CAA3B;AACA,MAAIH,KAAK,GAAGY,MAAM,CAACM,eAAP,EAAZ;AACA,MAAIpB,GAAG,GAAGc,MAAM,CAACO,kBAAP,EAAV;AAEA,SAAO,IAAIlE,4BAA4B,CAACgD,KAAjC,CAAuC,IAAIhD,4BAA4B,CAACiD,QAAjC,CAA0CC,IAA1C,EAAgDH,KAAhD,CAAvC,EAA+F,IAAI/C,4BAA4B,CAACiD,QAAjC,CAA0CC,IAA1C,EAAgDL,GAAhD,CAA/F,CAAP;AACD;AAED;;;;;;;;;AAOA,SAASD,WAAT,CAAqBP,IAArB,EAA2B;AACzB,MAAI8B,cAAc,GAAG9B,IAArB;AACA,MAAIc,QAAQ,GAAGgB,cAAc,CAACzB,GAA9B;AACA,GAAC,GAAG9C,QAAQ,CAACO,OAAb,EAAsBgD,QAAtB,EAAgC,sCAAhC;AACA,SAAOA,QAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SEVERITY = undefined;\nexports.getDiagnostics = getDiagnostics;\nexports.validateQuery = validateQuery;\nexports.getRange = getRange;\n\nvar _assert = require('assert');\n\nvar _assert2 = _interopRequireDefault(_assert);\n\nvar _graphql = require('graphql');\n\nvar _graphqlLanguageServiceParser = require('@apollographql/graphql-language-service-parser');\n\nvar _graphqlLanguageServiceUtils = require('@apollographql/graphql-language-service-utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *  Copyright (c) Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  \n */\n\nvar SEVERITY = exports.SEVERITY = {\n  ERROR: 1,\n  WARNING: 2,\n  INFORMATION: 3,\n  HINT: 4\n};\n\nfunction getDiagnostics(query) {\n  var schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var customRules = arguments[2];\n  var isRelayCompatMode = arguments[3];\n\n  var ast = null;\n  try {\n    ast = (0, _graphql.parse)(query);\n  } catch (error) {\n    var range = getRange(error.locations[0], query);\n    return [{\n      severity: SEVERITY.ERROR,\n      message: error.message,\n      source: 'GraphQL: Syntax',\n      range: range\n    }];\n  }\n\n  return validateQuery(ast, schema, customRules, isRelayCompatMode);\n}\n\nfunction validateQuery(ast) {\n  var schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var customRules = arguments[2];\n  var isRelayCompatMode = arguments[3];\n\n  // We cannot validate the query unless a schema is provided.\n  if (!schema) {\n    return [];\n  }\n\n  var validationErrorAnnotations = mapCat((0, _graphqlLanguageServiceUtils.validateWithCustomRules)(schema, ast, customRules, isRelayCompatMode), function (error) {\n    return annotations(error, SEVERITY.ERROR, 'Validation');\n  });\n  // Note: findDeprecatedUsages was added in graphql@0.9.0, but we want to\n  // support older versions of graphql-js.\n  var deprecationWarningAnnotations = !_graphql.findDeprecatedUsages ? [] : mapCat((0, _graphql.findDeprecatedUsages)(schema, ast), function (error) {\n    return annotations(error, SEVERITY.WARNING, 'Deprecation');\n  });\n  return validationErrorAnnotations.concat(deprecationWarningAnnotations);\n}\n\n// General utility for map-cating (aka flat-mapping).\nfunction mapCat(array, mapper) {\n  return Array.prototype.concat.apply([], array.map(mapper));\n}\n\nfunction annotations(error, severity, type) {\n  if (!error.nodes) {\n    return [];\n  }\n  return error.nodes.map(function (node) {\n    var highlightNode = node.kind !== 'Variable' && node.name ? node.name : node.variable ? node.variable : node;\n\n    (0, _assert2.default)(error.locations, 'GraphQL validation error requires locations.');\n    var loc = error.locations[0];\n    var highlightLoc = getLocation(highlightNode);\n    var end = loc.column + (highlightLoc.end - highlightLoc.start);\n    return {\n      source: 'GraphQL: ' + type,\n      message: error.message,\n      severity: severity,\n      range: new _graphqlLanguageServiceUtils.Range(new _graphqlLanguageServiceUtils.Position(loc.line - 1, loc.column - 1), new _graphqlLanguageServiceUtils.Position(loc.line - 1, end))\n    };\n  });\n}\n\nfunction getRange(location, queryText) {\n  var parser = (0, _graphqlLanguageServiceParser.onlineParser)();\n  var state = parser.startState();\n  var lines = queryText.split('\\n');\n\n  (0, _assert2.default)(lines.length >= location.line, 'Query text must have more lines than where the error happened');\n\n  var stream = null;\n\n  for (var i = 0; i < location.line; i++) {\n    stream = new _graphqlLanguageServiceParser.CharacterStream(lines[i]);\n    while (!stream.eol()) {\n      var style = parser.token(stream, state);\n      if (style === 'invalidchar') {\n        break;\n      }\n    }\n  }\n\n  (0, _assert2.default)(stream, 'Expected Parser stream to be available.');\n\n  var line = location.line - 1;\n  var start = stream.getStartOfToken();\n  var end = stream.getCurrentPosition();\n\n  return new _graphqlLanguageServiceUtils.Range(new _graphqlLanguageServiceUtils.Position(line, start), new _graphqlLanguageServiceUtils.Position(line, end));\n}\n\n/**\n * Get location info from a node in a type-safe way.\n *\n * The only way a node could not have a location is if we initialized the parser\n * (and therefore the lexer) with the `noLocation` option, but we always\n * call `parse` without options above.\n */\nfunction getLocation(node) {\n  var typeCastedNode = node;\n  var location = typeCastedNode.loc;\n  (0, _assert2.default)(location, 'Expected ASTNode to have a location.');\n  return location;\n}"]},"metadata":{},"sourceType":"script"}