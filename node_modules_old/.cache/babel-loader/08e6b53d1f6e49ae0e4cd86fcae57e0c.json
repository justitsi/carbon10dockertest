{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"checkoutCommit\", {\n  enumerable: true,\n  get: function () {\n    return _checkout_commit.default;\n  }\n});\nObject.defineProperty(exports, \"gitPull\", {\n  enumerable: true,\n  get: function () {\n    return _git_pull.default;\n  }\n});\nObject.defineProperty(exports, \"gitDiff\", {\n  enumerable: true,\n  get: function () {\n    return _git_diff.default;\n  }\n});\nexports.gitToJs = void 0;\n\nvar _util = require(\"./util\");\n\nvar _checkout_commit = _interopRequireDefault(require(\"./checkout_commit\"));\n\nvar _git_pull = _interopRequireDefault(require(\"./git_pull\"));\n\nvar _git_diff = _interopRequireDefault(require(\"./git_diff\"));\n\nvar _parse_git_log = _interopRequireDefault(require(\"./parse_git_log\"));\n\nvar _git_log_stream = _interopRequireDefault(require(\"./git_log_stream\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst gitToJs = (repoPath, options = {}) => {\n  const resolvedPath = (0, _util.resolveHome)(repoPath);\n\n  try {\n    (0, _util.validatePath)(resolvedPath);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n\n  const {\n    stream,\n    addErrorHandler\n  } = (0, _git_log_stream.default)(resolvedPath, options);\n  return new Promise((resolve, reject) => {\n    addErrorHandler(reject);\n    (0, _parse_git_log.default)(stream).then(resolve);\n  });\n};\n\nexports.gitToJs = gitToJs;","map":{"version":3,"sources":["../src/index.js"],"names":["gitToJs","options","resolvedPath","Promise","addErrorHandler"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,KAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;;AACA,IAAA,eAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;;;;;;;AAMA,MAAMA,OAAO,GAAG,CAAA,QAAA,EAEdC,OAAwB,GAFV,EAAA,KAGW;AACzB,QAAMC,YAAY,GAAG,CAAA,GAAA,KAAA,CAAA,WAAA,EAArB,QAAqB,CAArB;;AAEA,MAAI;AACF,KAAA,GAAA,KAAA,CAAA,YAAA,EAAA,YAAA;AADF,GAAA,CAEE,OAAA,CAAA,EAAU;AACV,WAAOC,OAAO,CAAPA,MAAAA,CAAP,CAAOA,CAAP;AACD;;AAED,QAAM;AAAA,IAAA,MAAA;AAASC,IAAAA;AAAT,MAA4B,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,YAAA,EAAlC,OAAkC,CAAlC;AAEA,SAAO,IAAA,OAAA,CAAY,CAAA,OAAA,EAAA,MAAA,KAAqB;AACtCA,IAAAA,eAAe,CAAfA,MAAe,CAAfA;AAEA,KAAA,GAAA,cAAA,CAAA,OAAA,EAAA,MAAA,EAAA,IAAA,CAAA,OAAA;AAHF,GAAO,CAAP;AAdF,CAAA","sourcesContent":["// @flow\nimport type {GitCommit, FileModification} from './types/git_commit_type';\nimport {validatePath, resolveHome} from './util';\nimport checkoutCommit from './checkout_commit';\nimport gitPull from './git_pull';\nimport gitDiff from './git_diff';\nimport parseGitLog from './parse_git_log';\nimport gitLogStream from './git_log_stream';\n\ntype gitToJsOptions = {\n  sinceCommit?: string\n};\n\nconst gitToJs = (\n  repoPath: string,\n  options?: gitToJsOptions = {}\n): Promise<GitCommit[]> => {\n  const resolvedPath = resolveHome(repoPath);\n\n  try {\n    validatePath(resolvedPath);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n\n  const {stream, addErrorHandler} = gitLogStream(resolvedPath, options);\n\n  return new Promise((resolve, reject) => {\n    addErrorHandler(reject);\n\n    parseGitLog(stream).then(resolve);\n  });\n};\n\nexport {gitToJs, checkoutCommit, gitPull, gitDiff};\nexport type {GitCommit, FileModification};\n"]},"metadata":{},"sourceType":"script"}