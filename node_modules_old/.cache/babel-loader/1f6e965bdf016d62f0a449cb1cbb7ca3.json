{"ast":null,"code":"// https://confluence.jetbrains.com/display/TCD10/Predefined+Build+Parameters\nconst javaProperties = require('java-properties');\n\nconst {\n  branch\n} = require('../lib/git');\n\nconst PROPERTIES_MAPPING = {\n  root: 'teamcity.build.workingDir',\n  branch: 'teamcity.build.branch'\n};\n\nconst safeReadProperties = filePath => {\n  try {\n    return javaProperties.of(filePath);\n  } catch (error) {\n    return undefined;\n  }\n};\n\nconst getProperties = ({\n  env,\n  cwd\n}) => {\n  const buildProperties = env.TEAMCITY_BUILD_PROPERTIES_FILE ? safeReadProperties(env.TEAMCITY_BUILD_PROPERTIES_FILE) : undefined;\n  const configFile = buildProperties ? buildProperties.get('teamcity.configuration.properties.file') : undefined;\n  const configProperties = configFile ? safeReadProperties(configFile) : configFile;\n  return Object.keys(PROPERTIES_MAPPING).reduce((result, key) => Object.assign(result, {\n    [key]: (buildProperties ? buildProperties.get(PROPERTIES_MAPPING[key]) : undefined) || (configProperties ? configProperties.get(PROPERTIES_MAPPING[key]) : undefined) || (key === 'branch' ? branch({\n      env,\n      cwd\n    }) : undefined)\n  }), {});\n};\n\nmodule.exports = {\n  detect({\n    env\n  }) {\n    return Boolean(env.TEAMCITY_VERSION);\n  },\n\n  configuration({\n    env,\n    cwd\n  }) {\n    return Object.assign({\n      name: 'TeamCity',\n      service: 'teamcity',\n      commit: env.BUILD_VCS_NUMBER,\n      build: env.BUILD_NUMBER,\n      slug: env.TEAMCITY_BUILDCONF_NAME\n    }, getProperties({\n      env,\n      cwd\n    }));\n  }\n\n};","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/env-ci/services/teamcity.js"],"names":["javaProperties","require","branch","PROPERTIES_MAPPING","root","safeReadProperties","filePath","of","error","undefined","getProperties","env","cwd","buildProperties","TEAMCITY_BUILD_PROPERTIES_FILE","configFile","get","configProperties","Object","keys","reduce","result","key","assign","module","exports","detect","Boolean","TEAMCITY_VERSION","configuration","name","service","commit","BUILD_VCS_NUMBER","build","BUILD_NUMBER","slug","TEAMCITY_BUILDCONF_NAME"],"mappings":"AAAA;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAWD,OAAO,CAAC,YAAD,CAAxB;;AAEA,MAAME,kBAAkB,GAAG;AAACC,EAAAA,IAAI,EAAE,2BAAP;AAAoCF,EAAAA,MAAM,EAAE;AAA5C,CAA3B;;AAEA,MAAMG,kBAAkB,GAAGC,QAAQ,IAAI;AACtC,MAAI;AACH,WAAON,cAAc,CAACO,EAAf,CAAkBD,QAAlB,CAAP;AACA,GAFD,CAEE,OAAOE,KAAP,EAAc;AACf,WAAOC,SAAP;AACA;AACD,CAND;;AAQA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA,GAAD;AAAMC,EAAAA;AAAN,CAAD,KAAgB;AACrC,QAAMC,eAAe,GAAGF,GAAG,CAACG,8BAAJ,GACrBT,kBAAkB,CAACM,GAAG,CAACG,8BAAL,CADG,GAErBL,SAFH;AAGA,QAAMM,UAAU,GAAGF,eAAe,GAAGA,eAAe,CAACG,GAAhB,CAAoB,wCAApB,CAAH,GAAmEP,SAArG;AACA,QAAMQ,gBAAgB,GAAGF,UAAU,GAAGV,kBAAkB,CAACU,UAAD,CAArB,GAAoCA,UAAvE;AAEA,SAAOG,MAAM,CAACC,IAAP,CAAYhB,kBAAZ,EAAgCiB,MAAhC,CACN,CAACC,MAAD,EAASC,GAAT,KACCJ,MAAM,CAACK,MAAP,CAAcF,MAAd,EAAsB;AACrB,KAACC,GAAD,GACC,CAACT,eAAe,GAAGA,eAAe,CAACG,GAAhB,CAAoBb,kBAAkB,CAACmB,GAAD,CAAtC,CAAH,GAAkDb,SAAlE,MACCQ,gBAAgB,GAAGA,gBAAgB,CAACD,GAAjB,CAAqBb,kBAAkB,CAACmB,GAAD,CAAvC,CAAH,GAAmDb,SADpE,MAECa,GAAG,KAAK,QAAR,GAAmBpB,MAAM,CAAC;AAACS,MAAAA,GAAD;AAAMC,MAAAA;AAAN,KAAD,CAAzB,GAAwCH,SAFzC;AAFoB,GAAtB,CAFK,EAQN,EARM,CAAP;AAUA,CAjBD;;AAmBAe,MAAM,CAACC,OAAP,GAAiB;AAChBC,EAAAA,MAAM,CAAC;AAACf,IAAAA;AAAD,GAAD,EAAQ;AACb,WAAOgB,OAAO,CAAChB,GAAG,CAACiB,gBAAL,CAAd;AACA,GAHe;;AAIhBC,EAAAA,aAAa,CAAC;AAAClB,IAAAA,GAAD;AAAMC,IAAAA;AAAN,GAAD,EAAa;AACzB,WAAOM,MAAM,CAACK,MAAP,CACN;AACCO,MAAAA,IAAI,EAAE,UADP;AAECC,MAAAA,OAAO,EAAE,UAFV;AAGCC,MAAAA,MAAM,EAAErB,GAAG,CAACsB,gBAHb;AAICC,MAAAA,KAAK,EAAEvB,GAAG,CAACwB,YAJZ;AAKCC,MAAAA,IAAI,EAAEzB,GAAG,CAAC0B;AALX,KADM,EAQN3B,aAAa,CAAC;AAACC,MAAAA,GAAD;AAAMC,MAAAA;AAAN,KAAD,CARP,CAAP;AAUA;;AAfe,CAAjB","sourcesContent":["// https://confluence.jetbrains.com/display/TCD10/Predefined+Build+Parameters\n\nconst javaProperties = require('java-properties');\nconst {branch} = require('../lib/git');\n\nconst PROPERTIES_MAPPING = {root: 'teamcity.build.workingDir', branch: 'teamcity.build.branch'};\n\nconst safeReadProperties = filePath => {\n\ttry {\n\t\treturn javaProperties.of(filePath);\n\t} catch (error) {\n\t\treturn undefined;\n\t}\n};\n\nconst getProperties = ({env, cwd}) => {\n\tconst buildProperties = env.TEAMCITY_BUILD_PROPERTIES_FILE\n\t\t? safeReadProperties(env.TEAMCITY_BUILD_PROPERTIES_FILE)\n\t\t: undefined;\n\tconst configFile = buildProperties ? buildProperties.get('teamcity.configuration.properties.file') : undefined;\n\tconst configProperties = configFile ? safeReadProperties(configFile) : configFile;\n\n\treturn Object.keys(PROPERTIES_MAPPING).reduce(\n\t\t(result, key) =>\n\t\t\tObject.assign(result, {\n\t\t\t\t[key]:\n\t\t\t\t\t(buildProperties ? buildProperties.get(PROPERTIES_MAPPING[key]) : undefined) ||\n\t\t\t\t\t(configProperties ? configProperties.get(PROPERTIES_MAPPING[key]) : undefined) ||\n\t\t\t\t\t(key === 'branch' ? branch({env, cwd}) : undefined),\n\t\t\t}),\n\t\t{}\n\t);\n};\n\nmodule.exports = {\n\tdetect({env}) {\n\t\treturn Boolean(env.TEAMCITY_VERSION);\n\t},\n\tconfiguration({env, cwd}) {\n\t\treturn Object.assign(\n\t\t\t{\n\t\t\t\tname: 'TeamCity',\n\t\t\t\tservice: 'teamcity',\n\t\t\t\tcommit: env.BUILD_VCS_NUMBER,\n\t\t\t\tbuild: env.BUILD_NUMBER,\n\t\t\t\tslug: env.TEAMCITY_BUILDCONF_NAME,\n\t\t\t},\n\t\t\tgetProperties({env, cwd})\n\t\t);\n\t},\n};\n"]},"metadata":{},"sourceType":"script"}