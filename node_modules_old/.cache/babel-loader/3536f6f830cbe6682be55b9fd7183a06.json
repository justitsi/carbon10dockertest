{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst fs_1 = __importDefault(require(\"fs\"));\n\nconst env_ci_1 = __importDefault(require(\"env-ci\"));\n\nconst git_parse_1 = require(\"git-parse\");\n\nconst git_rev_sync_1 = __importDefault(require(\"git-rev-sync\"));\n\nconst lodash_pickby_1 = __importDefault(require(\"lodash.pickby\"));\n\nconst lodash_identity_1 = __importDefault(require(\"lodash.identity\"));\n\nconst git_url_parse_1 = __importDefault(require(\"git-url-parse\"));\n\nconst findGitRoot = start => {\n  start = start || process.cwd();\n\n  if (typeof start === \"string\") {\n    if (start[start.length - 1] !== path_1.default.sep) start += path_1.default.sep;\n    start = start.split(path_1.default.sep);\n  }\n\n  if (!start.length) return;\n  start.pop();\n  const dir = start.join(path_1.default.sep);\n\n  if (fs_1.default.existsSync(path_1.default.join(dir, \".git\"))) {\n    return path_1.default.normalize(dir);\n  } else {\n    return findGitRoot(start);\n  }\n};\n\nexports.sanitizeGitRemote = remote => {\n  if (!remote) return null;\n  const info = git_url_parse_1.default(remote);\n  const source = info.source.toLowerCase();\n  if (source !== \"github.com\" && source !== \"bitbucket.com\") return null;\n\n  if (info.user !== \"\" && info.user !== \"git\") {\n    info.user = \"REDACTED\";\n  }\n\n  info.href = null;\n  return git_url_parse_1.default.stringify(info);\n};\n\nexports.gitInfo = async log => {\n  const {\n    commit,\n    branch: ciBranch,\n    root,\n    prBranch\n  } = env_ci_1.default();\n  const gitLoc = root ? root : findGitRoot();\n  if (!commit) return;\n  let committer, remoteUrl, message;\n  let branch = ciBranch || prBranch;\n\n  if (gitLoc) {\n    const _a = await git_parse_1.gitToJs(gitLoc).then(commits => commits && commits.length > 0 ? commits[0] : {\n      authorName: null,\n      authorEmail: null,\n      message: null\n    }).catch(() => ({\n      authorEmail: null,\n      authorName: null,\n      message: null\n    })),\n          {\n      authorName,\n      authorEmail\n    } = _a,\n          commit = __rest(_a, [\"authorName\", \"authorEmail\"]);\n\n    committer = `${authorName || \"\"} ${authorEmail ? `<${authorEmail}>` : \"\"}`.trim();\n    message = commit.message;\n\n    try {\n      remoteUrl = exports.sanitizeGitRemote(git_rev_sync_1.default.remoteUrl());\n    } catch (e) {\n      log([\"Unable to retrieve remote url, failed with:\", e].join(\"\\n\\n\"));\n    }\n\n    if (!branch) {\n      branch = git_rev_sync_1.default.branch([gitLoc]);\n    }\n  }\n\n  return lodash_pickby_1.default({\n    committer,\n    commit,\n    remoteUrl,\n    message,\n    branch\n  }, lodash_identity_1.default);\n};","map":{"version":3,"sources":["../src/git.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path_1 = __importDefault(require(\"path\"));\nconst fs_1 = __importDefault(require(\"fs\"));\nconst env_ci_1 = __importDefault(require(\"env-ci\"));\nconst git_parse_1 = require(\"git-parse\");\nconst git_rev_sync_1 = __importDefault(require(\"git-rev-sync\"));\nconst lodash_pickby_1 = __importDefault(require(\"lodash.pickby\"));\nconst lodash_identity_1 = __importDefault(require(\"lodash.identity\"));\nconst git_url_parse_1 = __importDefault(require(\"git-url-parse\"));\nconst findGitRoot = (start) => {\n    start = start || process.cwd();\n    if (typeof start === \"string\") {\n        if (start[start.length - 1] !== path_1.default.sep)\n            start += path_1.default.sep;\n        start = start.split(path_1.default.sep);\n    }\n    if (!start.length)\n        return;\n    start.pop();\n    const dir = start.join(path_1.default.sep);\n    if (fs_1.default.existsSync(path_1.default.join(dir, \".git\"))) {\n        return path_1.default.normalize(dir);\n    }\n    else {\n        return findGitRoot(start);\n    }\n};\nexports.sanitizeGitRemote = (remote) => {\n    if (!remote)\n        return null;\n    const info = git_url_parse_1.default(remote);\n    const source = info.source.toLowerCase();\n    if (source !== \"github.com\" && source !== \"bitbucket.com\")\n        return null;\n    if (info.user !== \"\" && info.user !== \"git\") {\n        info.user = \"REDACTED\";\n    }\n    info.href = null;\n    return git_url_parse_1.default.stringify(info);\n};\nexports.gitInfo = async (log) => {\n    const { commit, branch: ciBranch, root, prBranch } = env_ci_1.default();\n    const gitLoc = root ? root : findGitRoot();\n    if (!commit)\n        return;\n    let committer, remoteUrl, message;\n    let branch = ciBranch || prBranch;\n    if (gitLoc) {\n        const _a = await git_parse_1.gitToJs(gitLoc)\n            .then((commits) => commits && commits.length > 0\n            ? commits[0]\n            : { authorName: null, authorEmail: null, message: null })\n            .catch(() => ({ authorEmail: null, authorName: null, message: null })), { authorName, authorEmail } = _a, commit = __rest(_a, [\"authorName\", \"authorEmail\"]);\n        committer = `${authorName || \"\"} ${authorEmail ? `<${authorEmail}>` : \"\"}`.trim();\n        message = commit.message;\n        try {\n            remoteUrl = exports.sanitizeGitRemote(git_rev_sync_1.default.remoteUrl());\n        }\n        catch (e) {\n            log([\"Unable to retrieve remote url, failed with:\", e].join(\"\\n\\n\"));\n        }\n        if (!branch) {\n            branch = git_rev_sync_1.default.branch([gitLoc]);\n        }\n    }\n    return lodash_pickby_1.default({\n        committer,\n        commit,\n        remoteUrl,\n        message,\n        branch\n    }, lodash_identity_1.default);\n};\n//# sourceMappingURL=git.js.map"]},"metadata":{},"sourceType":"script"}