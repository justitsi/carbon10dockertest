{"ast":null,"code":"'use strict';\n\nvar ESCAPES = ['\\u001b', '\\u009b'];\nvar END_CODE = 39;\nvar ESCAPE_CODES = {\n  0: 0,\n  1: 22,\n  2: 22,\n  3: 23,\n  4: 24,\n  7: 27,\n  8: 28,\n  9: 29,\n  30: 39,\n  31: 39,\n  32: 39,\n  33: 39,\n  34: 39,\n  35: 39,\n  36: 39,\n  37: 39,\n  90: 39,\n  40: 49,\n  41: 49,\n  42: 49,\n  43: 49,\n  44: 49,\n  45: 49,\n  46: 49,\n  47: 49\n};\n\nfunction wrapAnsi(code) {\n  return ESCAPES[0] + '[' + code + 'm';\n}\n\nmodule.exports = function (str, begin, end) {\n  end = end || str.length;\n  var insideEscape = false;\n  var escapeCode;\n  var visible = 0;\n  var output = '';\n\n  for (var i = 0; i < str.length; i++) {\n    var leftEscape = false;\n    var x = str[i];\n\n    if (ESCAPES.indexOf(x) !== -1) {\n      insideEscape = true;\n      var code = /[0-9][^m]*/.exec(str.slice(i, i + 4));\n      escapeCode = code === END_CODE ? null : code;\n    } else if (insideEscape && x === 'm') {\n      insideEscape = false;\n      leftEscape = true;\n    }\n\n    if (!insideEscape && !leftEscape) {\n      ++visible;\n    }\n\n    if (visible > begin && visible <= end) {\n      output += x;\n    } else if (visible === begin && escapeCode !== undefined && escapeCode !== END_CODE) {\n      output += wrapAnsi(escapeCode);\n    } else if (visible >= end) {\n      if (escapeCode !== undefined) {\n        output += wrapAnsi(ESCAPE_CODES[escapeCode] || END_CODE);\n      }\n\n      break;\n    }\n  }\n\n  return output;\n};","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/cli-truncate/node_modules/slice-ansi/index.js"],"names":["ESCAPES","END_CODE","ESCAPE_CODES","wrapAnsi","code","module","exports","str","begin","end","length","insideEscape","escapeCode","visible","output","i","leftEscape","x","indexOf","exec","slice","undefined"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAG,CACb,QADa,EAEb,QAFa,CAAd;AAKA,IAAIC,QAAQ,GAAG,EAAf;AAEA,IAAIC,YAAY,GAAG;AAClB,KAAG,CADe;AAElB,KAAG,EAFe;AAGlB,KAAG,EAHe;AAIlB,KAAG,EAJe;AAKlB,KAAG,EALe;AAMlB,KAAG,EANe;AAOlB,KAAG,EAPe;AAQlB,KAAG,EARe;AASlB,MAAI,EATc;AAUlB,MAAI,EAVc;AAWlB,MAAI,EAXc;AAYlB,MAAI,EAZc;AAalB,MAAI,EAbc;AAclB,MAAI,EAdc;AAelB,MAAI,EAfc;AAgBlB,MAAI,EAhBc;AAiBlB,MAAI,EAjBc;AAkBlB,MAAI,EAlBc;AAmBlB,MAAI,EAnBc;AAoBlB,MAAI,EApBc;AAqBlB,MAAI,EArBc;AAsBlB,MAAI,EAtBc;AAuBlB,MAAI,EAvBc;AAwBlB,MAAI,EAxBc;AAyBlB,MAAI;AAzBc,CAAnB;;AA4BA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACvB,SAAOJ,OAAO,CAAC,CAAD,CAAP,GAAa,GAAb,GAAmBI,IAAnB,GAA0B,GAAjC;AACA;;AAEDC,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAeC,KAAf,EAAsBC,GAAtB,EAA2B;AAC3CA,EAAAA,GAAG,GAAGA,GAAG,IAAIF,GAAG,CAACG,MAAjB;AACA,MAAIC,YAAY,GAAG,KAAnB;AACA,MAAIC,UAAJ;AACA,MAAIC,OAAO,GAAG,CAAd;AACA,MAAIC,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,GAAG,CAACG,MAAxB,EAAgCK,CAAC,EAAjC,EAAqC;AACpC,QAAIC,UAAU,GAAG,KAAjB;AACA,QAAIC,CAAC,GAAGV,GAAG,CAACQ,CAAD,CAAX;;AAEA,QAAIf,OAAO,CAACkB,OAAR,CAAgBD,CAAhB,MAAuB,CAAC,CAA5B,EAA+B;AAC9BN,MAAAA,YAAY,GAAG,IAAf;AACA,UAAIP,IAAI,GAAG,aAAae,IAAb,CAAkBZ,GAAG,CAACa,KAAJ,CAAUL,CAAV,EAAaA,CAAC,GAAG,CAAjB,CAAlB,CAAX;AACAH,MAAAA,UAAU,GAAGR,IAAI,KAAKH,QAAT,GAAoB,IAApB,GAA2BG,IAAxC;AACA,KAJD,MAIO,IAAIO,YAAY,IAAIM,CAAC,KAAK,GAA1B,EAA+B;AACrCN,MAAAA,YAAY,GAAG,KAAf;AACAK,MAAAA,UAAU,GAAG,IAAb;AACA;;AAED,QAAI,CAACL,YAAD,IAAiB,CAACK,UAAtB,EAAkC;AACjC,QAAEH,OAAF;AACA;;AAED,QAAIA,OAAO,GAAGL,KAAV,IAAmBK,OAAO,IAAIJ,GAAlC,EAAuC;AACtCK,MAAAA,MAAM,IAAIG,CAAV;AACA,KAFD,MAEO,IAAIJ,OAAO,KAAKL,KAAZ,IAAqBI,UAAU,KAAKS,SAApC,IAAiDT,UAAU,KAAKX,QAApE,EAA8E;AACpFa,MAAAA,MAAM,IAAIX,QAAQ,CAACS,UAAD,CAAlB;AACA,KAFM,MAEA,IAAIC,OAAO,IAAIJ,GAAf,EAAoB;AAC1B,UAAIG,UAAU,KAAKS,SAAnB,EAA8B;AAC7BP,QAAAA,MAAM,IAAIX,QAAQ,CAACD,YAAY,CAACU,UAAD,CAAZ,IAA4BX,QAA7B,CAAlB;AACA;;AACD;AACA;AACD;;AAED,SAAOa,MAAP;AACA,CArCD","sourcesContent":["'use strict';\n\nvar ESCAPES = [\n\t'\\u001b',\n\t'\\u009b'\n];\n\nvar END_CODE = 39;\n\nvar ESCAPE_CODES = {\n\t0: 0,\n\t1: 22,\n\t2: 22,\n\t3: 23,\n\t4: 24,\n\t7: 27,\n\t8: 28,\n\t9: 29,\n\t30: 39,\n\t31: 39,\n\t32: 39,\n\t33: 39,\n\t34: 39,\n\t35: 39,\n\t36: 39,\n\t37: 39,\n\t90: 39,\n\t40: 49,\n\t41: 49,\n\t42: 49,\n\t43: 49,\n\t44: 49,\n\t45: 49,\n\t46: 49,\n\t47: 49\n};\n\nfunction wrapAnsi(code) {\n\treturn ESCAPES[0] + '[' + code + 'm';\n}\n\nmodule.exports = function (str, begin, end) {\n\tend = end || str.length;\n\tvar insideEscape = false;\n\tvar escapeCode;\n\tvar visible = 0;\n\tvar output = '';\n\n\tfor (var i = 0; i < str.length; i++) {\n\t\tvar leftEscape = false;\n\t\tvar x = str[i];\n\n\t\tif (ESCAPES.indexOf(x) !== -1) {\n\t\t\tinsideEscape = true;\n\t\t\tvar code = /[0-9][^m]*/.exec(str.slice(i, i + 4));\n\t\t\tescapeCode = code === END_CODE ? null : code;\n\t\t} else if (insideEscape && x === 'm') {\n\t\t\tinsideEscape = false;\n\t\t\tleftEscape = true;\n\t\t}\n\n\t\tif (!insideEscape && !leftEscape) {\n\t\t\t++visible;\n\t\t}\n\n\t\tif (visible > begin && visible <= end) {\n\t\t\toutput += x;\n\t\t} else if (visible === begin && escapeCode !== undefined && escapeCode !== END_CODE) {\n\t\t\toutput += wrapAnsi(escapeCode);\n\t\t} else if (visible >= end) {\n\t\t\tif (escapeCode !== undefined) {\n\t\t\t\toutput += wrapAnsi(ESCAPE_CODES[escapeCode] || END_CODE);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn output;\n};\n\n"]},"metadata":{},"sourceType":"script"}