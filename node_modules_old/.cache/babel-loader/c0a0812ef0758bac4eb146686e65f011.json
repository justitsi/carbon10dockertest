{"ast":null,"code":"\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar parsePath = require(\"parse-path\"),\n    normalizeUrl = require(\"normalize-url\");\n/**\n * parseUrl\n * Parses the input url.\n *\n * **Note**: This *throws* if invalid urls are provided.\n *\n * @name parseUrl\n * @function\n * @param {String} url The input url.\n * @param {Boolean|Object} normalize Wheter to normalize the url or not.\n *                         Default is `false`. If `true`, the url will\n *                         be normalized. If an object, it will be the\n *                         options object sent to [`normalize-url`](https://github.com/sindresorhus/normalize-url).\n *\n *                         For SSH urls, normalize won't work.\n *\n * @return {Object} An object containing the following fields:\n *\n *  - `protocols` (Array): An array with the url protocols (usually it has one element).\n *  - `protocol` (String): The first protocol, `\"ssh\"` (if the url is a ssh url) or `\"file\"`.\n *  - `port` (null|Number): The domain port.\n *  - `resource` (String): The url domain (including subdomains).\n *  - `user` (String): The authentication user (usually for ssh urls).\n *  - `pathname` (String): The url pathname.\n *  - `hash` (String): The url hash.\n *  - `search` (String): The url querystring value.\n *  - `href` (String): The input url.\n *  - `query` (Object): The url querystring, parsed as object.\n */\n\n\nfunction parseUrl(url) {\n  var normalize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (typeof url !== \"string\" || !url.trim()) {\n    throw new Error(\"Invalid url.\");\n  }\n\n  if (normalize) {\n    if ((typeof normalize === \"undefined\" ? \"undefined\" : _typeof(normalize)) !== \"object\") {\n      normalize = {\n        stripFragment: false\n      };\n    }\n\n    url = normalizeUrl(url, normalize);\n  }\n\n  var parsed = parsePath(url);\n  return parsed;\n}\n\nmodule.exports = parseUrl;","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/parse-url/lib/index.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","parsePath","require","normalizeUrl","parseUrl","url","normalize","arguments","length","undefined","trim","Error","stripFragment","parsed","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAG,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA3D,GAAsE,UAAUC,GAAV,EAAe;AAAE,SAAO,OAAOA,GAAd;AAAoB,CAA3G,GAA8G,UAAUA,GAAV,EAAe;AAAE,SAAOA,GAAG,IAAI,OAAOF,MAAP,KAAkB,UAAzB,IAAuCE,GAAG,CAACC,WAAJ,KAAoBH,MAA3D,IAAqEE,GAAG,KAAKF,MAAM,CAACI,SAApF,GAAgG,QAAhG,GAA2G,OAAOF,GAAzH;AAA+H,CAA5Q;;AAEA,IAAIG,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAvB;AAAA,IACIC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAD1B;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAASE,QAAT,CAAkBC,GAAlB,EAAuB;AACnB,MAAIC,SAAS,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAApF;;AAEA,MAAI,OAAOF,GAAP,KAAe,QAAf,IAA2B,CAACA,GAAG,CAACK,IAAJ,EAAhC,EAA4C;AACxC,UAAM,IAAIC,KAAJ,CAAU,cAAV,CAAN;AACH;;AACD,MAAIL,SAAJ,EAAe;AACX,QAAI,CAAC,OAAOA,SAAP,KAAqB,WAArB,GAAmC,WAAnC,GAAiDX,OAAO,CAACW,SAAD,CAAzD,MAA0E,QAA9E,EAAwF;AACpFA,MAAAA,SAAS,GAAG;AACRM,QAAAA,aAAa,EAAE;AADP,OAAZ;AAGH;;AACDP,IAAAA,GAAG,GAAGF,YAAY,CAACE,GAAD,EAAMC,SAAN,CAAlB;AACH;;AACD,MAAIO,MAAM,GAAGZ,SAAS,CAACI,GAAD,CAAtB;AACA,SAAOQ,MAAP;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiBX,QAAjB","sourcesContent":["\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar parsePath = require(\"parse-path\"),\n    normalizeUrl = require(\"normalize-url\");\n\n/**\n * parseUrl\n * Parses the input url.\n *\n * **Note**: This *throws* if invalid urls are provided.\n *\n * @name parseUrl\n * @function\n * @param {String} url The input url.\n * @param {Boolean|Object} normalize Wheter to normalize the url or not.\n *                         Default is `false`. If `true`, the url will\n *                         be normalized. If an object, it will be the\n *                         options object sent to [`normalize-url`](https://github.com/sindresorhus/normalize-url).\n *\n *                         For SSH urls, normalize won't work.\n *\n * @return {Object} An object containing the following fields:\n *\n *  - `protocols` (Array): An array with the url protocols (usually it has one element).\n *  - `protocol` (String): The first protocol, `\"ssh\"` (if the url is a ssh url) or `\"file\"`.\n *  - `port` (null|Number): The domain port.\n *  - `resource` (String): The url domain (including subdomains).\n *  - `user` (String): The authentication user (usually for ssh urls).\n *  - `pathname` (String): The url pathname.\n *  - `hash` (String): The url hash.\n *  - `search` (String): The url querystring value.\n *  - `href` (String): The input url.\n *  - `query` (Object): The url querystring, parsed as object.\n */\nfunction parseUrl(url) {\n    var normalize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (typeof url !== \"string\" || !url.trim()) {\n        throw new Error(\"Invalid url.\");\n    }\n    if (normalize) {\n        if ((typeof normalize === \"undefined\" ? \"undefined\" : _typeof(normalize)) !== \"object\") {\n            normalize = {\n                stripFragment: false\n            };\n        }\n        url = normalizeUrl(url, normalize);\n    }\n    var parsed = parsePath(url);\n    return parsed;\n}\n\nmodule.exports = parseUrl;"]},"metadata":{},"sourceType":"script"}