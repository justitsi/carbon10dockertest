{"ast":null,"code":"/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\n\nexports.WorkspaceFoldersFeature = Base => {\n  return class extends Base {\n    initialize(capabilities) {\n      let workspaceCapabilities = capabilities.workspace;\n\n      if (workspaceCapabilities && workspaceCapabilities.workspaceFolders) {\n        this._onDidChangeWorkspaceFolders = new vscode_languageserver_protocol_1.Emitter();\n        this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type, params => {\n          this._onDidChangeWorkspaceFolders.fire(params.event);\n        });\n      }\n    }\n\n    getWorkspaceFolders() {\n      return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkspaceFoldersRequest.type);\n    }\n\n    get onDidChangeWorkspaceFolders() {\n      if (!this._onDidChangeWorkspaceFolders) {\n        throw new Error('Client doesn\\'t support sending workspace folder change events.');\n      }\n\n      if (!this._unregistration) {\n        this._unregistration = this.connection.client.register(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type);\n      }\n\n      return this._onDidChangeWorkspaceFolders.event;\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/vscode-languageserver/lib/workspaceFolders.js"],"names":["Object","defineProperty","exports","value","vscode_languageserver_protocol_1","require","WorkspaceFoldersFeature","Base","initialize","capabilities","workspaceCapabilities","workspace","workspaceFolders","_onDidChangeWorkspaceFolders","Emitter","connection","onNotification","DidChangeWorkspaceFoldersNotification","type","params","fire","event","getWorkspaceFolders","sendRequest","WorkspaceFoldersRequest","onDidChangeWorkspaceFolders","Error","_unregistration","client","register"],"mappings":"AAAA;;;;AAIA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,gCAAgC,GAAGC,OAAO,CAAC,gCAAD,CAAhD;;AACAH,OAAO,CAACI,uBAAR,GAAmCC,IAAD,IAAU;AACxC,SAAO,cAAcA,IAAd,CAAmB;AACtBC,IAAAA,UAAU,CAACC,YAAD,EAAe;AACrB,UAAIC,qBAAqB,GAAGD,YAAY,CAACE,SAAzC;;AACA,UAAID,qBAAqB,IAAIA,qBAAqB,CAACE,gBAAnD,EAAqE;AACjE,aAAKC,4BAAL,GAAoC,IAAIT,gCAAgC,CAACU,OAArC,EAApC;AACA,aAAKC,UAAL,CAAgBC,cAAhB,CAA+BZ,gCAAgC,CAACa,qCAAjC,CAAuEC,IAAtG,EAA6GC,MAAD,IAAY;AACpH,eAAKN,4BAAL,CAAkCO,IAAlC,CAAuCD,MAAM,CAACE,KAA9C;AACH,SAFD;AAGH;AACJ;;AACDC,IAAAA,mBAAmB,GAAG;AAClB,aAAO,KAAKP,UAAL,CAAgBQ,WAAhB,CAA4BnB,gCAAgC,CAACoB,uBAAjC,CAAyDN,IAArF,CAAP;AACH;;AACD,QAAIO,2BAAJ,GAAkC;AAC9B,UAAI,CAAC,KAAKZ,4BAAV,EAAwC;AACpC,cAAM,IAAIa,KAAJ,CAAU,iEAAV,CAAN;AACH;;AACD,UAAI,CAAC,KAAKC,eAAV,EAA2B;AACvB,aAAKA,eAAL,GAAuB,KAAKZ,UAAL,CAAgBa,MAAhB,CAAuBC,QAAvB,CAAgCzB,gCAAgC,CAACa,qCAAjC,CAAuEC,IAAvG,CAAvB;AACH;;AACD,aAAO,KAAKL,4BAAL,CAAkCQ,KAAzC;AACH;;AArBqB,GAA1B;AAuBH,CAxBD","sourcesContent":["/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\r\nexports.WorkspaceFoldersFeature = (Base) => {\r\n    return class extends Base {\r\n        initialize(capabilities) {\r\n            let workspaceCapabilities = capabilities.workspace;\r\n            if (workspaceCapabilities && workspaceCapabilities.workspaceFolders) {\r\n                this._onDidChangeWorkspaceFolders = new vscode_languageserver_protocol_1.Emitter();\r\n                this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type, (params) => {\r\n                    this._onDidChangeWorkspaceFolders.fire(params.event);\r\n                });\r\n            }\r\n        }\r\n        getWorkspaceFolders() {\r\n            return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkspaceFoldersRequest.type);\r\n        }\r\n        get onDidChangeWorkspaceFolders() {\r\n            if (!this._onDidChangeWorkspaceFolders) {\r\n                throw new Error('Client doesn\\'t support sending workspace folder change events.');\r\n            }\r\n            if (!this._unregistration) {\r\n                this._unregistration = this.connection.client.register(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type);\r\n            }\r\n            return this._onDidChangeWorkspaceFolders.event;\r\n        }\r\n    };\r\n};\r\n"]},"metadata":{},"sourceType":"script"}