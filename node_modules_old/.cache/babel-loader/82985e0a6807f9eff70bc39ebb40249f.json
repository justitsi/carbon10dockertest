{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst graphql_tag_1 = __importDefault(require(\"graphql-tag\"));\n\nconst graphql_1 = require(\"graphql\");\n\nconst engine_1 = require(\"../../engine\");\n\nconst config_1 = require(\"../../config\");\n\nconst utilities_1 = require(\"../../utilities\");\n\nclass EngineSchemaProvider {\n  constructor(config, clientIdentity) {\n    this.config = config;\n    this.clientIdentity = clientIdentity;\n  }\n\n  async resolveSchema(override) {\n    if (this.schema && (!override || !override.force)) return this.schema;\n    const {\n      engine,\n      client\n    } = this.config;\n\n    if (!this.config.graph) {\n      throw new Error(`No graph ID found for client. Please specify a graph ID via the config or the --graph flag`);\n    }\n\n    if (!this.client) {\n      if (!engine.apiKey) {\n        throw new Error(`No API key found. Please set ${config_1.keyEnvVar} or use --key`);\n      }\n\n      this.client = new engine_1.ApolloEngineClient(engine.apiKey, engine.endpoint, this.clientIdentity);\n    }\n\n    const {\n      data,\n      errors\n    } = await this.client.execute({\n      query: exports.SCHEMA_QUERY,\n      variables: {\n        id: this.config.graph,\n        tag: override && override.tag ? override.tag : this.config.variant\n      }\n    });\n\n    if (errors) {\n      throw new Error(errors.map(({\n        message\n      }) => message).join(\"\\n\"));\n    }\n\n    if (!(data && data.service && data.service.__typename === \"Service\")) {\n      throw new Error(`Unable to get schema from Apollo Graph Manager for graph ${this.config.graph}`);\n    }\n\n    this.schema = graphql_1.buildClientSchema(data.service.schema);\n    return this.schema;\n  }\n\n  onSchemaChange(_handler) {\n    throw new Error(\"Polling of Apollo Graph Manager not implemented yet\");\n    return () => {};\n  }\n\n  async resolveFederatedServiceSDL() {\n    utilities_1.Debug.error(\"Cannot resolve a federated service's SDL from Apollo Graph Manager. Use an endpoint or a file instead\");\n    return;\n  }\n\n}\n\nexports.EngineSchemaProvider = EngineSchemaProvider;\nexports.SCHEMA_QUERY = graphql_tag_1.default`\n  query GetSchemaByTag($tag: String!, $id: ID!) {\n    service(id: $id) {\n      ... on Service {\n        __typename\n        schema(tag: $tag) {\n          hash\n          __schema: introspection {\n            queryType {\n              name\n            }\n            mutationType {\n              name\n            }\n            subscriptionType {\n              name\n            }\n            types(filter: { includeBuiltInTypes: true }) {\n              ...IntrospectionFullType\n            }\n            directives {\n              name\n              description\n              locations\n              args {\n                ...IntrospectionInputValue\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment IntrospectionFullType on IntrospectionType {\n    kind\n    name\n    description\n    fields {\n      name\n      description\n      args {\n        ...IntrospectionInputValue\n      }\n      type {\n        ...IntrospectionTypeRef\n      }\n      isDeprecated\n      deprecationReason\n    }\n    inputFields {\n      ...IntrospectionInputValue\n    }\n    interfaces {\n      ...IntrospectionTypeRef\n    }\n    enumValues(includeDeprecated: true) {\n      name\n      description\n      isDeprecated\n      deprecationReason\n    }\n    possibleTypes {\n      ...IntrospectionTypeRef\n    }\n  }\n\n  fragment IntrospectionInputValue on IntrospectionInputValue {\n    name\n    description\n    type {\n      ...IntrospectionTypeRef\n    }\n    defaultValue\n  }\n\n  fragment IntrospectionTypeRef on IntrospectionType {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["../../../src/providers/schema/engine.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,MAAA,aAAA,GAAA,eAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AASA,MAAA,WAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAEA,MAAa,oBAAb,CAAiC;AAI/B,EAAA,WAAA,CACU,MADV,EAEU,cAFV,EAEyC;AAD/B,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,cAAA,GAAA,cAAA;AACN;;AAEJ,QAAM,aAAN,CAAoB,QAApB,EAAiD;AAC/C,QAAI,KAAK,MAAL,KAAgB,CAAC,QAAD,IAAa,CAAC,QAAQ,CAAC,KAAvC,CAAJ,EAAmD,OAAO,KAAK,MAAZ;AACnD,UAAM;AAAE,MAAA,MAAF;AAAU,MAAA;AAAV,QAAqB,KAAK,MAAhC;;AAEA,QAAI,CAAC,KAAK,MAAL,CAAY,KAAjB,EAAwB;AACtB,YAAM,IAAI,KAAJ,CACJ,4FADI,CAAN;AAGD;;AAGD,QAAI,CAAC,KAAK,MAAV,EAAkB;AAChB,UAAI,CAAC,MAAM,CAAC,MAAZ,EAAoB;AAClB,cAAM,IAAI,KAAJ,CACJ,gCAAgC,QAAA,CAAA,SAAS,eADrC,CAAN;AAGD;;AACD,WAAK,MAAL,GAAc,IAAI,QAAA,CAAA,kBAAJ,CACZ,MAAM,CAAC,MADK,EAEZ,MAAM,CAAC,QAFK,EAGZ,KAAK,cAHO,CAAd;AAKD;;AAED,UAAM;AAAE,MAAA,IAAF;AAAQ,MAAA;AAAR,QAAmB,MAAM,KAAK,MAAL,CAAY,OAAZ,CAAoC;AACjE,MAAA,KAAK,EAAE,OAAA,CAAA,YAD0D;AAEjE,MAAA,SAAS,EAAE;AACT,QAAA,EAAE,EAAE,KAAK,MAAL,CAAY,KADP;AAET,QAAA,GAAG,EAAE,QAAQ,IAAI,QAAQ,CAAC,GAArB,GAA2B,QAAQ,CAAC,GAApC,GAA0C,KAAK,MAAL,CAAY;AAFlD;AAFsD,KAApC,CAA/B;;AAOA,QAAI,MAAJ,EAAY;AAEV,YAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,GAAP,CAAW,CAAC;AAAE,QAAA;AAAF,OAAD,KAAwB,OAAnC,EAA4C,IAA5C,CAAiD,IAAjD,CAAV,CAAN;AACD;;AAED,QAAI,EAAE,IAAI,IAAI,IAAI,CAAC,OAAb,IAAwB,IAAI,CAAC,OAAL,CAAa,UAAb,KAA4B,SAAtD,CAAJ,EAAsE;AACpE,YAAM,IAAI,KAAJ,CACJ,4DAA4D,KAAK,MAAL,CAAY,KAAK,EADzE,CAAN;AAGD;;AAID,SAAK,MAAL,GAAc,SAAA,CAAA,iBAAA,CAAkB,IAAI,CAAC,OAAL,CAAa,MAA/B,CAAd;AACA,WAAO,KAAK,MAAZ;AACD;;AAED,EAAA,cAAc,CACZ,QADY,EACgC;AAE5C,UAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACA,WAAO,MAAK,CAAG,CAAf;AACD;;AAED,QAAM,0BAAN,GAAgC;AAC9B,IAAA,WAAA,CAAA,KAAA,CAAM,KAAN,CACE,uGADF;AAGA;AACD;;AArE8B;;AAAjC,OAAA,CAAA,oBAAA,GAAA,oBAAA;AAwEa,OAAA,CAAA,YAAA,GAAe,aAAA,CAAA,OAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAlB","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_tag_1 = __importDefault(require(\"graphql-tag\"));\nconst graphql_1 = require(\"graphql\");\nconst engine_1 = require(\"../../engine\");\nconst config_1 = require(\"../../config\");\nconst utilities_1 = require(\"../../utilities\");\nclass EngineSchemaProvider {\n    constructor(config, clientIdentity) {\n        this.config = config;\n        this.clientIdentity = clientIdentity;\n    }\n    async resolveSchema(override) {\n        if (this.schema && (!override || !override.force))\n            return this.schema;\n        const { engine, client } = this.config;\n        if (!this.config.graph) {\n            throw new Error(`No graph ID found for client. Please specify a graph ID via the config or the --graph flag`);\n        }\n        if (!this.client) {\n            if (!engine.apiKey) {\n                throw new Error(`No API key found. Please set ${config_1.keyEnvVar} or use --key`);\n            }\n            this.client = new engine_1.ApolloEngineClient(engine.apiKey, engine.endpoint, this.clientIdentity);\n        }\n        const { data, errors } = await this.client.execute({\n            query: exports.SCHEMA_QUERY,\n            variables: {\n                id: this.config.graph,\n                tag: override && override.tag ? override.tag : this.config.variant\n            }\n        });\n        if (errors) {\n            throw new Error(errors.map(({ message }) => message).join(\"\\n\"));\n        }\n        if (!(data && data.service && data.service.__typename === \"Service\")) {\n            throw new Error(`Unable to get schema from Apollo Graph Manager for graph ${this.config.graph}`);\n        }\n        this.schema = graphql_1.buildClientSchema(data.service.schema);\n        return this.schema;\n    }\n    onSchemaChange(_handler) {\n        throw new Error(\"Polling of Apollo Graph Manager not implemented yet\");\n        return () => { };\n    }\n    async resolveFederatedServiceSDL() {\n        utilities_1.Debug.error(\"Cannot resolve a federated service's SDL from Apollo Graph Manager. Use an endpoint or a file instead\");\n        return;\n    }\n}\nexports.EngineSchemaProvider = EngineSchemaProvider;\nexports.SCHEMA_QUERY = graphql_tag_1.default `\n  query GetSchemaByTag($tag: String!, $id: ID!) {\n    service(id: $id) {\n      ... on Service {\n        __typename\n        schema(tag: $tag) {\n          hash\n          __schema: introspection {\n            queryType {\n              name\n            }\n            mutationType {\n              name\n            }\n            subscriptionType {\n              name\n            }\n            types(filter: { includeBuiltInTypes: true }) {\n              ...IntrospectionFullType\n            }\n            directives {\n              name\n              description\n              locations\n              args {\n                ...IntrospectionInputValue\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment IntrospectionFullType on IntrospectionType {\n    kind\n    name\n    description\n    fields {\n      name\n      description\n      args {\n        ...IntrospectionInputValue\n      }\n      type {\n        ...IntrospectionTypeRef\n      }\n      isDeprecated\n      deprecationReason\n    }\n    inputFields {\n      ...IntrospectionInputValue\n    }\n    interfaces {\n      ...IntrospectionTypeRef\n    }\n    enumValues(includeDeprecated: true) {\n      name\n      description\n      isDeprecated\n      deprecationReason\n    }\n    possibleTypes {\n      ...IntrospectionTypeRef\n    }\n  }\n\n  fragment IntrospectionInputValue on IntrospectionInputValue {\n    name\n    description\n    type {\n      ...IntrospectionTypeRef\n    }\n    defaultValue\n  }\n\n  fragment IntrospectionTypeRef on IntrospectionType {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n//# sourceMappingURL=engine.js.map"]},"metadata":{},"sourceType":"script"}