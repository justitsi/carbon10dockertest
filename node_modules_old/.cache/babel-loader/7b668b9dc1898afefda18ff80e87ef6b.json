{"ast":null,"code":"var common = require('./common');\n\nvar _tempDir = require('./tempdir');\n\nvar _pwd = require('./pwd');\n\nvar path = require('path');\n\nvar fs = require('fs');\n\nvar child = require('child_process');\n\nvar DEFAULT_MAXBUFFER_SIZE = 20 * 1024 * 1024;\ncommon.register('exec', _exec, {\n  unix: false,\n  canReceivePipe: true,\n  wrapOutput: false\n}); // Hack to run child_process.exec() synchronously (sync avoids callback hell)\n// Uses a custom wait loop that checks for a flag file, created when the child process is done.\n// (Can't do a wait loop that checks for internal Node variables/messages as\n// Node is single-threaded; callbacks and other internal state changes are done in the\n// event loop).\n\nfunction execSync(cmd, opts, pipe) {\n  if (!common.config.execPath) {\n    common.error('Unable to find a path to the node binary. Please manually set config.execPath');\n  }\n\n  var tempDir = _tempDir();\n\n  var stdoutFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var stderrFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var codeFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var scriptFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var sleepFile = path.resolve(tempDir + '/' + common.randomFileName());\n  opts = common.extend({\n    silent: common.config.silent,\n    cwd: _pwd().toString(),\n    env: process.env,\n    maxBuffer: DEFAULT_MAXBUFFER_SIZE\n  }, opts);\n  var previousStdoutContent = '';\n  var previousStderrContent = ''; // Echoes stdout and stderr changes from running process, if not silent\n\n  function updateStream(streamFile) {\n    if (opts.silent || !fs.existsSync(streamFile)) {\n      return;\n    }\n\n    var previousStreamContent;\n    var procStream;\n\n    if (streamFile === stdoutFile) {\n      previousStreamContent = previousStdoutContent;\n      procStream = process.stdout;\n    } else {\n      // assume stderr\n      previousStreamContent = previousStderrContent;\n      procStream = process.stderr;\n    }\n\n    var streamContent = fs.readFileSync(streamFile, 'utf8'); // No changes since last time?\n\n    if (streamContent.length <= previousStreamContent.length) {\n      return;\n    }\n\n    procStream.write(streamContent.substr(previousStreamContent.length));\n    previousStreamContent = streamContent;\n  }\n\n  if (fs.existsSync(scriptFile)) common.unlinkSync(scriptFile);\n  if (fs.existsSync(stdoutFile)) common.unlinkSync(stdoutFile);\n  if (fs.existsSync(stderrFile)) common.unlinkSync(stderrFile);\n  if (fs.existsSync(codeFile)) common.unlinkSync(codeFile);\n  var execCommand = JSON.stringify(common.config.execPath) + ' ' + JSON.stringify(scriptFile);\n  var script;\n  opts.cwd = path.resolve(opts.cwd);\n  var optString = JSON.stringify(opts);\n\n  if (typeof child.execSync === 'function') {\n    script = [\"var child = require('child_process')\", \"  , fs = require('fs');\", 'var childProcess = child.exec(' + JSON.stringify(cmd) + ', ' + optString + ', function(err) {', '  var fname = ' + JSON.stringify(codeFile) + ';', '  if (!err) {', '    fs.writeFileSync(fname, \"0\");', '  } else if (err.code === undefined) {', '    fs.writeFileSync(fname, \"1\");', '  } else {', '    fs.writeFileSync(fname, err.code.toString());', '  }', '});', 'var stdoutStream = fs.createWriteStream(' + JSON.stringify(stdoutFile) + ');', 'var stderrStream = fs.createWriteStream(' + JSON.stringify(stderrFile) + ');', 'childProcess.stdout.pipe(stdoutStream, {end: false});', 'childProcess.stderr.pipe(stderrStream, {end: false});', 'childProcess.stdout.pipe(process.stdout);', 'childProcess.stderr.pipe(process.stderr);'].join('\\n') + (pipe ? '\\nchildProcess.stdin.end(' + JSON.stringify(pipe) + ');\\n' : '\\n') + ['var stdoutEnded = false, stderrEnded = false;', 'function tryClosingStdout(){ if(stdoutEnded){ stdoutStream.end(); } }', 'function tryClosingStderr(){ if(stderrEnded){ stderrStream.end(); } }', \"childProcess.stdout.on('end', function(){ stdoutEnded = true; tryClosingStdout(); });\", \"childProcess.stderr.on('end', function(){ stderrEnded = true; tryClosingStderr(); });\"].join('\\n');\n    fs.writeFileSync(scriptFile, script);\n\n    if (opts.silent) {\n      opts.stdio = 'ignore';\n    } else {\n      opts.stdio = [0, 1, 2];\n    } // Welcome to the future\n\n\n    try {\n      child.execSync(execCommand, opts);\n    } catch (e) {\n      // Clean up immediately if we have an exception\n      try {\n        common.unlinkSync(scriptFile);\n      } catch (e2) {}\n\n      try {\n        common.unlinkSync(stdoutFile);\n      } catch (e2) {}\n\n      try {\n        common.unlinkSync(stderrFile);\n      } catch (e2) {}\n\n      try {\n        common.unlinkSync(codeFile);\n      } catch (e2) {}\n\n      throw e;\n    }\n  } else {\n    cmd += ' > ' + stdoutFile + ' 2> ' + stderrFile; // works on both win/unix\n\n    script = [\"var child = require('child_process')\", \"  , fs = require('fs');\", 'var childProcess = child.exec(' + JSON.stringify(cmd) + ', ' + optString + ', function(err) {', '  var fname = ' + JSON.stringify(codeFile) + ';', '  if (!err) {', '    fs.writeFileSync(fname, \"0\");', '  } else if (err.code === undefined) {', '    fs.writeFileSync(fname, \"1\");', '  } else {', '    fs.writeFileSync(fname, err.code.toString());', '  }', '});'].join('\\n') + (pipe ? '\\nchildProcess.stdin.end(' + JSON.stringify(pipe) + ');\\n' : '\\n');\n    fs.writeFileSync(scriptFile, script);\n    child.exec(execCommand, opts); // The wait loop\n    // sleepFile is used as a dummy I/O op to mitigate unnecessary CPU usage\n    // (tried many I/O sync ops, writeFileSync() seems to be only one that is effective in reducing\n    // CPU usage, though apparently not so much on Windows)\n\n    while (!fs.existsSync(codeFile)) {\n      updateStream(stdoutFile);\n      fs.writeFileSync(sleepFile, 'a');\n    }\n\n    while (!fs.existsSync(stdoutFile)) {\n      updateStream(stdoutFile);\n      fs.writeFileSync(sleepFile, 'a');\n    }\n\n    while (!fs.existsSync(stderrFile)) {\n      updateStream(stderrFile);\n      fs.writeFileSync(sleepFile, 'a');\n    }\n\n    try {\n      common.unlinkSync(sleepFile);\n    } catch (e) {}\n  } // At this point codeFile exists, but it's not necessarily flushed yet.\n  // Keep reading it until it is.\n\n\n  var code = parseInt('', 10);\n\n  while (isNaN(code)) {\n    code = parseInt(fs.readFileSync(codeFile, 'utf8'), 10);\n  }\n\n  var stdout = fs.readFileSync(stdoutFile, 'utf8');\n  var stderr = fs.readFileSync(stderrFile, 'utf8'); // No biggie if we can't erase the files now -- they're in a temp dir anyway\n\n  try {\n    common.unlinkSync(scriptFile);\n  } catch (e) {}\n\n  try {\n    common.unlinkSync(stdoutFile);\n  } catch (e) {}\n\n  try {\n    common.unlinkSync(stderrFile);\n  } catch (e) {}\n\n  try {\n    common.unlinkSync(codeFile);\n  } catch (e) {}\n\n  if (code !== 0) {\n    common.error('', code, {\n      continue: true\n    });\n  }\n\n  var obj = common.ShellString(stdout, stderr, code);\n  return obj;\n} // execSync()\n// Wrapper around exec() to enable echoing output to console in real time\n\n\nfunction execAsync(cmd, opts, pipe, callback) {\n  var stdout = '';\n  var stderr = '';\n  opts = common.extend({\n    silent: common.config.silent,\n    cwd: _pwd().toString(),\n    env: process.env,\n    maxBuffer: DEFAULT_MAXBUFFER_SIZE\n  }, opts);\n  var c = child.exec(cmd, opts, function (err) {\n    if (callback) {\n      if (!err) {\n        callback(0, stdout, stderr);\n      } else if (err.code === undefined) {\n        // See issue #536\n        callback(1, stdout, stderr);\n      } else {\n        callback(err.code, stdout, stderr);\n      }\n    }\n  });\n  if (pipe) c.stdin.end(pipe);\n  c.stdout.on('data', function (data) {\n    stdout += data;\n    if (!opts.silent) process.stdout.write(data);\n  });\n  c.stderr.on('data', function (data) {\n    stderr += data;\n    if (!opts.silent) process.stderr.write(data);\n  });\n  return c;\n} //@\n//@ ### exec(command [, options] [, callback])\n//@ Available options (all `false` by default):\n//@\n//@ + `async`: Asynchronous execution. If a callback is provided, it will be set to\n//@   `true`, regardless of the passed value.\n//@ + `silent`: Do not echo program output to console.\n//@ + and any option available to Node.js's\n//@   [child_process.exec()](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var version = exec('node --version', {silent:true}).stdout;\n//@\n//@ var child = exec('some_long_running_process', {async:true});\n//@ child.stdout.on('data', function(data) {\n//@   /* ... do something with data ... */\n//@ });\n//@\n//@ exec('some_long_running_process', function(code, stdout, stderr) {\n//@   console.log('Exit code:', code);\n//@   console.log('Program output:', stdout);\n//@   console.log('Program stderr:', stderr);\n//@ });\n//@ ```\n//@\n//@ Executes the given `command` _synchronously_, unless otherwise specified.  When in synchronous\n//@ mode, this returns a ShellString (compatible with ShellJS v0.6.x, which returns an object\n//@ of the form `{ code:..., stdout:... , stderr:... }`). Otherwise, this returns the child process\n//@ object, and the `callback` gets the arguments `(code, stdout, stderr)`.\n//@\n//@ Not seeing the behavior you want? `exec()` runs everything through `sh`\n//@ by default (or `cmd.exe` on Windows), which differs from `bash`. If you\n//@ need bash-specific behavior, try out the `{shell: 'path/to/bash'}` option.\n//@\n//@ **Note:** For long-lived processes, it's best to run `exec()` asynchronously as\n//@ the current synchronous implementation uses a lot of CPU. This should be getting\n//@ fixed soon.\n\n\nfunction _exec(command, options, callback) {\n  options = options || {};\n  if (!command) common.error('must specify command');\n  var pipe = common.readFromPipe(); // Callback is defined instead of options.\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {\n      async: true\n    };\n  } // Callback is defined with options.\n\n\n  if (typeof options === 'object' && typeof callback === 'function') {\n    options.async = true;\n  }\n\n  options = common.extend({\n    silent: common.config.silent,\n    async: false\n  }, options);\n\n  try {\n    if (options.async) {\n      return execAsync(command, options, pipe, callback);\n    } else {\n      return execSync(command, options, pipe);\n    }\n  } catch (e) {\n    common.error('internal error');\n  }\n}\n\nmodule.exports = _exec;","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/shelljs/src/exec.js"],"names":["common","require","_tempDir","_pwd","path","fs","child","DEFAULT_MAXBUFFER_SIZE","register","_exec","unix","canReceivePipe","wrapOutput","execSync","cmd","opts","pipe","config","execPath","error","tempDir","stdoutFile","resolve","randomFileName","stderrFile","codeFile","scriptFile","sleepFile","extend","silent","cwd","toString","env","process","maxBuffer","previousStdoutContent","previousStderrContent","updateStream","streamFile","existsSync","previousStreamContent","procStream","stdout","stderr","streamContent","readFileSync","length","write","substr","unlinkSync","execCommand","JSON","stringify","script","optString","join","writeFileSync","stdio","e","e2","exec","code","parseInt","isNaN","continue","obj","ShellString","execAsync","callback","c","err","undefined","stdin","end","on","data","command","options","readFromPipe","async","module","exports"],"mappings":"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","sourcesContent":["var common = require('./common');\nvar _tempDir = require('./tempdir');\nvar _pwd = require('./pwd');\nvar path = require('path');\nvar fs = require('fs');\nvar child = require('child_process');\n\nvar DEFAULT_MAXBUFFER_SIZE = 20 * 1024 * 1024;\n\ncommon.register('exec', _exec, {\n  unix: false,\n  canReceivePipe: true,\n  wrapOutput: false,\n});\n\n// Hack to run child_process.exec() synchronously (sync avoids callback hell)\n// Uses a custom wait loop that checks for a flag file, created when the child process is done.\n// (Can't do a wait loop that checks for internal Node variables/messages as\n// Node is single-threaded; callbacks and other internal state changes are done in the\n// event loop).\nfunction execSync(cmd, opts, pipe) {\n  if (!common.config.execPath) {\n    common.error('Unable to find a path to the node binary. Please manually set config.execPath');\n  }\n\n  var tempDir = _tempDir();\n  var stdoutFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var stderrFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var codeFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var scriptFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var sleepFile = path.resolve(tempDir + '/' + common.randomFileName());\n\n  opts = common.extend({\n    silent: common.config.silent,\n    cwd: _pwd().toString(),\n    env: process.env,\n    maxBuffer: DEFAULT_MAXBUFFER_SIZE,\n  }, opts);\n\n  var previousStdoutContent = '';\n  var previousStderrContent = '';\n  // Echoes stdout and stderr changes from running process, if not silent\n  function updateStream(streamFile) {\n    if (opts.silent || !fs.existsSync(streamFile)) {\n      return;\n    }\n\n    var previousStreamContent;\n    var procStream;\n    if (streamFile === stdoutFile) {\n      previousStreamContent = previousStdoutContent;\n      procStream = process.stdout;\n    } else { // assume stderr\n      previousStreamContent = previousStderrContent;\n      procStream = process.stderr;\n    }\n\n    var streamContent = fs.readFileSync(streamFile, 'utf8');\n    // No changes since last time?\n    if (streamContent.length <= previousStreamContent.length) {\n      return;\n    }\n\n    procStream.write(streamContent.substr(previousStreamContent.length));\n    previousStreamContent = streamContent;\n  }\n\n  if (fs.existsSync(scriptFile)) common.unlinkSync(scriptFile);\n  if (fs.existsSync(stdoutFile)) common.unlinkSync(stdoutFile);\n  if (fs.existsSync(stderrFile)) common.unlinkSync(stderrFile);\n  if (fs.existsSync(codeFile)) common.unlinkSync(codeFile);\n\n  var execCommand = JSON.stringify(common.config.execPath) + ' ' + JSON.stringify(scriptFile);\n  var script;\n\n  opts.cwd = path.resolve(opts.cwd);\n  var optString = JSON.stringify(opts);\n\n  if (typeof child.execSync === 'function') {\n    script = [\n      \"var child = require('child_process')\",\n      \"  , fs = require('fs');\",\n      'var childProcess = child.exec(' + JSON.stringify(cmd) + ', ' + optString + ', function(err) {',\n      '  var fname = ' + JSON.stringify(codeFile) + ';',\n      '  if (!err) {',\n      '    fs.writeFileSync(fname, \"0\");',\n      '  } else if (err.code === undefined) {',\n      '    fs.writeFileSync(fname, \"1\");',\n      '  } else {',\n      '    fs.writeFileSync(fname, err.code.toString());',\n      '  }',\n      '});',\n      'var stdoutStream = fs.createWriteStream(' + JSON.stringify(stdoutFile) + ');',\n      'var stderrStream = fs.createWriteStream(' + JSON.stringify(stderrFile) + ');',\n      'childProcess.stdout.pipe(stdoutStream, {end: false});',\n      'childProcess.stderr.pipe(stderrStream, {end: false});',\n      'childProcess.stdout.pipe(process.stdout);',\n      'childProcess.stderr.pipe(process.stderr);',\n    ].join('\\n') +\n      (pipe ? '\\nchildProcess.stdin.end(' + JSON.stringify(pipe) + ');\\n' : '\\n') +\n      [\n        'var stdoutEnded = false, stderrEnded = false;',\n        'function tryClosingStdout(){ if(stdoutEnded){ stdoutStream.end(); } }',\n        'function tryClosingStderr(){ if(stderrEnded){ stderrStream.end(); } }',\n        \"childProcess.stdout.on('end', function(){ stdoutEnded = true; tryClosingStdout(); });\",\n        \"childProcess.stderr.on('end', function(){ stderrEnded = true; tryClosingStderr(); });\",\n      ].join('\\n');\n\n    fs.writeFileSync(scriptFile, script);\n\n    if (opts.silent) {\n      opts.stdio = 'ignore';\n    } else {\n      opts.stdio = [0, 1, 2];\n    }\n\n    // Welcome to the future\n    try {\n      child.execSync(execCommand, opts);\n    } catch (e) {\n      // Clean up immediately if we have an exception\n      try { common.unlinkSync(scriptFile); } catch (e2) {}\n      try { common.unlinkSync(stdoutFile); } catch (e2) {}\n      try { common.unlinkSync(stderrFile); } catch (e2) {}\n      try { common.unlinkSync(codeFile); } catch (e2) {}\n      throw e;\n    }\n  } else {\n    cmd += ' > ' + stdoutFile + ' 2> ' + stderrFile; // works on both win/unix\n\n    script = [\n      \"var child = require('child_process')\",\n      \"  , fs = require('fs');\",\n      'var childProcess = child.exec(' + JSON.stringify(cmd) + ', ' + optString + ', function(err) {',\n      '  var fname = ' + JSON.stringify(codeFile) + ';',\n      '  if (!err) {',\n      '    fs.writeFileSync(fname, \"0\");',\n      '  } else if (err.code === undefined) {',\n      '    fs.writeFileSync(fname, \"1\");',\n      '  } else {',\n      '    fs.writeFileSync(fname, err.code.toString());',\n      '  }',\n      '});',\n    ].join('\\n') +\n      (pipe ? '\\nchildProcess.stdin.end(' + JSON.stringify(pipe) + ');\\n' : '\\n');\n\n    fs.writeFileSync(scriptFile, script);\n\n    child.exec(execCommand, opts);\n\n    // The wait loop\n    // sleepFile is used as a dummy I/O op to mitigate unnecessary CPU usage\n    // (tried many I/O sync ops, writeFileSync() seems to be only one that is effective in reducing\n    // CPU usage, though apparently not so much on Windows)\n    while (!fs.existsSync(codeFile)) { updateStream(stdoutFile); fs.writeFileSync(sleepFile, 'a'); }\n    while (!fs.existsSync(stdoutFile)) { updateStream(stdoutFile); fs.writeFileSync(sleepFile, 'a'); }\n    while (!fs.existsSync(stderrFile)) { updateStream(stderrFile); fs.writeFileSync(sleepFile, 'a'); }\n    try { common.unlinkSync(sleepFile); } catch (e) {}\n  }\n\n  // At this point codeFile exists, but it's not necessarily flushed yet.\n  // Keep reading it until it is.\n  var code = parseInt('', 10);\n  while (isNaN(code)) {\n    code = parseInt(fs.readFileSync(codeFile, 'utf8'), 10);\n  }\n\n  var stdout = fs.readFileSync(stdoutFile, 'utf8');\n  var stderr = fs.readFileSync(stderrFile, 'utf8');\n\n  // No biggie if we can't erase the files now -- they're in a temp dir anyway\n  try { common.unlinkSync(scriptFile); } catch (e) {}\n  try { common.unlinkSync(stdoutFile); } catch (e) {}\n  try { common.unlinkSync(stderrFile); } catch (e) {}\n  try { common.unlinkSync(codeFile); } catch (e) {}\n\n  if (code !== 0) {\n    common.error('', code, { continue: true });\n  }\n  var obj = common.ShellString(stdout, stderr, code);\n  return obj;\n} // execSync()\n\n// Wrapper around exec() to enable echoing output to console in real time\nfunction execAsync(cmd, opts, pipe, callback) {\n  var stdout = '';\n  var stderr = '';\n\n  opts = common.extend({\n    silent: common.config.silent,\n    cwd: _pwd().toString(),\n    env: process.env,\n    maxBuffer: DEFAULT_MAXBUFFER_SIZE,\n  }, opts);\n\n  var c = child.exec(cmd, opts, function (err) {\n    if (callback) {\n      if (!err) {\n        callback(0, stdout, stderr);\n      } else if (err.code === undefined) {\n        // See issue #536\n        callback(1, stdout, stderr);\n      } else {\n        callback(err.code, stdout, stderr);\n      }\n    }\n  });\n\n  if (pipe) c.stdin.end(pipe);\n\n  c.stdout.on('data', function (data) {\n    stdout += data;\n    if (!opts.silent) process.stdout.write(data);\n  });\n\n  c.stderr.on('data', function (data) {\n    stderr += data;\n    if (!opts.silent) process.stderr.write(data);\n  });\n\n  return c;\n}\n\n//@\n//@ ### exec(command [, options] [, callback])\n//@ Available options (all `false` by default):\n//@\n//@ + `async`: Asynchronous execution. If a callback is provided, it will be set to\n//@   `true`, regardless of the passed value.\n//@ + `silent`: Do not echo program output to console.\n//@ + and any option available to Node.js's\n//@   [child_process.exec()](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var version = exec('node --version', {silent:true}).stdout;\n//@\n//@ var child = exec('some_long_running_process', {async:true});\n//@ child.stdout.on('data', function(data) {\n//@   /* ... do something with data ... */\n//@ });\n//@\n//@ exec('some_long_running_process', function(code, stdout, stderr) {\n//@   console.log('Exit code:', code);\n//@   console.log('Program output:', stdout);\n//@   console.log('Program stderr:', stderr);\n//@ });\n//@ ```\n//@\n//@ Executes the given `command` _synchronously_, unless otherwise specified.  When in synchronous\n//@ mode, this returns a ShellString (compatible with ShellJS v0.6.x, which returns an object\n//@ of the form `{ code:..., stdout:... , stderr:... }`). Otherwise, this returns the child process\n//@ object, and the `callback` gets the arguments `(code, stdout, stderr)`.\n//@\n//@ Not seeing the behavior you want? `exec()` runs everything through `sh`\n//@ by default (or `cmd.exe` on Windows), which differs from `bash`. If you\n//@ need bash-specific behavior, try out the `{shell: 'path/to/bash'}` option.\n//@\n//@ **Note:** For long-lived processes, it's best to run `exec()` asynchronously as\n//@ the current synchronous implementation uses a lot of CPU. This should be getting\n//@ fixed soon.\nfunction _exec(command, options, callback) {\n  options = options || {};\n  if (!command) common.error('must specify command');\n\n  var pipe = common.readFromPipe();\n\n  // Callback is defined instead of options.\n  if (typeof options === 'function') {\n    callback = options;\n    options = { async: true };\n  }\n\n  // Callback is defined with options.\n  if (typeof options === 'object' && typeof callback === 'function') {\n    options.async = true;\n  }\n\n  options = common.extend({\n    silent: common.config.silent,\n    async: false,\n  }, options);\n\n  try {\n    if (options.async) {\n      return execAsync(command, options, pipe, callback);\n    } else {\n      return execSync(command, options, pipe);\n    }\n  } catch (e) {\n    common.error('internal error');\n  }\n}\nmodule.exports = _exec;\n"]},"metadata":{},"sourceType":"script"}