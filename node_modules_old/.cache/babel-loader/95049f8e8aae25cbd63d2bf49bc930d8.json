{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst createAndTrimStackTrace = () => {\n  let stack = new Error().stack;\n  return stack && stack.split(\"\\n\").length > 2 ? stack.split(\"\\n\").slice(3, 7).join(\"\\n\") : stack;\n};\n\nclass Debug {\n  static SetConnection(conn) {\n    Debug.connection = conn;\n\n    Debug.infoLogger = message => Debug.connection.sendNotification(\"serverDebugMessage\", {\n      type: \"info\",\n      message: message\n    });\n\n    Debug.warningLogger = message => Debug.connection.sendNotification(\"serverDebugMessage\", {\n      type: \"warning\",\n      message: message\n    });\n\n    Debug.errorLogger = message => Debug.connection.sendNotification(\"serverDebugMessage\", {\n      type: \"error\",\n      message: message\n    });\n  }\n\n  static SetLoggers({\n    info,\n    warning,\n    error\n  }) {\n    if (info) Debug.infoLogger = info;\n    if (warning) Debug.warningLogger = warning;\n    if (error) Debug.errorLogger = error;\n  }\n\n  static info(message) {\n    Debug.infoLogger(message);\n  }\n\n  static error(message) {\n    const stack = createAndTrimStackTrace();\n    Debug.errorLogger(`${message}\\n${stack}`);\n  }\n\n  static warning(message) {\n    Debug.warningLogger(message);\n  }\n\n  static sendErrorTelemetry(message) {\n    Debug.connection && Debug.connection.sendNotification(\"serverDebugMessage\", {\n      type: \"errorTelemetry\",\n      message: message\n    });\n  }\n\n}\n\nexports.Debug = Debug;\n\nDebug.infoLogger = message => console.log(\"[INFO] \" + message);\n\nDebug.warningLogger = message => console.warn(\"[WARNING] \" + message);\n\nDebug.errorLogger = message => console.error(\"[ERROR] \" + message);","map":{"version":3,"sources":["../../src/utilities/debug.ts"],"names":[],"mappings":";;;;;;AAQA,MAAM,uBAAuB,GAAG,MAAK;AACnC,MAAI,KAAK,GAAuB,IAAI,KAAJ,GAAY,KAA5C;AAEA,SAAO,KAAK,IAAI,KAAK,CAAC,KAAN,CAAY,IAAZ,EAAkB,MAAlB,GAA2B,CAApC,GACH,KAAK,CACF,KADH,CACS,IADT,EAEG,KAFH,CAES,CAFT,EAEY,CAFZ,EAGG,IAHH,CAGQ,IAHR,CADG,GAKH,KALJ;AAMD,CATD;;AAaA,MAAa,KAAb,CAAkB;AAaT,SAAO,aAAP,CAAqB,IAArB,EAAsC;AAC3C,IAAA,KAAK,CAAC,UAAN,GAAmB,IAAnB;;AACA,IAAA,KAAK,CAAC,UAAN,GAAmB,OAAO,IACxB,KAAK,CAAC,UAAN,CAAkB,gBAAlB,CAAmC,oBAAnC,EAAyD;AACvD,MAAA,IAAI,EAAE,MADiD;AAEvD,MAAA,OAAO,EAAE;AAF8C,KAAzD,CADF;;AAKA,IAAA,KAAK,CAAC,aAAN,GAAsB,OAAO,IAC3B,KAAK,CAAC,UAAN,CAAkB,gBAAlB,CAAmC,oBAAnC,EAAyD;AACvD,MAAA,IAAI,EAAE,SADiD;AAEvD,MAAA,OAAO,EAAE;AAF8C,KAAzD,CADF;;AAKA,IAAA,KAAK,CAAC,WAAN,GAAoB,OAAO,IACzB,KAAK,CAAC,UAAN,CAAkB,gBAAlB,CAAmC,oBAAnC,EAAyD;AACvD,MAAA,IAAI,EAAE,OADiD;AAEvD,MAAA,OAAO,EAAE;AAF8C,KAAzD,CADF;AAKD;;AAMM,SAAO,UAAP,CAAkB;AACvB,IAAA,IADuB;AAEvB,IAAA,OAFuB;AAGvB,IAAA;AAHuB,GAAlB,EAQN;AACC,QAAI,IAAJ,EAAU,KAAK,CAAC,UAAN,GAAmB,IAAnB;AACV,QAAI,OAAJ,EAAa,KAAK,CAAC,aAAN,GAAsB,OAAtB;AACb,QAAI,KAAJ,EAAW,KAAK,CAAC,WAAN,GAAoB,KAApB;AACZ;;AAEM,SAAO,IAAP,CAAY,OAAZ,EAA2B;AAChC,IAAA,KAAK,CAAC,UAAN,CAAiB,OAAjB;AACD;;AAEM,SAAO,KAAP,CAAa,OAAb,EAA4B;AACjC,UAAM,KAAK,GAAG,uBAAuB,EAArC;AACA,IAAA,KAAK,CAAC,WAAN,CAAkB,GAAG,OAAO,KAAK,KAAK,EAAtC;AACD;;AAEM,SAAO,OAAP,CAAe,OAAf,EAA8B;AACnC,IAAA,KAAK,CAAC,aAAN,CAAoB,OAApB;AACD;;AAEM,SAAO,kBAAP,CAA0B,OAA1B,EAAyC;AAC9C,IAAA,KAAK,CAAC,UAAN,IACE,KAAK,CAAC,UAAN,CAAiB,gBAAjB,CAAkC,oBAAlC,EAAwD;AACtD,MAAA,IAAI,EAAE,gBADgD;AAEtD,MAAA,OAAO,EAAE;AAF6C,KAAxD,CADF;AAKD;;AArEe;;AAAlB,OAAA,CAAA,KAAA,GAAA,KAAA;;AAEiB,KAAA,CAAA,UAAA,GAAqB,OAAO,IACzC,OAAO,CAAC,GAAR,CAAY,YAAY,OAAxB,CADa;;AAEA,KAAA,CAAA,aAAA,GAAwB,OAAO,IAC5C,OAAO,CAAC,IAAR,CAAa,eAAe,OAA5B,CADa;;AAEA,KAAA,CAAA,WAAA,GAAsB,OAAO,IAC1C,OAAO,CAAC,KAAR,CAAc,aAAa,OAA3B,CADa","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst createAndTrimStackTrace = () => {\n    let stack = new Error().stack;\n    return stack && stack.split(\"\\n\").length > 2\n        ? stack\n            .split(\"\\n\")\n            .slice(3, 7)\n            .join(\"\\n\")\n        : stack;\n};\nclass Debug {\n    static SetConnection(conn) {\n        Debug.connection = conn;\n        Debug.infoLogger = message => Debug.connection.sendNotification(\"serverDebugMessage\", {\n            type: \"info\",\n            message: message\n        });\n        Debug.warningLogger = message => Debug.connection.sendNotification(\"serverDebugMessage\", {\n            type: \"warning\",\n            message: message\n        });\n        Debug.errorLogger = message => Debug.connection.sendNotification(\"serverDebugMessage\", {\n            type: \"error\",\n            message: message\n        });\n    }\n    static SetLoggers({ info, warning, error }) {\n        if (info)\n            Debug.infoLogger = info;\n        if (warning)\n            Debug.warningLogger = warning;\n        if (error)\n            Debug.errorLogger = error;\n    }\n    static info(message) {\n        Debug.infoLogger(message);\n    }\n    static error(message) {\n        const stack = createAndTrimStackTrace();\n        Debug.errorLogger(`${message}\\n${stack}`);\n    }\n    static warning(message) {\n        Debug.warningLogger(message);\n    }\n    static sendErrorTelemetry(message) {\n        Debug.connection &&\n            Debug.connection.sendNotification(\"serverDebugMessage\", {\n                type: \"errorTelemetry\",\n                message: message\n            });\n    }\n}\nexports.Debug = Debug;\nDebug.infoLogger = message => console.log(\"[INFO] \" + message);\nDebug.warningLogger = message => console.warn(\"[WARNING] \" + message);\nDebug.errorLogger = message => console.error(\"[ERROR] \" + message);\n//# sourceMappingURL=debug.js.map"]},"metadata":{},"sourceType":"script"}