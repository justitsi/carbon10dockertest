{"ast":null,"code":"'use strict';\n\nconst process = require('process'); // eslint-disable-line node/prefer-global/process\n\n\nconst git = require('./services/git');\n\nconst services = {\n  appveyor: require('./services/appveyor'),\n  bamboo: require('./services/bamboo'),\n  bitbucket: require('./services/bitbucket'),\n  bitrise: require('./services/bitrise'),\n  buddy: require('./services/buddy'),\n  buildkite: require('./services/buildkite'),\n  circleci: require('./services/circleci'),\n  cirrus: require('./services/cirrus'),\n  codebuild: require('./services/codebuild'),\n  codefresh: require('./services/codefresh'),\n  codeship: require('./services/codeship'),\n  drone: require('./services/drone'),\n  github: require('./services/github'),\n  gitlab: require('./services/gitlab'),\n  jenkins: require('./services/jenkins'),\n  sail: require('./services/sail'),\n  semaphore: require('./services/semaphore'),\n  shippable: require('./services/shippable'),\n  teamcity: require('./services/teamcity'),\n  travis: require('./services/travis'),\n  vsts: require('./services/vsts'),\n  wercker: require('./services/wercker')\n};\n\nmodule.exports = ({\n  env = process.env,\n  cwd = process.cwd()\n} = {}) => {\n  for (const name of Object.keys(services)) {\n    if (services[name].detect({\n      env,\n      cwd\n    })) {\n      return Object.assign({\n        isCi: true\n      }, services[name].configuration({\n        env,\n        cwd\n      }));\n    }\n  }\n\n  return Object.assign({\n    isCi: Boolean(env.CI)\n  }, git.configuration({\n    env,\n    cwd\n  }));\n};","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/env-ci/index.js"],"names":["process","require","git","services","appveyor","bamboo","bitbucket","bitrise","buddy","buildkite","circleci","cirrus","codebuild","codefresh","codeship","drone","github","gitlab","jenkins","sail","semaphore","shippable","teamcity","travis","vsts","wercker","module","exports","env","cwd","name","Object","keys","detect","assign","isCi","configuration","Boolean","CI"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB,C,CAAoC;;;AACpC,MAAMC,GAAG,GAAGD,OAAO,CAAC,gBAAD,CAAnB;;AAEA,MAAME,QAAQ,GAAG;AAChBC,EAAAA,QAAQ,EAAEH,OAAO,CAAC,qBAAD,CADD;AAEhBI,EAAAA,MAAM,EAAEJ,OAAO,CAAC,mBAAD,CAFC;AAGhBK,EAAAA,SAAS,EAAEL,OAAO,CAAC,sBAAD,CAHF;AAIhBM,EAAAA,OAAO,EAAEN,OAAO,CAAC,oBAAD,CAJA;AAKhBO,EAAAA,KAAK,EAAEP,OAAO,CAAC,kBAAD,CALE;AAMhBQ,EAAAA,SAAS,EAAER,OAAO,CAAC,sBAAD,CANF;AAOhBS,EAAAA,QAAQ,EAAET,OAAO,CAAC,qBAAD,CAPD;AAQhBU,EAAAA,MAAM,EAAEV,OAAO,CAAC,mBAAD,CARC;AAShBW,EAAAA,SAAS,EAAEX,OAAO,CAAC,sBAAD,CATF;AAUhBY,EAAAA,SAAS,EAAEZ,OAAO,CAAC,sBAAD,CAVF;AAWhBa,EAAAA,QAAQ,EAAEb,OAAO,CAAC,qBAAD,CAXD;AAYhBc,EAAAA,KAAK,EAAEd,OAAO,CAAC,kBAAD,CAZE;AAahBe,EAAAA,MAAM,EAAEf,OAAO,CAAC,mBAAD,CAbC;AAchBgB,EAAAA,MAAM,EAAEhB,OAAO,CAAC,mBAAD,CAdC;AAehBiB,EAAAA,OAAO,EAAEjB,OAAO,CAAC,oBAAD,CAfA;AAgBhBkB,EAAAA,IAAI,EAAElB,OAAO,CAAC,iBAAD,CAhBG;AAiBhBmB,EAAAA,SAAS,EAAEnB,OAAO,CAAC,sBAAD,CAjBF;AAkBhBoB,EAAAA,SAAS,EAAEpB,OAAO,CAAC,sBAAD,CAlBF;AAmBhBqB,EAAAA,QAAQ,EAAErB,OAAO,CAAC,qBAAD,CAnBD;AAoBhBsB,EAAAA,MAAM,EAAEtB,OAAO,CAAC,mBAAD,CApBC;AAqBhBuB,EAAAA,IAAI,EAAEvB,OAAO,CAAC,iBAAD,CArBG;AAsBhBwB,EAAAA,OAAO,EAAExB,OAAO,CAAC,oBAAD;AAtBA,CAAjB;;AAyBAyB,MAAM,CAACC,OAAP,GAAiB,CAAC;AAACC,EAAAA,GAAG,GAAG5B,OAAO,CAAC4B,GAAf;AAAoBC,EAAAA,GAAG,GAAG7B,OAAO,CAAC6B,GAAR;AAA1B,IAA2C,EAA5C,KAAmD;AACnE,OAAK,MAAMC,IAAX,IAAmBC,MAAM,CAACC,IAAP,CAAY7B,QAAZ,CAAnB,EAA0C;AACzC,QAAIA,QAAQ,CAAC2B,IAAD,CAAR,CAAeG,MAAf,CAAsB;AAACL,MAAAA,GAAD;AAAMC,MAAAA;AAAN,KAAtB,CAAJ,EAAuC;AACtC,aAAOE,MAAM,CAACG,MAAP,CAAc;AAACC,QAAAA,IAAI,EAAE;AAAP,OAAd,EAA4BhC,QAAQ,CAAC2B,IAAD,CAAR,CAAeM,aAAf,CAA6B;AAACR,QAAAA,GAAD;AAAMC,QAAAA;AAAN,OAA7B,CAA5B,CAAP;AACA;AACD;;AAED,SAAOE,MAAM,CAACG,MAAP,CAAc;AAACC,IAAAA,IAAI,EAAEE,OAAO,CAACT,GAAG,CAACU,EAAL;AAAd,GAAd,EAAuCpC,GAAG,CAACkC,aAAJ,CAAkB;AAACR,IAAAA,GAAD;AAAMC,IAAAA;AAAN,GAAlB,CAAvC,CAAP;AACA,CARD","sourcesContent":["'use strict';\n\nconst process = require('process'); // eslint-disable-line node/prefer-global/process\nconst git = require('./services/git');\n\nconst services = {\n\tappveyor: require('./services/appveyor'),\n\tbamboo: require('./services/bamboo'),\n\tbitbucket: require('./services/bitbucket'),\n\tbitrise: require('./services/bitrise'),\n\tbuddy: require('./services/buddy'),\n\tbuildkite: require('./services/buildkite'),\n\tcircleci: require('./services/circleci'),\n\tcirrus: require('./services/cirrus'),\n\tcodebuild: require('./services/codebuild'),\n\tcodefresh: require('./services/codefresh'),\n\tcodeship: require('./services/codeship'),\n\tdrone: require('./services/drone'),\n\tgithub: require('./services/github'),\n\tgitlab: require('./services/gitlab'),\n\tjenkins: require('./services/jenkins'),\n\tsail: require('./services/sail'),\n\tsemaphore: require('./services/semaphore'),\n\tshippable: require('./services/shippable'),\n\tteamcity: require('./services/teamcity'),\n\ttravis: require('./services/travis'),\n\tvsts: require('./services/vsts'),\n\twercker: require('./services/wercker'),\n};\n\nmodule.exports = ({env = process.env, cwd = process.cwd()} = {}) => {\n\tfor (const name of Object.keys(services)) {\n\t\tif (services[name].detect({env, cwd})) {\n\t\t\treturn Object.assign({isCi: true}, services[name].configuration({env, cwd}));\n\t\t}\n\t}\n\n\treturn Object.assign({isCi: Boolean(env.CI)}, git.configuration({env, cwd}));\n};\n"]},"metadata":{},"sourceType":"script"}