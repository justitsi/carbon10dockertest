{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs');\n\ncommon.register('rm', _rm, {\n  cmdOptions: {\n    'f': 'force',\n    'r': 'recursive',\n    'R': 'recursive'\n  }\n}); // Recursively removes 'dir'\n// Adapted from https://github.com/ryanmcgrath/wrench-js\n//\n// Copyright (c) 2010 Ryan McGrath\n// Copyright (c) 2012 Artur Adib\n//\n// Licensed under the MIT License\n// http://www.opensource.org/licenses/mit-license.php\n\nfunction rmdirSyncRecursive(dir, force) {\n  var files;\n  files = fs.readdirSync(dir); // Loop through and delete everything in the sub-tree after checking it\n\n  for (var i = 0; i < files.length; i++) {\n    var file = dir + '/' + files[i];\n    var currFile = fs.lstatSync(file);\n\n    if (currFile.isDirectory()) {\n      // Recursive function back to the beginning\n      rmdirSyncRecursive(file, force);\n    } else {\n      // Assume it's a file - perhaps a try/catch belongs here?\n      if (force || isWriteable(file)) {\n        try {\n          common.unlinkSync(file);\n        } catch (e) {\n          /* istanbul ignore next */\n          common.error('could not remove file (code ' + e.code + '): ' + file, {\n            continue: true\n          });\n        }\n      }\n    }\n  } // Now that we know everything in the sub-tree has been deleted, we can delete the main directory.\n  // Huzzah for the shopkeep.\n\n\n  var result;\n\n  try {\n    // Retry on windows, sometimes it takes a little time before all the files in the directory are gone\n    var start = Date.now(); // TODO: replace this with a finite loop\n\n    for (;;) {\n      try {\n        result = fs.rmdirSync(dir);\n        if (fs.existsSync(dir)) throw {\n          code: 'EAGAIN'\n        };\n        break;\n      } catch (er) {\n        /* istanbul ignore next */\n        // In addition to error codes, also check if the directory still exists and loop again if true\n        if (process.platform === 'win32' && (er.code === 'ENOTEMPTY' || er.code === 'EBUSY' || er.code === 'EPERM' || er.code === 'EAGAIN')) {\n          if (Date.now() - start > 1000) throw er;\n        } else if (er.code === 'ENOENT') {\n          // Directory did not exist, deletion was successful\n          break;\n        } else {\n          throw er;\n        }\n      }\n    }\n  } catch (e) {\n    common.error('could not remove directory (code ' + e.code + '): ' + dir, {\n      continue: true\n    });\n  }\n\n  return result;\n} // rmdirSyncRecursive\n// Hack to determine if file has write permissions for current user\n// Avoids having to check user, group, etc, but it's probably slow\n\n\nfunction isWriteable(file) {\n  var writePermission = true;\n\n  try {\n    var __fd = fs.openSync(file, 'a');\n\n    fs.closeSync(__fd);\n  } catch (e) {\n    writePermission = false;\n  }\n\n  return writePermission;\n} //@\n//@ ### rm([options,] file [, file ...])\n//@ ### rm([options,] file_array)\n//@ Available options:\n//@\n//@ + `-f`: force\n//@ + `-r, -R`: recursive\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ rm('-rf', '/tmp/*');\n//@ rm('some_file.txt', 'another_file.txt');\n//@ rm(['some_file.txt', 'another_file.txt']); // same as above\n//@ ```\n//@\n//@ Removes files.\n\n\nfunction _rm(options, files) {\n  if (!files) common.error('no paths given'); // Convert to array\n\n  files = [].slice.call(arguments, 1);\n  files.forEach(function (file) {\n    var stats;\n\n    try {\n      stats = fs.lstatSync(file); // test for existence\n    } catch (e) {\n      // Path does not exist, no force flag given\n      if (!options.force) {\n        common.error('no such file or directory: ' + file, {\n          continue: true\n        });\n      }\n\n      return; // skip file\n    } // If here, path exists\n\n\n    if (stats.isFile()) {\n      if (options.force || isWriteable(file)) {\n        // -f was passed, or file is writable, so it can be removed\n        common.unlinkSync(file);\n      } else {\n        common.error('permission denied: ' + file, {\n          continue: true\n        });\n      }\n    } else if (stats.isDirectory()) {\n      if (options.recursive) {\n        // -r was passed, so directory can be removed\n        rmdirSyncRecursive(file, options.force);\n      } else {\n        common.error('path is a directory', {\n          continue: true\n        });\n      }\n    } else if (stats.isSymbolicLink() || stats.isFIFO()) {\n      common.unlinkSync(file);\n    }\n  }); // forEach(file)\n\n  return '';\n} // rm\n\n\nmodule.exports = _rm;","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/shelljs/src/rm.js"],"names":["common","require","fs","register","_rm","cmdOptions","rmdirSyncRecursive","dir","force","files","readdirSync","i","length","file","currFile","lstatSync","isDirectory","isWriteable","unlinkSync","e","error","code","continue","result","start","Date","now","rmdirSync","existsSync","er","process","platform","writePermission","__fd","openSync","closeSync","options","slice","call","arguments","forEach","stats","isFile","recursive","isSymbolicLink","isFIFO","module","exports"],"mappings":"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","sourcesContent":["var common = require('./common');\nvar fs = require('fs');\n\ncommon.register('rm', _rm, {\n  cmdOptions: {\n    'f': 'force',\n    'r': 'recursive',\n    'R': 'recursive',\n  },\n});\n\n// Recursively removes 'dir'\n// Adapted from https://github.com/ryanmcgrath/wrench-js\n//\n// Copyright (c) 2010 Ryan McGrath\n// Copyright (c) 2012 Artur Adib\n//\n// Licensed under the MIT License\n// http://www.opensource.org/licenses/mit-license.php\nfunction rmdirSyncRecursive(dir, force) {\n  var files;\n\n  files = fs.readdirSync(dir);\n\n  // Loop through and delete everything in the sub-tree after checking it\n  for (var i = 0; i < files.length; i++) {\n    var file = dir + '/' + files[i];\n    var currFile = fs.lstatSync(file);\n\n    if (currFile.isDirectory()) { // Recursive function back to the beginning\n      rmdirSyncRecursive(file, force);\n    } else { // Assume it's a file - perhaps a try/catch belongs here?\n      if (force || isWriteable(file)) {\n        try {\n          common.unlinkSync(file);\n        } catch (e) {\n          /* istanbul ignore next */\n          common.error('could not remove file (code ' + e.code + '): ' + file, {\n            continue: true,\n          });\n        }\n      }\n    }\n  }\n\n  // Now that we know everything in the sub-tree has been deleted, we can delete the main directory.\n  // Huzzah for the shopkeep.\n\n  var result;\n  try {\n    // Retry on windows, sometimes it takes a little time before all the files in the directory are gone\n    var start = Date.now();\n\n    // TODO: replace this with a finite loop\n    for (;;) {\n      try {\n        result = fs.rmdirSync(dir);\n        if (fs.existsSync(dir)) throw { code: 'EAGAIN' };\n        break;\n      } catch (er) {\n        /* istanbul ignore next */\n        // In addition to error codes, also check if the directory still exists and loop again if true\n        if (process.platform === 'win32' && (er.code === 'ENOTEMPTY' || er.code === 'EBUSY' || er.code === 'EPERM' || er.code === 'EAGAIN')) {\n          if (Date.now() - start > 1000) throw er;\n        } else if (er.code === 'ENOENT') {\n          // Directory did not exist, deletion was successful\n          break;\n        } else {\n          throw er;\n        }\n      }\n    }\n  } catch (e) {\n    common.error('could not remove directory (code ' + e.code + '): ' + dir, { continue: true });\n  }\n\n  return result;\n} // rmdirSyncRecursive\n\n// Hack to determine if file has write permissions for current user\n// Avoids having to check user, group, etc, but it's probably slow\nfunction isWriteable(file) {\n  var writePermission = true;\n  try {\n    var __fd = fs.openSync(file, 'a');\n    fs.closeSync(__fd);\n  } catch (e) {\n    writePermission = false;\n  }\n\n  return writePermission;\n}\n\n//@\n//@ ### rm([options,] file [, file ...])\n//@ ### rm([options,] file_array)\n//@ Available options:\n//@\n//@ + `-f`: force\n//@ + `-r, -R`: recursive\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ rm('-rf', '/tmp/*');\n//@ rm('some_file.txt', 'another_file.txt');\n//@ rm(['some_file.txt', 'another_file.txt']); // same as above\n//@ ```\n//@\n//@ Removes files.\nfunction _rm(options, files) {\n  if (!files) common.error('no paths given');\n\n  // Convert to array\n  files = [].slice.call(arguments, 1);\n\n  files.forEach(function (file) {\n    var stats;\n    try {\n      stats = fs.lstatSync(file); // test for existence\n    } catch (e) {\n      // Path does not exist, no force flag given\n      if (!options.force) {\n        common.error('no such file or directory: ' + file, { continue: true });\n      }\n      return; // skip file\n    }\n\n    // If here, path exists\n    if (stats.isFile()) {\n      if (options.force || isWriteable(file)) {\n        // -f was passed, or file is writable, so it can be removed\n        common.unlinkSync(file);\n      } else {\n        common.error('permission denied: ' + file, { continue: true });\n      }\n    } else if (stats.isDirectory()) {\n      if (options.recursive) {\n        // -r was passed, so directory can be removed\n        rmdirSyncRecursive(file, options.force);\n      } else {\n        common.error('path is a directory', { continue: true });\n      }\n    } else if (stats.isSymbolicLink() || stats.isFIFO()) {\n      common.unlinkSync(file);\n    }\n  }); // forEach(file)\n  return '';\n} // rm\nmodule.exports = _rm;\n"]},"metadata":{},"sourceType":"script"}