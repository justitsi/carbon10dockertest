{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_1 = __importStar(require(\"@oclif/command\"));\n\nconst listr_1 = __importDefault(require(\"listr\"));\n\nconst path_1 = require(\"path\");\n\nconst apollo_language_server_1 = require(\"apollo-language-server\");\n\nconst OclifLoadingHandler_1 = require(\"./OclifLoadingHandler\");\n\nconst vscode_uri_1 = __importDefault(require(\"vscode-uri\"));\n\nconst chalk_1 = __importDefault(require(\"chalk\"));\n\nconst {\n  version,\n  referenceID\n} = require(\"../package.json\");\n\nconst headersArrayToObject = arr => {\n  if (!arr) return;\n  return arr.map(val => JSON.parse(val)).reduce((pre, next) => Object.assign(Object.assign({}, pre), next), {});\n};\n\nclass ProjectCommand extends command_1.default {\n  constructor() {\n    super(...arguments);\n    this.tasks = [];\n    this.type = \"service\";\n  }\n\n  async init() {\n    const {\n      flags,\n      args\n    } = this.parse(this.constructor);\n    this.ctx = {\n      flags,\n      args\n    };\n    apollo_language_server_1.Debug.SetLoggers({\n      info: this.log,\n      warning: this.warn,\n      error: console.error\n    });\n    const config = await this.createConfig(flags);\n    if (!config) return;\n    this.createService(config, flags);\n    this.ctx.config = config;\n    this.tasks.push({\n      title: \"Loading Apollo Project\",\n      task: async ctx => {\n        await this.project.whenReady;\n        ctx = Object.assign(Object.assign({}, ctx), this.ctx);\n      }\n    });\n  }\n\n  async createConfig(flags) {\n    const service = flags.key ? apollo_language_server_1.getServiceFromKey(flags.key) : undefined;\n    const config = await apollo_language_server_1.loadConfig({\n      configPath: flags.config && path_1.parse(path_1.resolve(flags.config)).dir,\n      configFileName: flags.config,\n      name: service,\n      type: this.type\n    });\n\n    if (!config) {\n      this.error(\"A config failed to load, so the command couldn't be run\");\n      this.exit(1);\n      return;\n    }\n\n    config.variant = flags.variant || flags.tag || config.variant;\n    config.graph = flags.graph || apollo_language_server_1.getGraphIdFromConfig(config.rawConfig);\n\n    if (flags.tag) {\n      console.warn(chalk_1.default.yellow(\"Using the --tag flag is deprecated. Please use --variant (or -v) instead.\"));\n    }\n\n    config.setDefaults({\n      engine: {\n        apiKey: flags.key,\n        endpoint: flags.engine\n      }\n    });\n\n    if (flags.endpoint) {\n      config.setDefaults({\n        service: {\n          endpoint: Object.assign({\n            url: flags.endpoint,\n            headers: headersArrayToObject(flags.header)\n          }, flags.skipSSLValidation && {\n            skipSSLValidation: true\n          })\n        }\n      });\n    }\n\n    if (flags.localSchemaFile) {\n      const files = flags.localSchemaFile.split(\",\");\n\n      if (apollo_language_server_1.isClientConfig(config)) {\n        config.setDefaults({\n          client: {\n            service: {\n              localSchemaFile: files\n            }\n          }\n        });\n      } else if (apollo_language_server_1.isServiceConfig(config)) {\n        config.setDefaults({\n          service: {\n            localSchemaFile: files\n          }\n        });\n      }\n    }\n\n    if (this.configMap) {\n      const defaults = this.configMap(flags);\n      config.setDefaults(defaults);\n    }\n\n    const [tokenType, identifier] = config.engine.apiKey && config.engine.apiKey.split(\":\") || [];\n\n    if (tokenType == \"service\" && identifier !== config.graph) {\n      throw new Error(`Cannot specify a service token that does not match graph. Graph ${config.graph} does not match graph from token (${identifier})`);\n    }\n\n    return config;\n  }\n\n  createService(config, flags) {\n    const loadingHandler = new OclifLoadingHandler_1.OclifLoadingHandler(this);\n    const configPath = config.configURI.fsPath;\n    const rootURI = configPath === process.cwd() ? vscode_uri_1.default.file(configPath) : vscode_uri_1.default.file(path_1.parse(configPath).dir);\n    const clientIdentity = {\n      name: \"Apollo CLI\",\n      version,\n      referenceID\n    };\n\n    if (apollo_language_server_1.isServiceConfig(config)) {\n      this.project = new apollo_language_server_1.GraphQLServiceProject({\n        config,\n        loadingHandler,\n        rootURI,\n        clientIdentity\n      });\n    } else if (apollo_language_server_1.isClientConfig(config)) {\n      this.project = new apollo_language_server_1.GraphQLClientProject({\n        config,\n        loadingHandler,\n        rootURI,\n        clientIdentity\n      });\n    } else {\n      throw new Error(\"Unable to resolve project type. Please add either a client or service config. For more information, please refer to https://go.apollo.dev/t/config\");\n    }\n\n    this.ctx.project = this.project;\n  }\n\n  async runTasks(generateTasks, options) {\n    const {\n      ctx\n    } = this;\n\n    if (!ctx) {\n      throw new Error(\"init must be called before trying to access this.ctx\");\n    }\n\n    const tasks = await generateTasks(ctx);\n    return new listr_1.default([...this.tasks, ...tasks], Object.assign(Object.assign(Object.assign({}, process.env.NODE_ENV === \"test\" && {\n      renderer: \"verbose\"\n    }), options && typeof options === \"function\" ? options(ctx) : options), {\n      dateFormat: false\n    })).run();\n  }\n\n  async catch(err) {\n    this.error(err);\n  }\n\n  async finally(err) {}\n\n}\n\nexports.ProjectCommand = ProjectCommand;\nProjectCommand.flags = {\n  config: command_1.flags.string({\n    char: \"c\",\n    description: \"Path to your Apollo config file\"\n  }),\n  header: command_1.flags.string({\n    multiple: true,\n    parse: header => {\n      const separatorIndex = header.indexOf(\":\");\n      const key = header.substring(0, separatorIndex).trim();\n      const value = header.substring(separatorIndex + 1).trim();\n      return JSON.stringify({\n        [key]: value\n      });\n    },\n    description: \"Additional header to send during introspection. May be used multiple times to add multiple headers. NOTE: The `--endpoint` flag is REQUIRED if using the `--header` flag.\"\n  }),\n  endpoint: command_1.flags.string({\n    description: \"The URL for the CLI use to introspect your service\"\n  }),\n  key: command_1.flags.string({\n    description: \"The API key to use for authentication to Apollo Graph Manager\",\n    default: () => process.env.APOLLO_KEY || process.env.ENGINE_API_KEY\n  }),\n  engine: command_1.flags.string({\n    description: \"URL for a custom Apollo Graph Manager deployment\",\n    hidden: true\n  })\n};\n\nclass ClientCommand extends ProjectCommand {\n  constructor(argv, config) {\n    super(argv, config);\n    this.type = \"client\";\n\n    this.configMap = flags => {\n      const config = {\n        client: {\n          name: flags.clientName,\n          referenceID: flags.clientReferenceId,\n          version: flags.clientVersion\n        }\n      };\n\n      if (flags.endpoint) {\n        config.client.service = {\n          url: flags.endpoint,\n          headers: headersArrayToObject(flags.header)\n        };\n      }\n\n      if (flags.includes || flags.queries) {\n        config.client.includes = [flags.includes || flags.queries];\n      }\n\n      if (flags.excludes) {\n        config.client.excludes = [flags.excludes];\n      }\n\n      if (flags.tagName) {\n        config.client.tagName = flags.tagName;\n      }\n\n      return config;\n    };\n  }\n\n}\n\nexports.ClientCommand = ClientCommand;\nClientCommand.flags = Object.assign(Object.assign({}, ProjectCommand.flags), {\n  clientReferenceId: command_1.flags.string({\n    description: \"Reference id for the client which will match ids from client traces, will use clientName if not provided\"\n  }),\n  clientName: command_1.flags.string({\n    description: \"Name of the client that the queries will be attached to\"\n  }),\n  clientVersion: command_1.flags.string({\n    description: \"The version of the client that the queries will be attached to\"\n  }),\n  tag: command_1.flags.string({\n    char: \"t\",\n    description: \"[Deprecated: please use --variant instead] The tag (AKA variant) of the graph in Apollo Graph Manager to associate this client to\",\n    hidden: true,\n    exclusive: [\"variant\"]\n  }),\n  variant: command_1.flags.string({\n    char: \"v\",\n    description: \"The variant of the graph in Apollo Graph Manager to associate this client to\",\n    exclusive: [\"tag\"]\n  }),\n  graph: command_1.flags.string({\n    char: \"g\",\n    description: \"The ID for the graph in Apollo Graph Manager to operate client commands with. Overrides config file if set.\"\n  }),\n  queries: command_1.flags.string({\n    description: \"Deprecated in favor of the includes flag\"\n  }),\n  includes: command_1.flags.string({\n    description: \"Glob of files to search for GraphQL operations. This should be used to find queries *and* any client schema extensions\"\n  }),\n  excludes: command_1.flags.string({\n    description: \"Glob of files to exclude for GraphQL operations. Caveat: this doesn't currently work in watch mode\"\n  }),\n  tagName: command_1.flags.string({\n    description: \"Name of the template literal tag used to identify template literals containing GraphQL queries in Javascript/Typescript code\"\n  })\n});","map":{"version":3,"sources":["../src/Command.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = __importStar(require(\"@oclif/command\"));\nconst listr_1 = __importDefault(require(\"listr\"));\nconst path_1 = require(\"path\");\nconst apollo_language_server_1 = require(\"apollo-language-server\");\nconst OclifLoadingHandler_1 = require(\"./OclifLoadingHandler\");\nconst vscode_uri_1 = __importDefault(require(\"vscode-uri\"));\nconst chalk_1 = __importDefault(require(\"chalk\"));\nconst { version, referenceID } = require(\"../package.json\");\nconst headersArrayToObject = (arr) => {\n    if (!arr)\n        return;\n    return arr\n        .map(val => JSON.parse(val))\n        .reduce((pre, next) => (Object.assign(Object.assign({}, pre), next)), {});\n};\nclass ProjectCommand extends command_1.default {\n    constructor() {\n        super(...arguments);\n        this.tasks = [];\n        this.type = \"service\";\n    }\n    async init() {\n        const { flags, args } = this.parse(this.constructor);\n        this.ctx = { flags, args };\n        apollo_language_server_1.Debug.SetLoggers({\n            info: this.log,\n            warning: this.warn,\n            error: console.error\n        });\n        const config = await this.createConfig(flags);\n        if (!config)\n            return;\n        this.createService(config, flags);\n        this.ctx.config = config;\n        this.tasks.push({\n            title: \"Loading Apollo Project\",\n            task: async (ctx) => {\n                await this.project.whenReady;\n                ctx = Object.assign(Object.assign({}, ctx), this.ctx);\n            }\n        });\n    }\n    async createConfig(flags) {\n        const service = flags.key ? apollo_language_server_1.getServiceFromKey(flags.key) : undefined;\n        const config = await apollo_language_server_1.loadConfig({\n            configPath: flags.config && path_1.parse(path_1.resolve(flags.config)).dir,\n            configFileName: flags.config,\n            name: service,\n            type: this.type\n        });\n        if (!config) {\n            this.error(\"A config failed to load, so the command couldn't be run\");\n            this.exit(1);\n            return;\n        }\n        config.variant = flags.variant || flags.tag || config.variant;\n        config.graph = flags.graph || apollo_language_server_1.getGraphIdFromConfig(config.rawConfig);\n        if (flags.tag) {\n            console.warn(chalk_1.default.yellow(\"Using the --tag flag is deprecated. Please use --variant (or -v) instead.\"));\n        }\n        config.setDefaults({\n            engine: {\n                apiKey: flags.key,\n                endpoint: flags.engine\n            }\n        });\n        if (flags.endpoint) {\n            config.setDefaults({\n                service: {\n                    endpoint: Object.assign({ url: flags.endpoint, headers: headersArrayToObject(flags.header) }, (flags.skipSSLValidation && { skipSSLValidation: true }))\n                }\n            });\n        }\n        if (flags.localSchemaFile) {\n            const files = flags.localSchemaFile.split(\",\");\n            if (apollo_language_server_1.isClientConfig(config)) {\n                config.setDefaults({\n                    client: {\n                        service: {\n                            localSchemaFile: files\n                        }\n                    }\n                });\n            }\n            else if (apollo_language_server_1.isServiceConfig(config)) {\n                config.setDefaults({\n                    service: {\n                        localSchemaFile: files\n                    }\n                });\n            }\n        }\n        if (this.configMap) {\n            const defaults = this.configMap(flags);\n            config.setDefaults(defaults);\n        }\n        const [tokenType, identifier] = (config.engine.apiKey && config.engine.apiKey.split(\":\")) || [];\n        if (tokenType == \"service\" && identifier !== config.graph) {\n            throw new Error(`Cannot specify a service token that does not match graph. Graph ${config.graph} does not match graph from token (${identifier})`);\n        }\n        return config;\n    }\n    createService(config, flags) {\n        const loadingHandler = new OclifLoadingHandler_1.OclifLoadingHandler(this);\n        const configPath = config.configURI.fsPath;\n        const rootURI = configPath === process.cwd()\n            ? vscode_uri_1.default.file(configPath)\n            : vscode_uri_1.default.file(path_1.parse(configPath).dir);\n        const clientIdentity = {\n            name: \"Apollo CLI\",\n            version,\n            referenceID\n        };\n        if (apollo_language_server_1.isServiceConfig(config)) {\n            this.project = new apollo_language_server_1.GraphQLServiceProject({\n                config,\n                loadingHandler,\n                rootURI,\n                clientIdentity\n            });\n        }\n        else if (apollo_language_server_1.isClientConfig(config)) {\n            this.project = new apollo_language_server_1.GraphQLClientProject({\n                config,\n                loadingHandler,\n                rootURI,\n                clientIdentity\n            });\n        }\n        else {\n            throw new Error(\"Unable to resolve project type. Please add either a client or service config. For more information, please refer to https://go.apollo.dev/t/config\");\n        }\n        this.ctx.project = this.project;\n    }\n    async runTasks(generateTasks, options) {\n        const { ctx } = this;\n        if (!ctx) {\n            throw new Error(\"init must be called before trying to access this.ctx\");\n        }\n        const tasks = await generateTasks(ctx);\n        return new listr_1.default([...this.tasks, ...tasks], Object.assign(Object.assign(Object.assign({}, (process.env.NODE_ENV === \"test\" && { renderer: \"verbose\" })), (options && typeof options === \"function\" ? options(ctx) : options)), { dateFormat: false })).run();\n    }\n    async catch(err) {\n        this.error(err);\n    }\n    async finally(err) {\n    }\n}\nexports.ProjectCommand = ProjectCommand;\nProjectCommand.flags = {\n    config: command_1.flags.string({\n        char: \"c\",\n        description: \"Path to your Apollo config file\"\n    }),\n    header: command_1.flags.string({\n        multiple: true,\n        parse: header => {\n            const separatorIndex = header.indexOf(\":\");\n            const key = header.substring(0, separatorIndex).trim();\n            const value = header.substring(separatorIndex + 1).trim();\n            return JSON.stringify({ [key]: value });\n        },\n        description: \"Additional header to send during introspection. May be used multiple times to add multiple headers. NOTE: The `--endpoint` flag is REQUIRED if using the `--header` flag.\"\n    }),\n    endpoint: command_1.flags.string({\n        description: \"The URL for the CLI use to introspect your service\"\n    }),\n    key: command_1.flags.string({\n        description: \"The API key to use for authentication to Apollo Graph Manager\",\n        default: () => process.env.APOLLO_KEY || process.env.ENGINE_API_KEY\n    }),\n    engine: command_1.flags.string({\n        description: \"URL for a custom Apollo Graph Manager deployment\",\n        hidden: true\n    })\n};\nclass ClientCommand extends ProjectCommand {\n    constructor(argv, config) {\n        super(argv, config);\n        this.type = \"client\";\n        this.configMap = (flags) => {\n            const config = {\n                client: {\n                    name: flags.clientName,\n                    referenceID: flags.clientReferenceId,\n                    version: flags.clientVersion\n                }\n            };\n            if (flags.endpoint) {\n                config.client.service = {\n                    url: flags.endpoint,\n                    headers: headersArrayToObject(flags.header)\n                };\n            }\n            if (flags.includes || flags.queries) {\n                config.client.includes = [flags.includes || flags.queries];\n            }\n            if (flags.excludes) {\n                config.client.excludes = [flags.excludes];\n            }\n            if (flags.tagName) {\n                config.client.tagName = flags.tagName;\n            }\n            return config;\n        };\n    }\n}\nexports.ClientCommand = ClientCommand;\nClientCommand.flags = Object.assign(Object.assign({}, ProjectCommand.flags), { clientReferenceId: command_1.flags.string({\n        description: \"Reference id for the client which will match ids from client traces, will use clientName if not provided\"\n    }), clientName: command_1.flags.string({\n        description: \"Name of the client that the queries will be attached to\"\n    }), clientVersion: command_1.flags.string({\n        description: \"The version of the client that the queries will be attached to\"\n    }), tag: command_1.flags.string({\n        char: \"t\",\n        description: \"[Deprecated: please use --variant instead] The tag (AKA variant) of the graph in Apollo Graph Manager to associate this client to\",\n        hidden: true,\n        exclusive: [\"variant\"]\n    }), variant: command_1.flags.string({\n        char: \"v\",\n        description: \"The variant of the graph in Apollo Graph Manager to associate this client to\",\n        exclusive: [\"tag\"]\n    }), graph: command_1.flags.string({\n        char: \"g\",\n        description: \"The ID for the graph in Apollo Graph Manager to operate client commands with. Overrides config file if set.\"\n    }), queries: command_1.flags.string({\n        description: \"Deprecated in favor of the includes flag\"\n    }), includes: command_1.flags.string({\n        description: \"Glob of files to search for GraphQL operations. This should be used to find queries *and* any client schema extensions\"\n    }), excludes: command_1.flags.string({\n        description: \"Glob of files to exclude for GraphQL operations. Caveat: this doesn't currently work in watch mode\"\n    }), tagName: command_1.flags.string({\n        description: \"Name of the template literal tag used to identify template literals containing GraphQL queries in Javascript/Typescript code\"\n    }) });\n//# sourceMappingURL=Command.js.map"]},"metadata":{},"sourceType":"script"}