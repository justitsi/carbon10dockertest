{"ast":null,"code":"/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst path_1 = require(\"path\");\n\nconst os_1 = require(\"os\");\n\nconst crypto_1 = require(\"crypto\");\n\nconst net_1 = require(\"net\");\n\nconst messageReader_1 = require(\"./messageReader\");\n\nconst messageWriter_1 = require(\"./messageWriter\");\n\nfunction generateRandomPipeName() {\n  const randomSuffix = crypto_1.randomBytes(21).toString('hex');\n\n  if (process.platform === 'win32') {\n    return `\\\\\\\\.\\\\pipe\\\\vscode-jsonrpc-${randomSuffix}-sock`;\n  } else {\n    // Mac/Unix: use socket file\n    return path_1.join(os_1.tmpdir(), `vscode-${randomSuffix}.sock`);\n  }\n}\n\nexports.generateRandomPipeName = generateRandomPipeName;\n\nfunction createClientPipeTransport(pipeName, encoding = 'utf-8') {\n  let connectResolve;\n  let connected = new Promise((resolve, _reject) => {\n    connectResolve = resolve;\n  });\n  return new Promise((resolve, reject) => {\n    let server = net_1.createServer(socket => {\n      server.close();\n      connectResolve([new messageReader_1.SocketMessageReader(socket, encoding), new messageWriter_1.SocketMessageWriter(socket, encoding)]);\n    });\n    server.on('error', reject);\n    server.listen(pipeName, () => {\n      server.removeListener('error', reject);\n      resolve({\n        onConnected: () => {\n          return connected;\n        }\n      });\n    });\n  });\n}\n\nexports.createClientPipeTransport = createClientPipeTransport;\n\nfunction createServerPipeTransport(pipeName, encoding = 'utf-8') {\n  const socket = net_1.createConnection(pipeName);\n  return [new messageReader_1.SocketMessageReader(socket, encoding), new messageWriter_1.SocketMessageWriter(socket, encoding)];\n}\n\nexports.createServerPipeTransport = createServerPipeTransport;","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/vscode-jsonrpc/lib/pipeSupport.js"],"names":["Object","defineProperty","exports","value","path_1","require","os_1","crypto_1","net_1","messageReader_1","messageWriter_1","generateRandomPipeName","randomSuffix","randomBytes","toString","process","platform","join","tmpdir","createClientPipeTransport","pipeName","encoding","connectResolve","connected","Promise","resolve","_reject","reject","server","createServer","socket","close","SocketMessageReader","SocketMessageWriter","on","listen","removeListener","onConnected","createServerPipeTransport","createConnection"],"mappings":"AAAA;;;;AAIA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAtB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,IAAD,CAApB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,KAAD,CAArB;;AACA,MAAMI,eAAe,GAAGJ,OAAO,CAAC,iBAAD,CAA/B;;AACA,MAAMK,eAAe,GAAGL,OAAO,CAAC,iBAAD,CAA/B;;AACA,SAASM,sBAAT,GAAkC;AAC9B,QAAMC,YAAY,GAAGL,QAAQ,CAACM,WAAT,CAAqB,EAArB,EAAyBC,QAAzB,CAAkC,KAAlC,CAArB;;AACA,MAAIC,OAAO,CAACC,QAAR,KAAqB,OAAzB,EAAkC;AAC9B,WAAQ,+BAA8BJ,YAAa,OAAnD;AACH,GAFD,MAGK;AACD;AACA,WAAOR,MAAM,CAACa,IAAP,CAAYX,IAAI,CAACY,MAAL,EAAZ,EAA4B,UAASN,YAAa,OAAlD,CAAP;AACH;AACJ;;AACDV,OAAO,CAACS,sBAAR,GAAiCA,sBAAjC;;AACA,SAASQ,yBAAT,CAAmCC,QAAnC,EAA6CC,QAAQ,GAAG,OAAxD,EAAiE;AAC7D,MAAIC,cAAJ;AACA,MAAIC,SAAS,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAC9CJ,IAAAA,cAAc,GAAGG,OAAjB;AACH,GAFe,CAAhB;AAGA,SAAO,IAAID,OAAJ,CAAY,CAACC,OAAD,EAAUE,MAAV,KAAqB;AACpC,QAAIC,MAAM,GAAGpB,KAAK,CAACqB,YAAN,CAAoBC,MAAD,IAAY;AACxCF,MAAAA,MAAM,CAACG,KAAP;AACAT,MAAAA,cAAc,CAAC,CACX,IAAIb,eAAe,CAACuB,mBAApB,CAAwCF,MAAxC,EAAgDT,QAAhD,CADW,EAEX,IAAIX,eAAe,CAACuB,mBAApB,CAAwCH,MAAxC,EAAgDT,QAAhD,CAFW,CAAD,CAAd;AAIH,KANY,CAAb;AAOAO,IAAAA,MAAM,CAACM,EAAP,CAAU,OAAV,EAAmBP,MAAnB;AACAC,IAAAA,MAAM,CAACO,MAAP,CAAcf,QAAd,EAAwB,MAAM;AAC1BQ,MAAAA,MAAM,CAACQ,cAAP,CAAsB,OAAtB,EAA+BT,MAA/B;AACAF,MAAAA,OAAO,CAAC;AACJY,QAAAA,WAAW,EAAE,MAAM;AAAE,iBAAOd,SAAP;AAAmB;AADpC,OAAD,CAAP;AAGH,KALD;AAMH,GAfM,CAAP;AAgBH;;AACDrB,OAAO,CAACiB,yBAAR,GAAoCA,yBAApC;;AACA,SAASmB,yBAAT,CAAmClB,QAAnC,EAA6CC,QAAQ,GAAG,OAAxD,EAAiE;AAC7D,QAAMS,MAAM,GAAGtB,KAAK,CAAC+B,gBAAN,CAAuBnB,QAAvB,CAAf;AACA,SAAO,CACH,IAAIX,eAAe,CAACuB,mBAApB,CAAwCF,MAAxC,EAAgDT,QAAhD,CADG,EAEH,IAAIX,eAAe,CAACuB,mBAApB,CAAwCH,MAAxC,EAAgDT,QAAhD,CAFG,CAAP;AAIH;;AACDnB,OAAO,CAACoC,yBAAR,GAAoCA,yBAApC","sourcesContent":["/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst path_1 = require(\"path\");\r\nconst os_1 = require(\"os\");\r\nconst crypto_1 = require(\"crypto\");\r\nconst net_1 = require(\"net\");\r\nconst messageReader_1 = require(\"./messageReader\");\r\nconst messageWriter_1 = require(\"./messageWriter\");\r\nfunction generateRandomPipeName() {\r\n    const randomSuffix = crypto_1.randomBytes(21).toString('hex');\r\n    if (process.platform === 'win32') {\r\n        return `\\\\\\\\.\\\\pipe\\\\vscode-jsonrpc-${randomSuffix}-sock`;\r\n    }\r\n    else {\r\n        // Mac/Unix: use socket file\r\n        return path_1.join(os_1.tmpdir(), `vscode-${randomSuffix}.sock`);\r\n    }\r\n}\r\nexports.generateRandomPipeName = generateRandomPipeName;\r\nfunction createClientPipeTransport(pipeName, encoding = 'utf-8') {\r\n    let connectResolve;\r\n    let connected = new Promise((resolve, _reject) => {\r\n        connectResolve = resolve;\r\n    });\r\n    return new Promise((resolve, reject) => {\r\n        let server = net_1.createServer((socket) => {\r\n            server.close();\r\n            connectResolve([\r\n                new messageReader_1.SocketMessageReader(socket, encoding),\r\n                new messageWriter_1.SocketMessageWriter(socket, encoding)\r\n            ]);\r\n        });\r\n        server.on('error', reject);\r\n        server.listen(pipeName, () => {\r\n            server.removeListener('error', reject);\r\n            resolve({\r\n                onConnected: () => { return connected; }\r\n            });\r\n        });\r\n    });\r\n}\r\nexports.createClientPipeTransport = createClientPipeTransport;\r\nfunction createServerPipeTransport(pipeName, encoding = 'utf-8') {\r\n    const socket = net_1.createConnection(pipeName);\r\n    return [\r\n        new messageReader_1.SocketMessageReader(socket, encoding),\r\n        new messageWriter_1.SocketMessageWriter(socket, encoding)\r\n    ];\r\n}\r\nexports.createServerPipeTransport = createServerPipeTransport;\r\n"]},"metadata":{},"sourceType":"script"}