{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\ncommon.register('mkdir', _mkdir, {\n  cmdOptions: {\n    'p': 'fullpath'\n  }\n}); // Recursively creates 'dir'\n\nfunction mkdirSyncRecursive(dir) {\n  var baseDir = path.dirname(dir); // Prevents some potential problems arising from malformed UNCs or\n  // insufficient permissions.\n\n  /* istanbul ignore next */\n\n  if (baseDir === dir) {\n    common.error('dirname() failed: [' + dir + ']');\n  } // Base dir exists, no recursion necessary\n\n\n  if (fs.existsSync(baseDir)) {\n    fs.mkdirSync(dir, parseInt('0777', 8));\n    return;\n  } // Base dir does not exist, go recursive\n\n\n  mkdirSyncRecursive(baseDir); // Base dir created, can create dir\n\n  fs.mkdirSync(dir, parseInt('0777', 8));\n} //@\n//@ ### mkdir([options,] dir [, dir ...])\n//@ ### mkdir([options,] dir_array)\n//@ Available options:\n//@\n//@ + `-p`: full path (will create intermediate dirs if necessary)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ mkdir('-p', '/tmp/a/b/c/d', '/tmp/e/f/g');\n//@ mkdir('-p', ['/tmp/a/b/c/d', '/tmp/e/f/g']); // same as above\n//@ ```\n//@\n//@ Creates directories.\n\n\nfunction _mkdir(options, dirs) {\n  if (!dirs) common.error('no paths given');\n\n  if (typeof dirs === 'string') {\n    dirs = [].slice.call(arguments, 1);\n  } // if it's array leave it as it is\n\n\n  dirs.forEach(function (dir) {\n    try {\n      fs.lstatSync(dir);\n\n      if (!options.fullpath) {\n        common.error('path already exists: ' + dir, {\n          continue: true\n        });\n      }\n\n      return; // skip dir\n    } catch (e) {} // do nothing\n    // Base dir does not exist, and no -p option given\n\n\n    var baseDir = path.dirname(dir);\n\n    if (!fs.existsSync(baseDir) && !options.fullpath) {\n      common.error('no such file or directory: ' + baseDir, {\n        continue: true\n      });\n      return; // skip dir\n    }\n\n    try {\n      if (options.fullpath) {\n        mkdirSyncRecursive(path.resolve(dir));\n      } else {\n        fs.mkdirSync(dir, parseInt('0777', 8));\n      }\n    } catch (e) {\n      if (e.code === 'EACCES') {\n        common.error('cannot create directory ' + dir + ': Permission denied');\n      } else {\n        /* istanbul ignore next */\n        throw e;\n      }\n    }\n  });\n  return '';\n} // mkdir\n\n\nmodule.exports = _mkdir;","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/shelljs/src/mkdir.js"],"names":["common","require","fs","path","register","_mkdir","cmdOptions","mkdirSyncRecursive","dir","baseDir","dirname","error","existsSync","mkdirSync","parseInt","options","dirs","slice","call","arguments","forEach","lstatSync","fullpath","continue","e","resolve","code","module","exports"],"mappings":"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","sourcesContent":["var common = require('./common');\nvar fs = require('fs');\nvar path = require('path');\n\ncommon.register('mkdir', _mkdir, {\n  cmdOptions: {\n    'p': 'fullpath',\n  },\n});\n\n// Recursively creates 'dir'\nfunction mkdirSyncRecursive(dir) {\n  var baseDir = path.dirname(dir);\n\n  // Prevents some potential problems arising from malformed UNCs or\n  // insufficient permissions.\n  /* istanbul ignore next */\n  if (baseDir === dir) {\n    common.error('dirname() failed: [' + dir + ']');\n  }\n\n  // Base dir exists, no recursion necessary\n  if (fs.existsSync(baseDir)) {\n    fs.mkdirSync(dir, parseInt('0777', 8));\n    return;\n  }\n\n  // Base dir does not exist, go recursive\n  mkdirSyncRecursive(baseDir);\n\n  // Base dir created, can create dir\n  fs.mkdirSync(dir, parseInt('0777', 8));\n}\n\n//@\n//@ ### mkdir([options,] dir [, dir ...])\n//@ ### mkdir([options,] dir_array)\n//@ Available options:\n//@\n//@ + `-p`: full path (will create intermediate dirs if necessary)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ mkdir('-p', '/tmp/a/b/c/d', '/tmp/e/f/g');\n//@ mkdir('-p', ['/tmp/a/b/c/d', '/tmp/e/f/g']); // same as above\n//@ ```\n//@\n//@ Creates directories.\nfunction _mkdir(options, dirs) {\n  if (!dirs) common.error('no paths given');\n\n  if (typeof dirs === 'string') {\n    dirs = [].slice.call(arguments, 1);\n  }\n  // if it's array leave it as it is\n\n  dirs.forEach(function (dir) {\n    try {\n      fs.lstatSync(dir);\n      if (!options.fullpath) {\n        common.error('path already exists: ' + dir, { continue: true });\n      }\n      return; // skip dir\n    } catch (e) {\n      // do nothing\n    }\n\n    // Base dir does not exist, and no -p option given\n    var baseDir = path.dirname(dir);\n    if (!fs.existsSync(baseDir) && !options.fullpath) {\n      common.error('no such file or directory: ' + baseDir, { continue: true });\n      return; // skip dir\n    }\n\n    try {\n      if (options.fullpath) {\n        mkdirSyncRecursive(path.resolve(dir));\n      } else {\n        fs.mkdirSync(dir, parseInt('0777', 8));\n      }\n    } catch (e) {\n      if (e.code === 'EACCES') {\n        common.error('cannot create directory ' + dir + ': Permission denied');\n      } else {\n        /* istanbul ignore next */\n        throw e;\n      }\n    }\n  });\n  return '';\n} // mkdir\nmodule.exports = _mkdir;\n"]},"metadata":{},"sourceType":"script"}