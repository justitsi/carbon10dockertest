{"ast":null,"code":"var _jsxFileName = \"/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/src/content/SynonymPage/SynonimDisplay.js\";\nimport React, { Component } from 'react';\nimport ItemList from '../../components/ItemList';\nconst headers = [{\n  key: \"word\",\n  header: \"word\"\n}, {\n  key: \"score\",\n  header: \"score\"\n}];\nvar rowsToBeDisplayed = [];\n\nclass WordDisplay extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      word: this.props.word\n    };\n  }\n\n  getWordList() {\n    console.log(\"getting synonyms for word \" + this.props);\n    fetch('https://api.datamuse.com/words?ml=' + this.props.word).then(res => res.json()).then(data => {\n      return data.map((dataPoint, index) => ({\n        id: index,\n        word: dataPoint.word,\n        score: dataPoint.score\n      }));\n    }).catch(console.log);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, \"This is the word display element for the word:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 63\n      }\n    }), \" \", this.props.word), /*#__PURE__*/React.createElement(ItemList, {\n      headers: headers,\n      rows: this.getWordList(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default WordDisplay;","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/src/content/SynonymPage/SynonimDisplay.js"],"names":["React","Component","ItemList","headers","key","header","rowsToBeDisplayed","WordDisplay","state","word","props","getWordList","console","log","fetch","then","res","json","data","map","dataPoint","index","id","score","catch","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,2BAArB;AAEA,MAAMC,OAAO,GAAG,CACZ;AACEC,EAAAA,GAAG,EAAE,MADP;AAEEC,EAAAA,MAAM,EAAE;AAFV,CADY,EAKZ;AACED,EAAAA,GAAG,EAAE,OADP;AAEEC,EAAAA,MAAM,EAAE;AAFV,CALY,CAAhB;AAWA,IAAIC,iBAAiB,GAAG,EAAxB;;AAEA,MAAMC,WAAN,SAA0BP,KAAK,CAACC,SAAhC,CAA0C;AAAA;AAAA;AAAA,SACtCO,KADsC,GAC9B;AACJC,MAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWD;AADb,KAD8B;AAAA;;AAMtCE,EAAAA,WAAW,GAAG;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAA6B,KAAKH,KAA9C;AACAI,IAAAA,KAAK,CAAC,uCAAqC,KAAKJ,KAAL,CAAWD,IAAjD,CAAL,CACCM,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEOG,IAAD,IAAU;AACZ,aAAQA,IAAI,CAACC,GAAL,CAAS,CAACC,SAAD,EAAYC,KAAZ,MAAqB;AACtCC,QAAAA,EAAE,EAACD,KADmC;AAEtCZ,QAAAA,IAAI,EAACW,SAAS,CAACX,IAFuB;AAGtCc,QAAAA,KAAK,EAACH,SAAS,CAACG;AAHsB,OAArB,CAAT,CAAR;AAKH,KARD,EASCC,KATD,CASOZ,OAAO,CAACC,GATf;AAUH;;AAGDY,EAAAA,MAAM,GAAG;AACL,wBACI,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sEAAkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlD,OAAyD,KAAKf,KAAL,CAAWD,IAApE,CADA,eAEA,oBAAC,QAAD;AACI,MAAA,OAAO,EAAIN,OADf;AAEI,MAAA,IAAI,EAAI,KAAKQ,WAAL,EAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,CADJ;AAUH;;AAhCqC;;AAkC1C,eAAeJ,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport ItemList from '../../components/ItemList';\n\nconst headers = [\n    {\n      key: \"word\",\n      header: \"word\",\n    },\n    {\n      key: \"score\",\n      header: \"score\",\n    }\n  ];\n\nvar rowsToBeDisplayed = []\n\nclass WordDisplay extends React.Component {\n    state = {\n        word: this.props.word,\n    }\n\n\n    getWordList (){\n        console.log(\"getting synonyms for word \"+this.props)\n        fetch('https://api.datamuse.com/words?ml='+this.props.word)\n        .then(res => res.json())\n        .then((data) => {\n            return  data.map((dataPoint, index)=>({\n            id:index,\n            word:dataPoint.word,\n            score:dataPoint.score,\n          }));\n        })\n        .catch(console.log)\n    }\n    \n\n    render (){\n        return (\n            <> \n            <h3>This is the word display element for the word:<br/> {this.props.word}</h3>\n            <ItemList\n                headers = {headers}\n                rows = {this.getWordList()}\n            />\n\n            </>\n        );\n    }\n}\nexport default WordDisplay;"]},"metadata":{},"sourceType":"module"}