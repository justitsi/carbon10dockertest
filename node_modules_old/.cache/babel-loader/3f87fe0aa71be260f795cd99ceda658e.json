{"ast":null,"code":"\"use strict\";\n/**\n * protocols\n * Returns the protocols of an input url.\n *\n * @name protocols\n * @function\n * @param {String} input The input url.\n * @param {Boolean|Number} first If `true`, the first protocol will be returned. If number, it will represent the zero-based index of the protocols array.\n * @return {Array|String} The array of protocols or the specified protocol.\n */\n\nmodule.exports = function protocols(input, first) {\n  if (first === true) {\n    first = 0;\n  }\n\n  var index = input.indexOf(\"://\"),\n      splits = input.substring(0, index).split(\"+\").filter(Boolean);\n\n  if (typeof first === \"number\") {\n    return splits[first];\n  }\n\n  return splits;\n};","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/protocols/lib/index.js"],"names":["module","exports","protocols","input","first","index","indexOf","splits","substring","split","filter","Boolean"],"mappings":"AAAA;AAEA;;;;;;;;;;;AAUAA,MAAM,CAACC,OAAP,GAAiB,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,KAA1B,EAAiC;AAE9C,MAAIA,KAAK,KAAK,IAAd,EAAoB;AAChBA,IAAAA,KAAK,GAAG,CAAR;AACH;;AAED,MAAIC,KAAK,GAAGF,KAAK,CAACG,OAAN,CAAc,KAAd,CAAZ;AAAA,MACIC,MAAM,GAAGJ,KAAK,CAACK,SAAN,CAAgB,CAAhB,EAAmBH,KAAnB,EAA0BI,KAA1B,CAAgC,GAAhC,EAAqCC,MAArC,CAA4CC,OAA5C,CADb;;AAGA,MAAI,OAAOP,KAAP,KAAiB,QAArB,EAA+B;AAC3B,WAAOG,MAAM,CAACH,KAAD,CAAb;AACH;;AAED,SAAOG,MAAP;AACH,CAdD","sourcesContent":["\"use strict\";\n\n/**\n * protocols\n * Returns the protocols of an input url.\n *\n * @name protocols\n * @function\n * @param {String} input The input url.\n * @param {Boolean|Number} first If `true`, the first protocol will be returned. If number, it will represent the zero-based index of the protocols array.\n * @return {Array|String} The array of protocols or the specified protocol.\n */\nmodule.exports = function protocols(input, first) {\n\n    if (first === true) {\n        first = 0;\n    }\n\n    var index = input.indexOf(\"://\"),\n        splits = input.substring(0, index).split(\"+\").filter(Boolean);\n\n    if (typeof first === \"number\") {\n        return splits[first];\n    }\n\n    return splits;\n};"]},"metadata":{},"sourceType":"script"}