{"ast":null,"code":"/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst net_1 = require(\"net\");\n\nconst messageReader_1 = require(\"./messageReader\");\n\nconst messageWriter_1 = require(\"./messageWriter\");\n\nfunction createClientSocketTransport(port, encoding = 'utf-8') {\n  let connectResolve;\n  let connected = new Promise((resolve, _reject) => {\n    connectResolve = resolve;\n  });\n  return new Promise((resolve, reject) => {\n    let server = net_1.createServer(socket => {\n      server.close();\n      connectResolve([new messageReader_1.SocketMessageReader(socket, encoding), new messageWriter_1.SocketMessageWriter(socket, encoding)]);\n    });\n    server.on('error', reject);\n    server.listen(port, '127.0.0.1', () => {\n      server.removeListener('error', reject);\n      resolve({\n        onConnected: () => {\n          return connected;\n        }\n      });\n    });\n  });\n}\n\nexports.createClientSocketTransport = createClientSocketTransport;\n\nfunction createServerSocketTransport(port, encoding = 'utf-8') {\n  const socket = net_1.createConnection(port, '127.0.0.1');\n  return [new messageReader_1.SocketMessageReader(socket, encoding), new messageWriter_1.SocketMessageWriter(socket, encoding)];\n}\n\nexports.createServerSocketTransport = createServerSocketTransport;","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/vscode-jsonrpc/lib/socketSupport.js"],"names":["Object","defineProperty","exports","value","net_1","require","messageReader_1","messageWriter_1","createClientSocketTransport","port","encoding","connectResolve","connected","Promise","resolve","_reject","reject","server","createServer","socket","close","SocketMessageReader","SocketMessageWriter","on","listen","removeListener","onConnected","createServerSocketTransport","createConnection"],"mappings":"AAAA;;;;AAIA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,KAAD,CAArB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,iBAAD,CAA/B;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,iBAAD,CAA/B;;AACA,SAASG,2BAAT,CAAqCC,IAArC,EAA2CC,QAAQ,GAAG,OAAtD,EAA+D;AAC3D,MAAIC,cAAJ;AACA,MAAIC,SAAS,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAC9CJ,IAAAA,cAAc,GAAGG,OAAjB;AACH,GAFe,CAAhB;AAGA,SAAO,IAAID,OAAJ,CAAY,CAACC,OAAD,EAAUE,MAAV,KAAqB;AACpC,QAAIC,MAAM,GAAGb,KAAK,CAACc,YAAN,CAAoBC,MAAD,IAAY;AACxCF,MAAAA,MAAM,CAACG,KAAP;AACAT,MAAAA,cAAc,CAAC,CACX,IAAIL,eAAe,CAACe,mBAApB,CAAwCF,MAAxC,EAAgDT,QAAhD,CADW,EAEX,IAAIH,eAAe,CAACe,mBAApB,CAAwCH,MAAxC,EAAgDT,QAAhD,CAFW,CAAD,CAAd;AAIH,KANY,CAAb;AAOAO,IAAAA,MAAM,CAACM,EAAP,CAAU,OAAV,EAAmBP,MAAnB;AACAC,IAAAA,MAAM,CAACO,MAAP,CAAcf,IAAd,EAAoB,WAApB,EAAiC,MAAM;AACnCQ,MAAAA,MAAM,CAACQ,cAAP,CAAsB,OAAtB,EAA+BT,MAA/B;AACAF,MAAAA,OAAO,CAAC;AACJY,QAAAA,WAAW,EAAE,MAAM;AAAE,iBAAOd,SAAP;AAAmB;AADpC,OAAD,CAAP;AAGH,KALD;AAMH,GAfM,CAAP;AAgBH;;AACDV,OAAO,CAACM,2BAAR,GAAsCA,2BAAtC;;AACA,SAASmB,2BAAT,CAAqClB,IAArC,EAA2CC,QAAQ,GAAG,OAAtD,EAA+D;AAC3D,QAAMS,MAAM,GAAGf,KAAK,CAACwB,gBAAN,CAAuBnB,IAAvB,EAA6B,WAA7B,CAAf;AACA,SAAO,CACH,IAAIH,eAAe,CAACe,mBAApB,CAAwCF,MAAxC,EAAgDT,QAAhD,CADG,EAEH,IAAIH,eAAe,CAACe,mBAApB,CAAwCH,MAAxC,EAAgDT,QAAhD,CAFG,CAAP;AAIH;;AACDR,OAAO,CAACyB,2BAAR,GAAsCA,2BAAtC","sourcesContent":["/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst net_1 = require(\"net\");\r\nconst messageReader_1 = require(\"./messageReader\");\r\nconst messageWriter_1 = require(\"./messageWriter\");\r\nfunction createClientSocketTransport(port, encoding = 'utf-8') {\r\n    let connectResolve;\r\n    let connected = new Promise((resolve, _reject) => {\r\n        connectResolve = resolve;\r\n    });\r\n    return new Promise((resolve, reject) => {\r\n        let server = net_1.createServer((socket) => {\r\n            server.close();\r\n            connectResolve([\r\n                new messageReader_1.SocketMessageReader(socket, encoding),\r\n                new messageWriter_1.SocketMessageWriter(socket, encoding)\r\n            ]);\r\n        });\r\n        server.on('error', reject);\r\n        server.listen(port, '127.0.0.1', () => {\r\n            server.removeListener('error', reject);\r\n            resolve({\r\n                onConnected: () => { return connected; }\r\n            });\r\n        });\r\n    });\r\n}\r\nexports.createClientSocketTransport = createClientSocketTransport;\r\nfunction createServerSocketTransport(port, encoding = 'utf-8') {\r\n    const socket = net_1.createConnection(port, '127.0.0.1');\r\n    return [\r\n        new messageReader_1.SocketMessageReader(socket, encoding),\r\n        new messageWriter_1.SocketMessageWriter(socket, encoding)\r\n    ];\r\n}\r\nexports.createServerSocketTransport = createServerSocketTransport;\r\n"]},"metadata":{},"sourceType":"script"}