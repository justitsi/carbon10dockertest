{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _git_log_format_markers = require(\"./constants/git_log_format_markers\");\n\nvar _parse_commit = _interopRequireDefault(require(\"./parse_commit\"));\n\nvar _byline = _interopRequireDefault(require(\"byline\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst parseGitLog = stream => {\n  return new Promise((resolve, reject) => {\n    let buffer = [];\n    const parsedCommits = [];\n    const streamByLine = (0, _byline.default)(stream);\n    const commitPattern = _git_log_format_markers.gitLogCommitMarker;\n    streamByLine.on('data', line => {\n      const lineString = line.toString();\n\n      if (lineString.match(commitPattern)) {\n        if (buffer.length) {\n          parsedCommits.push((0, _parse_commit.default)(buffer));\n          buffer = [];\n        }\n      } else {\n        buffer.push(lineString);\n      }\n    });\n    streamByLine.on('error', e => {\n      reject(e);\n    });\n    streamByLine.on('end', () => {\n      if (buffer.length) {\n        parsedCommits.push((0, _parse_commit.default)(buffer));\n      }\n\n      resolve(parsedCommits);\n    });\n  });\n};\n\nvar _default = parseGitLog;\nexports.default = _default;","map":{"version":3,"sources":["../src/parse_git_log.js"],"names":["parseGitLog","stream","buffer","parsedCommits","streamByLine","commitPattern","gitLogCommitMarker","line","lineString","e","reject","resolve"],"mappings":";;;;;;;AAEA,IAAA,uBAAA,GAAA,OAAA,CAAA,oCAAA,CAAA;;AACA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;;;;;;;AAEA,MAAMA,WAAW,GAAIC,MAAD,IAAuC;AACzD,SAAO,IAAA,OAAA,CAAY,CAAA,OAAA,EAAA,MAAA,KAAqB;AACtC,QAAIC,MAAM,GAAV,EAAA;AACA,UAAMC,aAAa,GAAnB,EAAA;AACA,UAAMC,YAAY,GAAG,CAAA,GAAA,OAAA,CAAA,OAAA,EAArB,MAAqB,CAArB;AACA,UAAMC,aAAa,GAAGC,uBAAAA,CAAtB,kBAAA;AAEAF,IAAAA,YAAY,CAAZA,EAAAA,CAAAA,MAAAA,EAAwBG,IAAI,IAAI;AAC9B,YAAMC,UAAU,GAAGD,IAAI,CAAvB,QAAmBA,EAAnB;;AACA,UAAIC,UAAU,CAAVA,KAAAA,CAAJ,aAAIA,CAAJ,EAAqC;AACnC,YAAIN,MAAM,CAAV,MAAA,EAAmB;AACjBC,UAAAA,aAAa,CAAbA,IAAAA,CAAmB,CAAA,GAAA,aAAA,CAAA,OAAA,EAAnBA,MAAmB,CAAnBA;AACAD,UAAAA,MAAM,GAANA,EAAAA;AACD;AAJH,OAAA,MAKO;AACLA,QAAAA,MAAM,CAANA,IAAAA,CAAAA,UAAAA;AACD;AATHE,KAAAA;AAYAA,IAAAA,YAAY,CAAZA,EAAAA,CAAAA,OAAAA,EAAyBK,CAAC,IAAI;AAC5BC,MAAAA,MAAM,CAANA,CAAM,CAANA;AADFN,KAAAA;AAIAA,IAAAA,YAAY,CAAZA,EAAAA,CAAAA,KAAAA,EAAuB,MAAM;AAC3B,UAAIF,MAAM,CAAV,MAAA,EAAmB;AACjBC,QAAAA,aAAa,CAAbA,IAAAA,CAAmB,CAAA,GAAA,aAAA,CAAA,OAAA,EAAnBA,MAAmB,CAAnBA;AACD;;AACDQ,MAAAA,OAAO,CAAPA,aAAO,CAAPA;AAJFP,KAAAA;AAtBF,GAAO,CAAP;AADF,CAAA;;eAgCeJ,W","sourcesContent":["// @flow\nimport type {GitCommit} from './types/git_commit_type';\nimport {gitLogCommitMarker} from './constants/git_log_format_markers';\nimport parseCommit from './parse_commit';\nimport byline from 'byline';\n\nconst parseGitLog = (stream: any): Promise<GitCommit[]> => {\n  return new Promise((resolve, reject) => {\n    let buffer = [];\n    const parsedCommits = [];\n    const streamByLine = byline(stream);\n    const commitPattern = gitLogCommitMarker;\n\n    streamByLine.on('data', line => {\n      const lineString = line.toString();\n      if (lineString.match(commitPattern)) {\n        if (buffer.length) {\n          parsedCommits.push(parseCommit(buffer));\n          buffer = [];\n        }\n      } else {\n        buffer.push(lineString);\n      }\n    });\n\n    streamByLine.on('error', e => {\n      reject(e);\n    });\n\n    streamByLine.on('end', () => {\n      if (buffer.length) {\n        parsedCommits.push(parseCommit(buffer));\n      }\n      resolve(parsedCommits);\n    });\n  });\n};\n\nexport default parseGitLog;\n"]},"metadata":{},"sourceType":"script"}