{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst config_1 = require(\"../../config\");\n\nconst endpoint_1 = require(\"./endpoint\");\n\nconst engine_1 = require(\"./engine\");\n\nconst file_1 = require(\"./file\");\n\nfunction schemaProviderFromConfig(config, clientIdentity) {\n  if (config.service && config.service.localSchemaFile) {\n    const isListOfSchemaFiles = Array.isArray(config.service.localSchemaFile);\n    return new file_1.FileSchemaProvider(isListOfSchemaFiles ? {\n      paths: config.service.localSchemaFile\n    } : {\n      path: config.service.localSchemaFile\n    });\n  }\n\n  if (config.service && config.service.endpoint) {\n    return new endpoint_1.EndpointSchemaProvider(config.service.endpoint);\n  }\n\n  if (config_1.isClientConfig(config)) {\n    if (typeof config.client.service === \"string\") {\n      return new engine_1.EngineSchemaProvider(config, clientIdentity);\n    }\n\n    if (config.client.service) {\n      if (config_1.isLocalServiceConfig(config.client.service)) {\n        const isListOfSchemaFiles = Array.isArray(config.client.service.localSchemaFile);\n        return new file_1.FileSchemaProvider(isListOfSchemaFiles ? {\n          paths: config.client.service.localSchemaFile\n        } : {\n          path: config.client.service.localSchemaFile\n        });\n      }\n\n      return new endpoint_1.EndpointSchemaProvider(config.client.service);\n    }\n  }\n\n  if (config.graph && config.engine) {\n    return new engine_1.EngineSchemaProvider(config, clientIdentity);\n  }\n\n  throw new Error(\"No schema provider was created, because the project type was unable to be resolved from your config. Please add either a client or service config. For more information, please refer to https://go.apollo.dev/t/config\");\n}\n\nexports.schemaProviderFromConfig = schemaProviderFromConfig;","map":{"version":3,"sources":["../../../src/providers/schema/index.ts"],"names":[],"mappings":";;;;;;AAKA,MAAA,QAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAQA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AASA,SAAgB,wBAAhB,CACE,MADF,EAEE,cAFF,EAEiC;AAK/B,MAAI,MAAM,CAAC,OAAP,IAAkB,MAAM,CAAC,OAAP,CAAe,eAArC,EAAsD;AACpD,UAAM,mBAAmB,GAAG,KAAK,CAAC,OAAN,CAAc,MAAM,CAAC,OAAP,CAAe,eAA7B,CAA5B;AACA,WAAO,IAAI,MAAA,CAAA,kBAAJ,CACL,mBAAmB,GACf;AAAE,MAAA,KAAK,EAAE,MAAM,CAAC,OAAP,CAAe;AAAxB,KADe,GAEf;AAAE,MAAA,IAAI,EAAE,MAAM,CAAC,OAAP,CAAe;AAAvB,KAHC,CAAP;AAKD;;AAED,MAAI,MAAM,CAAC,OAAP,IAAkB,MAAM,CAAC,OAAP,CAAe,QAArC,EAA+C;AAC7C,WAAO,IAAI,UAAA,CAAA,sBAAJ,CAA2B,MAAM,CAAC,OAAP,CAAe,QAA1C,CAAP;AACD;;AAED,MAAI,QAAA,CAAA,cAAA,CAAe,MAAf,CAAJ,EAA4B;AAC1B,QAAI,OAAO,MAAM,CAAC,MAAP,CAAc,OAArB,KAAiC,QAArC,EAA+C;AAC7C,aAAO,IAAI,QAAA,CAAA,oBAAJ,CAAyB,MAAzB,EAAiC,cAAjC,CAAP;AACD;;AAED,QAAI,MAAM,CAAC,MAAP,CAAc,OAAlB,EAA2B;AACzB,UAAI,QAAA,CAAA,oBAAA,CAAqB,MAAM,CAAC,MAAP,CAAc,OAAnC,CAAJ,EAAiD;AAC/C,cAAM,mBAAmB,GAAG,KAAK,CAAC,OAAN,CAC1B,MAAM,CAAC,MAAP,CAAc,OAAd,CAAsB,eADI,CAA5B;AAGA,eAAO,IAAI,MAAA,CAAA,kBAAJ,CACL,mBAAmB,GACf;AAAE,UAAA,KAAK,EAAE,MAAM,CAAC,MAAP,CAAc,OAAd,CAAsB;AAA/B,SADe,GAEf;AACE,UAAA,IAAI,EAAE,MAAM,CAAC,MAAP,CAAc,OAAd,CAAsB;AAD9B,SAHC,CAAP;AAOD;;AAED,aAAO,IAAI,UAAA,CAAA,sBAAJ,CAA2B,MAAM,CAAC,MAAP,CAAc,OAAzC,CAAP;AACD;AACF;;AAED,MAAI,MAAM,CAAC,KAAP,IAAgB,MAAM,CAAC,MAA3B,EAAmC;AACjC,WAAO,IAAI,QAAA,CAAA,oBAAJ,CAAyB,MAAzB,EAAiD,cAAjD,CAAP;AACD;;AAED,QAAM,IAAI,KAAJ,CACJ,yNADI,CAAN;AAGD;;AAlDD,OAAA,CAAA,wBAAA,GAAA,wBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst config_1 = require(\"../../config\");\nconst endpoint_1 = require(\"./endpoint\");\nconst engine_1 = require(\"./engine\");\nconst file_1 = require(\"./file\");\nfunction schemaProviderFromConfig(config, clientIdentity) {\n    if (config.service && config.service.localSchemaFile) {\n        const isListOfSchemaFiles = Array.isArray(config.service.localSchemaFile);\n        return new file_1.FileSchemaProvider(isListOfSchemaFiles\n            ? { paths: config.service.localSchemaFile }\n            : { path: config.service.localSchemaFile });\n    }\n    if (config.service && config.service.endpoint) {\n        return new endpoint_1.EndpointSchemaProvider(config.service.endpoint);\n    }\n    if (config_1.isClientConfig(config)) {\n        if (typeof config.client.service === \"string\") {\n            return new engine_1.EngineSchemaProvider(config, clientIdentity);\n        }\n        if (config.client.service) {\n            if (config_1.isLocalServiceConfig(config.client.service)) {\n                const isListOfSchemaFiles = Array.isArray(config.client.service.localSchemaFile);\n                return new file_1.FileSchemaProvider(isListOfSchemaFiles\n                    ? { paths: config.client.service.localSchemaFile }\n                    : {\n                        path: config.client.service.localSchemaFile\n                    });\n            }\n            return new endpoint_1.EndpointSchemaProvider(config.client.service);\n        }\n    }\n    if (config.graph && config.engine) {\n        return new engine_1.EngineSchemaProvider(config, clientIdentity);\n    }\n    throw new Error(\"No schema provider was created, because the project type was unable to be resolved from your config. Please add either a client or service config. For more information, please refer to https://go.apollo.dev/t/config\");\n}\nexports.schemaProviderFromConfig = schemaProviderFromConfig;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}