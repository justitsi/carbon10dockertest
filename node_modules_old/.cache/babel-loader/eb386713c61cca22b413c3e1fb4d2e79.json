{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs');\n\ncommon.register('head', _head, {\n  canReceivePipe: true,\n  cmdOptions: {\n    'n': 'numLines'\n  }\n}); // This reads n or more lines, or the entire file, whichever is less.\n\nfunction readSomeLines(file, numLines) {\n  var BUF_LENGTH = 64 * 1024;\n  var buf = new Buffer(BUF_LENGTH);\n  var bytesRead = BUF_LENGTH;\n  var pos = 0;\n  var fdr = null;\n\n  try {\n    fdr = fs.openSync(file, 'r');\n  } catch (e) {\n    common.error('cannot read file: ' + file);\n  }\n\n  var numLinesRead = 0;\n  var ret = '';\n\n  while (bytesRead === BUF_LENGTH && numLinesRead < numLines) {\n    bytesRead = fs.readSync(fdr, buf, 0, BUF_LENGTH, pos);\n    var bufStr = buf.toString('utf8', 0, bytesRead);\n    numLinesRead += bufStr.split('\\n').length - 1;\n    ret += bufStr;\n    pos += bytesRead;\n  }\n\n  fs.closeSync(fdr);\n  return ret;\n} //@\n//@ ### head([{'-n': \\<num\\>},] file [, file ...])\n//@ ### head([{'-n': \\<num\\>},] file_array)\n//@ Available options:\n//@\n//@ + `-n <num>`: Show the first `<num>` lines of the files\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var str = head({'-n': 1}, 'file*.txt');\n//@ var str = head('file1', 'file2');\n//@ var str = head(['file1', 'file2']); // same as above\n//@ ```\n//@\n//@ Read the start of a file.\n\n\nfunction _head(options, files) {\n  var head = [];\n  var pipe = common.readFromPipe();\n  if (!files && !pipe) common.error('no paths given');\n  var idx = 1;\n\n  if (options.numLines === true) {\n    idx = 2;\n    options.numLines = Number(arguments[1]);\n  } else if (options.numLines === false) {\n    options.numLines = 10;\n  }\n\n  files = [].slice.call(arguments, idx);\n\n  if (pipe) {\n    files.unshift('-');\n  }\n\n  var shouldAppendNewline = false;\n  files.forEach(function (file) {\n    if (!fs.existsSync(file) && file !== '-') {\n      common.error('no such file or directory: ' + file, {\n        continue: true\n      });\n      return;\n    }\n\n    var contents;\n\n    if (file === '-') {\n      contents = pipe;\n    } else if (options.numLines < 0) {\n      contents = fs.readFileSync(file, 'utf8');\n    } else {\n      contents = readSomeLines(file, options.numLines);\n    }\n\n    var lines = contents.split('\\n');\n    var hasTrailingNewline = lines[lines.length - 1] === '';\n\n    if (hasTrailingNewline) {\n      lines.pop();\n    }\n\n    shouldAppendNewline = hasTrailingNewline || options.numLines < lines.length;\n    head = head.concat(lines.slice(0, options.numLines));\n  });\n\n  if (shouldAppendNewline) {\n    head.push(''); // to add a trailing newline once we join\n  }\n\n  return head.join('\\n');\n}\n\nmodule.exports = _head;","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/shelljs/src/head.js"],"names":["common","require","fs","register","_head","canReceivePipe","cmdOptions","readSomeLines","file","numLines","BUF_LENGTH","buf","Buffer","bytesRead","pos","fdr","openSync","e","error","numLinesRead","ret","readSync","bufStr","toString","split","length","closeSync","options","files","head","pipe","readFromPipe","idx","Number","arguments","slice","call","unshift","shouldAppendNewline","forEach","existsSync","continue","contents","readFileSync","lines","hasTrailingNewline","pop","concat","push","join","module","exports"],"mappings":"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","sourcesContent":["var common = require('./common');\nvar fs = require('fs');\n\ncommon.register('head', _head, {\n  canReceivePipe: true,\n  cmdOptions: {\n    'n': 'numLines',\n  },\n});\n\n// This reads n or more lines, or the entire file, whichever is less.\nfunction readSomeLines(file, numLines) {\n  var BUF_LENGTH = 64 * 1024;\n  var buf = new Buffer(BUF_LENGTH);\n  var bytesRead = BUF_LENGTH;\n  var pos = 0;\n  var fdr = null;\n\n  try {\n    fdr = fs.openSync(file, 'r');\n  } catch (e) {\n    common.error('cannot read file: ' + file);\n  }\n\n  var numLinesRead = 0;\n  var ret = '';\n  while (bytesRead === BUF_LENGTH && numLinesRead < numLines) {\n    bytesRead = fs.readSync(fdr, buf, 0, BUF_LENGTH, pos);\n    var bufStr = buf.toString('utf8', 0, bytesRead);\n    numLinesRead += bufStr.split('\\n').length - 1;\n    ret += bufStr;\n    pos += bytesRead;\n  }\n\n  fs.closeSync(fdr);\n  return ret;\n}\n//@\n//@ ### head([{'-n': \\<num\\>},] file [, file ...])\n//@ ### head([{'-n': \\<num\\>},] file_array)\n//@ Available options:\n//@\n//@ + `-n <num>`: Show the first `<num>` lines of the files\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var str = head({'-n': 1}, 'file*.txt');\n//@ var str = head('file1', 'file2');\n//@ var str = head(['file1', 'file2']); // same as above\n//@ ```\n//@\n//@ Read the start of a file.\nfunction _head(options, files) {\n  var head = [];\n  var pipe = common.readFromPipe();\n\n  if (!files && !pipe) common.error('no paths given');\n\n  var idx = 1;\n  if (options.numLines === true) {\n    idx = 2;\n    options.numLines = Number(arguments[1]);\n  } else if (options.numLines === false) {\n    options.numLines = 10;\n  }\n  files = [].slice.call(arguments, idx);\n\n  if (pipe) {\n    files.unshift('-');\n  }\n\n  var shouldAppendNewline = false;\n  files.forEach(function (file) {\n    if (!fs.existsSync(file) && file !== '-') {\n      common.error('no such file or directory: ' + file, { continue: true });\n      return;\n    }\n\n    var contents;\n    if (file === '-') {\n      contents = pipe;\n    } else if (options.numLines < 0) {\n      contents = fs.readFileSync(file, 'utf8');\n    } else {\n      contents = readSomeLines(file, options.numLines);\n    }\n\n    var lines = contents.split('\\n');\n    var hasTrailingNewline = (lines[lines.length - 1] === '');\n    if (hasTrailingNewline) {\n      lines.pop();\n    }\n    shouldAppendNewline = (hasTrailingNewline || options.numLines < lines.length);\n\n    head = head.concat(lines.slice(0, options.numLines));\n  });\n\n  if (shouldAppendNewline) {\n    head.push(''); // to add a trailing newline once we join\n  }\n  return head.join('\\n');\n}\nmodule.exports = _head;\n"]},"metadata":{},"sourceType":"script"}