{"ast":null,"code":"import _classCallCheck from\"/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import ItemList from'../../components/ItemList';var headers=[{key:\"word\",header:\"Word\"},{key:\"score\",header:\"Score (/100000)\"}];var WordDisplay=/*#__PURE__*/function(_React$Component){_inherits(WordDisplay,_React$Component);var _super=_createSuper(WordDisplay);function WordDisplay(){var _this;_classCallCheck(this,WordDisplay);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={word:_this.props.word,rows:[]};return _this;}_createClass(WordDisplay,[{key:\"getWordList\",value:function getWordList(){var _this2=this;if(this.props.word===this.state.word)return;// this should not be necessary\nconsole.log(\"getting synonyms for word \"+this.props.word);fetch('https://api.datamuse.com/words?ml='+this.props.word).then(function(res){return res.json();}).then(function(data){_this2.setState({word:_this2.props.word,rows:data.map(function(dataPoint,index){return{id:index,word:dataPoint.word,score:dataPoint.score};})});}).then(function(){return;}).catch(console.log);}},{key:\"render\",value:function render(){this.getWordList();return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"h3\",null,\"Showing synonyms for \",this.state.word),/*#__PURE__*/React.createElement(ItemList,{headers:headers,rows:this.state.rows}));}}]);return WordDisplay;}(React.Component);export default WordDisplay;","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/src/content/SynonymPage/SynonimDisplay.js"],"names":["React","Component","ItemList","headers","key","header","WordDisplay","state","word","props","rows","console","log","fetch","then","res","json","data","setState","map","dataPoint","index","id","score","catch","getWordList"],"mappings":"olBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,QAAP,KAAqB,2BAArB,CAEA,GAAMC,CAAAA,OAAO,CAAG,CACZ,CACEC,GAAG,CAAE,MADP,CAEEC,MAAM,CAAE,MAFV,CADY,CAKZ,CACED,GAAG,CAAE,OADP,CAEEC,MAAM,CAAE,iBAFV,CALY,CAAhB,C,GAYMC,CAAAA,W,2VACFC,K,CAAQ,CACJC,IAAI,CAAE,MAAKC,KAAL,CAAWD,IADb,CAEJE,IAAI,CAAI,EAFJ,C,wFAKM,iBACV,GAAI,KAAKD,KAAL,CAAWD,IAAX,GAAkB,KAAKD,KAAL,CAAWC,IAAjC,CAAuC,OAAO;AAC9CG,OAAO,CAACC,GAAR,CAAY,6BAA6B,KAAKH,KAAL,CAAWD,IAApD,EACAK,KAAK,CAAC,qCAAqC,KAAKJ,KAAL,CAAWD,IAAjD,CAAL,CACCM,IADD,CACM,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EADT,EAECF,IAFD,CAEM,SAACG,IAAD,CAAU,CACZ,MAAI,CAACC,QAAL,CAAe,CACXV,IAAI,CAAG,MAAI,CAACC,KAAL,CAAWD,IADP,CAEXE,IAAI,CAAGO,IAAI,CAACE,GAAL,CAAS,SAACC,SAAD,CAAYC,KAAZ,QAAqB,CACjCC,EAAE,CAACD,KAD8B,CAEjCb,IAAI,CAACY,SAAS,CAACZ,IAFkB,CAGjCe,KAAK,CAACH,SAAS,CAACG,KAHiB,CAArB,EAAT,CAFI,CAAf,EAQH,CAXD,EAWGT,IAXH,CAWQ,UAAI,CACR,OACH,CAbD,EAcCU,KAdD,CAcOb,OAAO,CAACC,GAdf,EAeH,C,uCAGQ,CACL,KAAKa,WAAL,GACA,mBACI,qDACI,sDAA0B,KAAKlB,KAAL,CAAWC,IAArC,CADJ,cAEI,oBAAC,QAAD,EACI,OAAO,CAAIL,OADf,CAEI,IAAI,CAAI,KAAKI,KAAL,CAAWG,IAFvB,EAFJ,CADJ,CASH,C,yBAtCqBV,KAAK,CAACC,S,EAwChC,cAAeK,CAAAA,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport ItemList from '../../components/ItemList';\n\nconst headers = [\n    {\n      key: \"word\",\n      header: \"Word\",\n    },\n    {\n      key: \"score\",\n      header: \"Score (/100000)\",\n    }\n  ];\n\n\nclass WordDisplay extends React.Component {\n    state = {\n        word: this.props.word,\n        rows :  []\n    }\n    \n    getWordList (){\n        if (this.props.word===this.state.word) return;// this should not be necessary\n        console.log(\"getting synonyms for word \"+this.props.word)\n        fetch('https://api.datamuse.com/words?ml='+this.props.word)\n        .then(res => res.json())\n        .then((data) => {\n            this.setState ({\n                word : this.props.word,\n                rows : data.map((dataPoint, index)=>({\n                    id:index,\n                    word:dataPoint.word,\n                    score:dataPoint.score,\n                }))\n            });\n        }).then(()=>{\n            return \n        })\n        .catch(console.log)\n    }\n    \n\n    render (){\n        this.getWordList();\n        return (\n            <> \n                <h3>Showing synonyms for {this.state.word}</h3>\n                <ItemList\n                    headers = {headers}\n                    rows = {this.state.rows}\n                />\n            </>\n        );\n    }\n}\nexport default WordDisplay;"]},"metadata":{},"sourceType":"module"}