{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst apollo_link_1 = require(\"apollo-link\");\n\nconst apollo_link_http_1 = require(\"apollo-link-http\");\n\nconst graphql_1 = require(\"graphql\");\n\nconst https_1 = require(\"https\");\n\nconst apollo_env_1 = require(\"apollo-env\");\n\nconst config_1 = require(\"../../config\");\n\nconst utilities_1 = require(\"../../utilities\");\n\nconst util_1 = require(\"util\");\n\nclass EndpointSchemaProvider {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async resolveSchema() {\n    if (this.schema) return this.schema;\n    const {\n      skipSSLValidation,\n      url,\n      headers\n    } = this.config;\n    const options = {\n      uri: url,\n      fetch: apollo_env_1.fetch\n    };\n\n    if (url.startsWith(\"https:\") && skipSSLValidation) {\n      options.fetchOptions = {\n        agent: new https_1.Agent({\n          rejectUnauthorized: false\n        })\n      };\n    }\n\n    const {\n      data,\n      errors\n    } = await apollo_link_1.toPromise(apollo_link_1.execute(apollo_link_http_1.createHttpLink(options), {\n      query: graphql_1.parse(graphql_1.getIntrospectionQuery()),\n      context: {\n        headers\n      }\n    })).catch(e => {\n      if (util_1.isString(e.message) && e.message.includes(\"token <\")) {\n        throw new Error(\"Apollo tried to introspect a running GraphQL service at \" + url + \"\\nIt expected a JSON schema introspection result, but got an HTML response instead.\" + \"\\nYou may need to add headers to your request or adjust your endpoint url.\\n\" + \"-----------------------------\\n\" + \"For more information, please refer to: https://go.apollo.dev/t/config \\n\\n\" + \"The following error occurred:\\n-----------------------------\\n\" + e.message);\n      }\n\n      if (url === config_1.DefaultServiceConfig.endpoint.url && util_1.isString(e.message) && e.message.includes(\"ECONNREFUSED\")) {\n        throw new Error(\"Failed to connect to a running GraphQL endpoint at \" + url + \"\\nThis may be because you didn't start your service.\\n\" + \"By default, when an endpoint, Graph Manager API key, or localSchemaFile isn't provided, Apollo tries to fetch a schema from \" + config_1.DefaultServiceConfig.endpoint.url + \"\\n-----------------------------\\n\" + \"\\nFor more information, please refer to: https://go.apollo.dev/t/config \\n\\n\" + \"The following error occurred: \\n\" + \"-----------------------------\\n\" + e.message);\n      }\n\n      if (util_1.isString(e.message) && e.message.includes(\"ECONNREFUSED\")) {\n        throw new Error(\"Failed to connect to a running GraphQL endpoint at \" + url + \"\\nThis may be because you didn't start your service or the endpoint URL is incorrect.\");\n      }\n\n      throw new Error(e);\n    });\n\n    if (errors && errors.length) {\n      throw new Error(errors.map(({\n        message\n      }) => message).join(\"\\n\"));\n    }\n\n    if (!data) {\n      throw new Error(\"No data received from server introspection.\");\n    }\n\n    this.schema = graphql_1.buildClientSchema(data);\n    return this.schema;\n  }\n\n  onSchemaChange(_handler) {\n    throw new Error(\"Polling of endpoint not implemented yet\");\n    return () => {};\n  }\n\n  async resolveFederatedServiceSDL() {\n    if (this.federatedServiceSDL) return this.federatedServiceSDL;\n    const {\n      skipSSLValidation,\n      url,\n      headers\n    } = this.config;\n    const options = {\n      uri: url,\n      fetch: apollo_env_1.fetch\n    };\n\n    if (url.startsWith(\"https:\") && skipSSLValidation) {\n      options.fetchOptions = {\n        agent: new https_1.Agent({\n          rejectUnauthorized: false\n        })\n      };\n    }\n\n    const getFederationInfoQuery = `\n      query getFederationInfo {\n        _service {\n          sdl\n        }\n      }\n    `;\n    const {\n      data,\n      errors\n    } = await apollo_link_1.toPromise(apollo_link_1.execute(apollo_link_http_1.createHttpLink(options), {\n      query: graphql_1.parse(getFederationInfoQuery),\n      context: {\n        headers\n      }\n    }));\n\n    if (errors && errors.length) {\n      return utilities_1.Debug.error(errors.map(({\n        message\n      }) => message).join(\"\\n\"));\n    }\n\n    if (!data || !data._service) {\n      return utilities_1.Debug.error(\"No data received from server when querying for _service.\");\n    }\n\n    this.federatedServiceSDL = data._service.sdl;\n    return data._service.sdl;\n  }\n\n}\n\nexports.EndpointSchemaProvider = EndpointSchemaProvider;","map":{"version":3,"sources":["../../../src/providers/schema/endpoint.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst apollo_link_1 = require(\"apollo-link\");\nconst apollo_link_http_1 = require(\"apollo-link-http\");\nconst graphql_1 = require(\"graphql\");\nconst https_1 = require(\"https\");\nconst apollo_env_1 = require(\"apollo-env\");\nconst config_1 = require(\"../../config\");\nconst utilities_1 = require(\"../../utilities\");\nconst util_1 = require(\"util\");\nclass EndpointSchemaProvider {\n    constructor(config) {\n        this.config = config;\n    }\n    async resolveSchema() {\n        if (this.schema)\n            return this.schema;\n        const { skipSSLValidation, url, headers } = this.config;\n        const options = {\n            uri: url,\n            fetch: apollo_env_1.fetch\n        };\n        if (url.startsWith(\"https:\") && skipSSLValidation) {\n            options.fetchOptions = {\n                agent: new https_1.Agent({ rejectUnauthorized: false })\n            };\n        }\n        const { data, errors } = (await apollo_link_1.toPromise(apollo_link_1.execute(apollo_link_http_1.createHttpLink(options), {\n            query: graphql_1.parse(graphql_1.getIntrospectionQuery()),\n            context: { headers }\n        })).catch(e => {\n            if (util_1.isString(e.message) && e.message.includes(\"token <\")) {\n                throw new Error(\"Apollo tried to introspect a running GraphQL service at \" +\n                    url +\n                    \"\\nIt expected a JSON schema introspection result, but got an HTML response instead.\" +\n                    \"\\nYou may need to add headers to your request or adjust your endpoint url.\\n\" +\n                    \"-----------------------------\\n\" +\n                    \"For more information, please refer to: https://go.apollo.dev/t/config \\n\\n\" +\n                    \"The following error occurred:\\n-----------------------------\\n\" +\n                    e.message);\n            }\n            if (url === config_1.DefaultServiceConfig.endpoint.url &&\n                util_1.isString(e.message) &&\n                e.message.includes(\"ECONNREFUSED\")) {\n                throw new Error(\"Failed to connect to a running GraphQL endpoint at \" +\n                    url +\n                    \"\\nThis may be because you didn't start your service.\\n\" +\n                    \"By default, when an endpoint, Graph Manager API key, or localSchemaFile isn't provided, Apollo tries to fetch a schema from \" +\n                    config_1.DefaultServiceConfig.endpoint.url +\n                    \"\\n-----------------------------\\n\" +\n                    \"\\nFor more information, please refer to: https://go.apollo.dev/t/config \\n\\n\" +\n                    \"The following error occurred: \\n\" +\n                    \"-----------------------------\\n\" +\n                    e.message);\n            }\n            if (util_1.isString(e.message) && e.message.includes(\"ECONNREFUSED\")) {\n                throw new Error(\"Failed to connect to a running GraphQL endpoint at \" +\n                    url +\n                    \"\\nThis may be because you didn't start your service or the endpoint URL is incorrect.\");\n            }\n            throw new Error(e);\n        }));\n        if (errors && errors.length) {\n            throw new Error(errors.map(({ message }) => message).join(\"\\n\"));\n        }\n        if (!data) {\n            throw new Error(\"No data received from server introspection.\");\n        }\n        this.schema = graphql_1.buildClientSchema(data);\n        return this.schema;\n    }\n    onSchemaChange(_handler) {\n        throw new Error(\"Polling of endpoint not implemented yet\");\n        return () => { };\n    }\n    async resolveFederatedServiceSDL() {\n        if (this.federatedServiceSDL)\n            return this.federatedServiceSDL;\n        const { skipSSLValidation, url, headers } = this.config;\n        const options = {\n            uri: url,\n            fetch: apollo_env_1.fetch\n        };\n        if (url.startsWith(\"https:\") && skipSSLValidation) {\n            options.fetchOptions = {\n                agent: new https_1.Agent({ rejectUnauthorized: false })\n            };\n        }\n        const getFederationInfoQuery = `\n      query getFederationInfo {\n        _service {\n          sdl\n        }\n      }\n    `;\n        const { data, errors } = (await apollo_link_1.toPromise(apollo_link_1.execute(apollo_link_http_1.createHttpLink(options), {\n            query: graphql_1.parse(getFederationInfoQuery),\n            context: { headers }\n        })));\n        if (errors && errors.length) {\n            return utilities_1.Debug.error(errors.map(({ message }) => message).join(\"\\n\"));\n        }\n        if (!data || !data._service) {\n            return utilities_1.Debug.error(\"No data received from server when querying for _service.\");\n        }\n        this.federatedServiceSDL = data._service.sdl;\n        return data._service.sdl;\n    }\n}\nexports.EndpointSchemaProvider = EndpointSchemaProvider;\n//# sourceMappingURL=endpoint.js.map"]},"metadata":{},"sourceType":"script"}