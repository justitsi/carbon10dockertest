{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst apollo_link_1 = require(\"apollo-link\");\n\nconst apollo_link_context_1 = require(\"apollo-link-context\");\n\nconst apollo_link_error_1 = require(\"apollo-link-error\");\n\nconst apollo_link_http_1 = require(\"apollo-link-http\");\n\nconst apollo_server_errors_1 = require(\"apollo-server-errors\");\n\nconst await_to_js_1 = __importDefault(require(\"await-to-js\"));\n\nconst apollo_env_1 = require(\"apollo-env\");\n\nclass GraphQLDataSource {\n  initialize(config) {\n    this.context = config.context;\n  }\n\n  async execute(operation) {\n    return this.executeSingleOperation(operation);\n  }\n\n  composeLinks() {\n    const uri = this.resolveUri();\n    return apollo_link_1.ApolloLink.from([this.onErrorLink(), this.onRequestLink(), apollo_link_http_1.createHttpLink({\n      fetch: apollo_env_1.fetch,\n      uri\n    })]);\n  }\n\n  didEncounterError(error) {\n    const status = error.statusCode ? error.statusCode : null;\n    const message = error.bodyText ? error.bodyText : error.message ? error.message : null;\n    let apolloError;\n\n    switch (status) {\n      case 401:\n        apolloError = new apollo_server_errors_1.AuthenticationError(message);\n        break;\n\n      case 403:\n        apolloError = new apollo_server_errors_1.ForbiddenError(message);\n        break;\n\n      default:\n        apolloError = new apollo_server_errors_1.ApolloError(message);\n    }\n\n    throw apolloError;\n  }\n\n  async executeSingleOperation(operation) {\n    const link = this.composeLinks();\n    const [error, response] = await await_to_js_1.default(apollo_link_1.makePromise(apollo_link_1.execute(link, operation)));\n\n    if (error) {\n      this.didEncounterError(error);\n    }\n\n    return response;\n  }\n\n  resolveUri() {\n    const baseURL = this.baseURL;\n\n    if (!baseURL) {\n      throw new apollo_server_errors_1.ApolloError(\"Cannot make request to GraphQL API, missing baseURL\");\n    }\n\n    return baseURL;\n  }\n\n  onRequestLink() {\n    return apollo_link_context_1.setContext((_, request) => {\n      if (this.willSendRequest) {\n        this.willSendRequest(request);\n      }\n\n      return request;\n    });\n  }\n\n  onErrorLink() {\n    return apollo_link_error_1.onError(({\n      graphQLErrors,\n      networkError,\n      operation\n    }) => {\n      const {\n        result,\n        response\n      } = operation.getContext();\n\n      if (graphQLErrors) {\n        graphQLErrors.map(graphqlError => console.error(`[GraphQL error]: ${graphqlError.message}`));\n      }\n\n      if (networkError) {\n        console.log(`[Network Error]: ${networkError}`);\n      }\n\n      if (response && response.status >= 400) {\n        console.log(`[Network Error] ${response.bodyText}`);\n      }\n    });\n  }\n\n}\n\nexports.GraphQLDataSource = GraphQLDataSource;","map":{"version":3,"sources":["../../src/engine/GraphQLDataSource.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst apollo_link_1 = require(\"apollo-link\");\nconst apollo_link_context_1 = require(\"apollo-link-context\");\nconst apollo_link_error_1 = require(\"apollo-link-error\");\nconst apollo_link_http_1 = require(\"apollo-link-http\");\nconst apollo_server_errors_1 = require(\"apollo-server-errors\");\nconst await_to_js_1 = __importDefault(require(\"await-to-js\"));\nconst apollo_env_1 = require(\"apollo-env\");\nclass GraphQLDataSource {\n    initialize(config) {\n        this.context = config.context;\n    }\n    async execute(operation) {\n        return this.executeSingleOperation(operation);\n    }\n    composeLinks() {\n        const uri = this.resolveUri();\n        return apollo_link_1.ApolloLink.from([\n            this.onErrorLink(),\n            this.onRequestLink(),\n            apollo_link_http_1.createHttpLink({ fetch: apollo_env_1.fetch, uri })\n        ]);\n    }\n    didEncounterError(error) {\n        const status = error.statusCode ? error.statusCode : null;\n        const message = error.bodyText\n            ? error.bodyText\n            : error.message\n                ? error.message\n                : null;\n        let apolloError;\n        switch (status) {\n            case 401:\n                apolloError = new apollo_server_errors_1.AuthenticationError(message);\n                break;\n            case 403:\n                apolloError = new apollo_server_errors_1.ForbiddenError(message);\n                break;\n            default:\n                apolloError = new apollo_server_errors_1.ApolloError(message);\n        }\n        throw apolloError;\n    }\n    async executeSingleOperation(operation) {\n        const link = this.composeLinks();\n        const [error, response] = await await_to_js_1.default(apollo_link_1.makePromise(apollo_link_1.execute(link, operation)));\n        if (error) {\n            this.didEncounterError(error);\n        }\n        return response;\n    }\n    resolveUri() {\n        const baseURL = this.baseURL;\n        if (!baseURL) {\n            throw new apollo_server_errors_1.ApolloError(\"Cannot make request to GraphQL API, missing baseURL\");\n        }\n        return baseURL;\n    }\n    onRequestLink() {\n        return apollo_link_context_1.setContext((_, request) => {\n            if (this.willSendRequest) {\n                this.willSendRequest(request);\n            }\n            return request;\n        });\n    }\n    onErrorLink() {\n        return apollo_link_error_1.onError(({ graphQLErrors, networkError, operation }) => {\n            const { result, response } = operation.getContext();\n            if (graphQLErrors) {\n                graphQLErrors.map(graphqlError => console.error(`[GraphQL error]: ${graphqlError.message}`));\n            }\n            if (networkError) {\n                console.log(`[Network Error]: ${networkError}`);\n            }\n            if (response && response.status >= 400) {\n                console.log(`[Network Error] ${response.bodyText}`);\n            }\n        });\n    }\n}\nexports.GraphQLDataSource = GraphQLDataSource;\n//# sourceMappingURL=GraphQLDataSource.js.map"]},"metadata":{},"sourceType":"script"}