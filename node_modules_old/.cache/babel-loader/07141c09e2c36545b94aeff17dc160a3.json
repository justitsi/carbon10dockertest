{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst graphql_1 = require(\"graphql\");\n\nconst path_1 = __importDefault(require(\"path\"));\n\nclass ToolError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"ToolError\";\n    this.message = message;\n  }\n\n}\n\nexports.ToolError = ToolError;\nconst isRunningFromXcodeScript = process.env.XCODE_VERSION_ACTUAL;\n\nfunction logError(error) {\n  if (error instanceof ToolError) {\n    logErrorMessage(error.message);\n  } else if (error instanceof graphql_1.GraphQLError) {\n    const fileName = error.source && error.source.name;\n\n    if (error.locations) {\n      for (const location of error.locations) {\n        logErrorMessage(error.message, fileName, location.line);\n      }\n    } else {\n      logErrorMessage(error.message, fileName);\n    }\n  } else {\n    console.error(error.stack);\n  }\n}\n\nexports.logError = logError;\n\nfunction logErrorMessage(message, fileName, lineNumber) {\n  if (isRunningFromXcodeScript) {\n    if (fileName && lineNumber) {\n      console.error(`${fileName}:${lineNumber}: error: ${message}`);\n    } else {\n      console.error(`error: ${message}`);\n    }\n  } else {\n    if (fileName) {\n      const truncatedFileName = \"/\" + fileName.split(path_1.default.sep).slice(-4).join(path_1.default.sep);\n      console.error(`...${truncatedFileName}: ${message}`);\n    } else {\n      console.error(`error: ${message}`);\n    }\n  }\n}\n\nexports.logErrorMessage = logErrorMessage;","map":{"version":3,"sources":["../../src/errors/logger.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAKA,MAAa,SAAb,SAA+B,KAA/B,CAAoC;AAGlC,EAAA,WAAA,CAAY,OAAZ,EAA2B;AACzB,UAAM,OAAN;AAHF,SAAA,IAAA,GAAe,WAAf;AAIE,SAAK,OAAL,GAAe,OAAf;AACD;;AANiC;;AAApC,OAAA,CAAA,SAAA,GAAA,SAAA;AASA,MAAM,wBAAwB,GAAG,OAAO,CAAC,GAAR,CAAY,oBAA7C;;AAEA,SAAgB,QAAhB,CAAyB,KAAzB,EAAqC;AACnC,MAAI,KAAK,YAAY,SAArB,EAAgC;AAC9B,IAAA,eAAe,CAAC,KAAK,CAAC,OAAP,CAAf;AACD,GAFD,MAEO,IAAI,KAAK,YAAY,SAAA,CAAA,YAArB,EAAmC;AACxC,UAAM,QAAQ,GAAG,KAAK,CAAC,MAAN,IAAgB,KAAK,CAAC,MAAN,CAAa,IAA9C;;AACA,QAAI,KAAK,CAAC,SAAV,EAAqB;AACnB,WAAK,MAAM,QAAX,IAAuB,KAAK,CAAC,SAA7B,EAAwC;AACtC,QAAA,eAAe,CAAC,KAAK,CAAC,OAAP,EAAgB,QAAhB,EAA0B,QAAQ,CAAC,IAAnC,CAAf;AACD;AACF,KAJD,MAIO;AACL,MAAA,eAAe,CAAC,KAAK,CAAC,OAAP,EAAgB,QAAhB,CAAf;AACD;AACF,GATM,MASA;AACL,IAAA,OAAO,CAAC,KAAR,CAAc,KAAK,CAAC,KAApB;AACD;AACF;;AAfD,OAAA,CAAA,QAAA,GAAA,QAAA;;AAiBA,SAAgB,eAAhB,CACE,OADF,EAEE,QAFF,EAGE,UAHF,EAGqB;AAEnB,MAAI,wBAAJ,EAA8B;AAC5B,QAAI,QAAQ,IAAI,UAAhB,EAA4B;AAG1B,MAAA,OAAO,CAAC,KAAR,CAAc,GAAG,QAAQ,IAAI,UAAU,YAAY,OAAO,EAA1D;AACD,KAJD,MAIO;AAEL,MAAA,OAAO,CAAC,KAAR,CAAc,UAAU,OAAO,EAA/B;AACD;AACF,GATD,MASO;AACL,QAAI,QAAJ,EAAc;AACZ,YAAM,iBAAiB,GACrB,MACA,QAAQ,CACL,KADH,CACS,MAAA,CAAA,OAAA,CAAK,GADd,EAEG,KAFH,CAES,CAAC,CAFV,EAGG,IAHH,CAGQ,MAAA,CAAA,OAAA,CAAK,GAHb,CAFF;AAMA,MAAA,OAAO,CAAC,KAAR,CAAc,MAAM,iBAAiB,KAAK,OAAO,EAAjD;AACD,KARD,MAQO;AACL,MAAA,OAAO,CAAC,KAAR,CAAc,UAAU,OAAO,EAA/B;AACD;AACF;AACF;;AA3BD,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst path_1 = __importDefault(require(\"path\"));\nclass ToolError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"ToolError\";\n        this.message = message;\n    }\n}\nexports.ToolError = ToolError;\nconst isRunningFromXcodeScript = process.env.XCODE_VERSION_ACTUAL;\nfunction logError(error) {\n    if (error instanceof ToolError) {\n        logErrorMessage(error.message);\n    }\n    else if (error instanceof graphql_1.GraphQLError) {\n        const fileName = error.source && error.source.name;\n        if (error.locations) {\n            for (const location of error.locations) {\n                logErrorMessage(error.message, fileName, location.line);\n            }\n        }\n        else {\n            logErrorMessage(error.message, fileName);\n        }\n    }\n    else {\n        console.error(error.stack);\n    }\n}\nexports.logError = logError;\nfunction logErrorMessage(message, fileName, lineNumber) {\n    if (isRunningFromXcodeScript) {\n        if (fileName && lineNumber) {\n            console.error(`${fileName}:${lineNumber}: error: ${message}`);\n        }\n        else {\n            console.error(`error: ${message}`);\n        }\n    }\n    else {\n        if (fileName) {\n            const truncatedFileName = \"/\" +\n                fileName\n                    .split(path_1.default.sep)\n                    .slice(-4)\n                    .join(path_1.default.sep);\n            console.error(`...${truncatedFileName}: ${message}`);\n        }\n        else {\n            console.error(`error: ${message}`);\n        }\n    }\n}\nexports.logErrorMessage = logErrorMessage;\n//# sourceMappingURL=logger.js.map"]},"metadata":{},"sourceType":"script"}