{"ast":null,"code":"var _jsxFileName = \"/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/src/content/SynonymPage/SynonimDisplay.js\";\nimport React, { Component } from 'react';\nimport ItemList from '../../components/ItemList';\nconst headers = [{\n  key: \"word\",\n  header: \"Word\"\n}, {\n  key: \"score\",\n  header: \"Score (/100000)\"\n}];\n\nclass WordDisplay extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      word: this.props.word,\n      rows: []\n    };\n  }\n\n  getWordList() {\n    if (this.props.word === this.state.word) return; // this should not be necessary\n\n    console.log(\"getting synonyms for word \" + this.props.word);\n    fetch('https://api.datamuse.com/words?ml=' + this.props.word).then(res => res.json()).then(data => {\n      this.setState({\n        word: this.props.word,\n        rows: data.map((dataPoint, index) => ({\n          id: index,\n          word: dataPoint.word,\n          score: dataPoint.score\n        }))\n      });\n    }).then(() => {\n      return;\n    }).catch(console.log);\n  }\n\n  render() {\n    this.getWordList();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }, \"Showing synonyms for \", this.state.word), /*#__PURE__*/React.createElement(ItemList, {\n      headers: headers,\n      rows: this.state.rows,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default WordDisplay;","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/src/content/SynonymPage/SynonimDisplay.js"],"names":["React","Component","ItemList","headers","key","header","WordDisplay","state","word","props","rows","getWordList","console","log","fetch","then","res","json","data","setState","map","dataPoint","index","id","score","catch","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,2BAArB;AAEA,MAAMC,OAAO,GAAG,CACZ;AACEC,EAAAA,GAAG,EAAE,MADP;AAEEC,EAAAA,MAAM,EAAE;AAFV,CADY,EAKZ;AACED,EAAAA,GAAG,EAAE,OADP;AAEEC,EAAAA,MAAM,EAAE;AAFV,CALY,CAAhB;;AAYA,MAAMC,WAAN,SAA0BN,KAAK,CAACC,SAAhC,CAA0C;AAAA;AAAA;AAAA,SACtCM,KADsC,GAC9B;AACJC,MAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWD,IADb;AAEJE,MAAAA,IAAI,EAAI;AAFJ,KAD8B;AAAA;;AAMtCC,EAAAA,WAAW,GAAG;AACV,QAAI,KAAKF,KAAL,CAAWD,IAAX,KAAkB,KAAKD,KAAL,CAAWC,IAAjC,EAAuC,OAD7B,CACoC;;AAC9CI,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAA6B,KAAKJ,KAAL,CAAWD,IAApD;AACAM,IAAAA,KAAK,CAAC,uCAAqC,KAAKL,KAAL,CAAWD,IAAjD,CAAL,CACCO,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEOG,IAAD,IAAU;AACZ,WAAKC,QAAL,CAAe;AACXX,QAAAA,IAAI,EAAG,KAAKC,KAAL,CAAWD,IADP;AAEXE,QAAAA,IAAI,EAAGQ,IAAI,CAACE,GAAL,CAAS,CAACC,SAAD,EAAYC,KAAZ,MAAqB;AACjCC,UAAAA,EAAE,EAACD,KAD8B;AAEjCd,UAAAA,IAAI,EAACa,SAAS,CAACb,IAFkB;AAGjCgB,UAAAA,KAAK,EAACH,SAAS,CAACG;AAHiB,SAArB,CAAT;AAFI,OAAf;AAQH,KAXD,EAWGT,IAXH,CAWQ,MAAI;AACR;AACH,KAbD,EAcCU,KAdD,CAcOb,OAAO,CAACC,GAdf;AAeH;;AAGDa,EAAAA,MAAM,GAAG;AACL,SAAKf,WAAL;AACA,wBACI,uDACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAA0B,KAAKJ,KAAL,CAAWC,IAArC,CADJ,eAEI,oBAAC,QAAD;AACI,MAAA,OAAO,EAAIL,OADf;AAEI,MAAA,IAAI,EAAI,KAAKI,KAAL,CAAWG,IAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AASH;;AAtCqC;;AAwC1C,eAAeJ,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport ItemList from '../../components/ItemList';\n\nconst headers = [\n    {\n      key: \"word\",\n      header: \"Word\",\n    },\n    {\n      key: \"score\",\n      header: \"Score (/100000)\",\n    }\n  ];\n\n\nclass WordDisplay extends React.Component {\n    state = {\n        word: this.props.word,\n        rows :  []\n    }\n    \n    getWordList (){\n        if (this.props.word===this.state.word) return;// this should not be necessary\n        console.log(\"getting synonyms for word \"+this.props.word)\n        fetch('https://api.datamuse.com/words?ml='+this.props.word)\n        .then(res => res.json())\n        .then((data) => {\n            this.setState ({\n                word : this.props.word,\n                rows : data.map((dataPoint, index)=>({\n                    id:index,\n                    word:dataPoint.word,\n                    score:dataPoint.score,\n                }))\n            });\n        }).then(()=>{\n            return \n        })\n        .catch(console.log)\n    }\n    \n\n    render (){\n        this.getWordList();\n        return (\n            <> \n                <h3>Showing synonyms for {this.state.word}</h3>\n                <ItemList\n                    headers = {headers}\n                    rows = {this.state.rows}\n                />\n            </>\n        );\n    }\n}\nexport default WordDisplay;"]},"metadata":{},"sourceType":"module"}