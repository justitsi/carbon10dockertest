{"ast":null,"code":"'use strict';\n\nconst stringWidth = require('string-width');\n\nconst stripAnsi = require('strip-ansi');\n\nconst ansiStyles = require('ansi-styles');\n\nconst ESCAPES = new Set(['\\u001B', '\\u009B']);\nconst END_CODE = 39;\nconst ANSI_ESCAPE_BELL = '\\u0007';\nconst ANSI_CSI = '[';\nconst ANSI_OSC = ']';\nconst ANSI_SGR_TERMINATOR = 'm';\nconst ANSI_ESCAPE_LINK = `${ANSI_OSC}8;;`;\n\nconst wrapAnsi = code => `${ESCAPES.values().next().value}${ANSI_CSI}${code}${ANSI_SGR_TERMINATOR}`;\n\nconst wrapAnsiHyperlink = uri => `${ESCAPES.values().next().value}${ANSI_ESCAPE_LINK}${uri}${ANSI_ESCAPE_BELL}`; // Calculate the length of words split on ' ', ignoring\n// the extra characters added by ansi escape codes\n\n\nconst wordLengths = string => string.split(' ').map(character => stringWidth(character)); // Wrap a long word across multiple rows\n// Ansi escape codes do not count towards length\n\n\nconst wrapWord = (rows, word, columns) => {\n  const characters = [...word];\n  let isInsideEscape = false;\n  let isInsideLinkEscape = false;\n  let visible = stringWidth(stripAnsi(rows[rows.length - 1]));\n\n  for (const [index, character] of characters.entries()) {\n    const characterLength = stringWidth(character);\n\n    if (visible + characterLength <= columns) {\n      rows[rows.length - 1] += character;\n    } else {\n      rows.push(character);\n      visible = 0;\n    }\n\n    if (ESCAPES.has(character)) {\n      isInsideEscape = true;\n      isInsideLinkEscape = characters.slice(index + 1).join('').startsWith(ANSI_ESCAPE_LINK);\n    }\n\n    if (isInsideEscape) {\n      if (isInsideLinkEscape) {\n        if (character === ANSI_ESCAPE_BELL) {\n          isInsideEscape = false;\n          isInsideLinkEscape = false;\n        }\n      } else if (character === ANSI_SGR_TERMINATOR) {\n        isInsideEscape = false;\n      }\n\n      continue;\n    }\n\n    visible += characterLength;\n\n    if (visible === columns && index < characters.length - 1) {\n      rows.push('');\n      visible = 0;\n    }\n  } // It's possible that the last row we copy over is only\n  // ansi escape characters, handle this edge-case\n\n\n  if (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {\n    rows[rows.length - 2] += rows.pop();\n  }\n}; // Trims spaces from a string ignoring invisible sequences\n\n\nconst stringVisibleTrimSpacesRight = string => {\n  const words = string.split(' ');\n  let last = words.length;\n\n  while (last > 0) {\n    if (stringWidth(words[last - 1]) > 0) {\n      break;\n    }\n\n    last--;\n  }\n\n  if (last === words.length) {\n    return string;\n  }\n\n  return words.slice(0, last).join(' ') + words.slice(last).join('');\n}; // The wrap-ansi module can be invoked in either 'hard' or 'soft' wrap mode\n//\n// 'hard' will never allow a string to take up more than columns characters\n//\n// 'soft' allows long words to expand past the column length\n\n\nconst exec = (string, columns, options = {}) => {\n  if (options.trim !== false && string.trim() === '') {\n    return '';\n  }\n\n  let returnValue = '';\n  let escapeCode;\n  let escapeUrl;\n  const lengths = wordLengths(string);\n  let rows = [''];\n\n  for (const [index, word] of string.split(' ').entries()) {\n    if (options.trim !== false) {\n      rows[rows.length - 1] = rows[rows.length - 1].trimStart();\n    }\n\n    let rowLength = stringWidth(rows[rows.length - 1]);\n\n    if (index !== 0) {\n      if (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {\n        // If we start with a new word but the current row length equals the length of the columns, add a new row\n        rows.push('');\n        rowLength = 0;\n      }\n\n      if (rowLength > 0 || options.trim === false) {\n        rows[rows.length - 1] += ' ';\n        rowLength++;\n      }\n    } // In 'hard' wrap mode, the length of a line is never allowed to extend past 'columns'\n\n\n    if (options.hard && lengths[index] > columns) {\n      const remainingColumns = columns - rowLength;\n      const breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);\n      const breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);\n\n      if (breaksStartingNextLine < breaksStartingThisLine) {\n        rows.push('');\n      }\n\n      wrapWord(rows, word, columns);\n      continue;\n    }\n\n    if (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {\n      if (options.wordWrap === false && rowLength < columns) {\n        wrapWord(rows, word, columns);\n        continue;\n      }\n\n      rows.push('');\n    }\n\n    if (rowLength + lengths[index] > columns && options.wordWrap === false) {\n      wrapWord(rows, word, columns);\n      continue;\n    }\n\n    rows[rows.length - 1] += word;\n  }\n\n  if (options.trim !== false) {\n    rows = rows.map(stringVisibleTrimSpacesRight);\n  }\n\n  const pre = [...rows.join('\\n')];\n\n  for (const [index, character] of pre.entries()) {\n    returnValue += character;\n\n    if (ESCAPES.has(character)) {\n      const {\n        groups\n      } = new RegExp(`(?:\\\\${ANSI_CSI}(?<code>\\\\d+)m|\\\\${ANSI_ESCAPE_LINK}(?<uri>.*)${ANSI_ESCAPE_BELL})`).exec(pre.slice(index).join('')) || {\n        groups: {}\n      };\n\n      if (groups.code !== undefined) {\n        const code = Number.parseFloat(groups.code);\n        escapeCode = code === END_CODE ? undefined : code;\n      } else if (groups.uri !== undefined) {\n        escapeUrl = groups.uri.length === 0 ? undefined : groups.uri;\n      }\n    }\n\n    const code = ansiStyles.codes.get(Number(escapeCode));\n\n    if (pre[index + 1] === '\\n') {\n      if (escapeUrl) {\n        returnValue += wrapAnsiHyperlink('');\n      }\n\n      if (escapeCode && code) {\n        returnValue += wrapAnsi(code);\n      }\n    } else if (character === '\\n') {\n      if (escapeCode && code) {\n        returnValue += wrapAnsi(escapeCode);\n      }\n\n      if (escapeUrl) {\n        returnValue += wrapAnsiHyperlink(escapeUrl);\n      }\n    }\n  }\n\n  return returnValue;\n}; // For each newline, invoke the method separately\n\n\nmodule.exports = (string, columns, options) => {\n  return String(string).normalize().replace(/\\r\\n/g, '\\n').split('\\n').map(line => exec(line, columns, options)).join('\\n');\n};","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/@oclif/errors/node_modules/wrap-ansi/index.js"],"names":["stringWidth","require","stripAnsi","ansiStyles","ESCAPES","Set","END_CODE","ANSI_ESCAPE_BELL","ANSI_CSI","ANSI_OSC","ANSI_SGR_TERMINATOR","ANSI_ESCAPE_LINK","wrapAnsi","code","values","next","value","wrapAnsiHyperlink","uri","wordLengths","string","split","map","character","wrapWord","rows","word","columns","characters","isInsideEscape","isInsideLinkEscape","visible","length","index","entries","characterLength","push","has","slice","join","startsWith","pop","stringVisibleTrimSpacesRight","words","last","exec","options","trim","returnValue","escapeCode","escapeUrl","lengths","trimStart","rowLength","wordWrap","hard","remainingColumns","breaksStartingThisLine","Math","floor","breaksStartingNextLine","pre","groups","RegExp","undefined","Number","parseFloat","codes","get","module","exports","String","normalize","replace","line"],"mappings":"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","sourcesContent":["'use strict';\nconst stringWidth = require('string-width');\nconst stripAnsi = require('strip-ansi');\nconst ansiStyles = require('ansi-styles');\n\nconst ESCAPES = new Set([\n\t'\\u001B',\n\t'\\u009B'\n]);\n\nconst END_CODE = 39;\n\nconst ANSI_ESCAPE_BELL = '\\u0007';\nconst ANSI_CSI = '[';\nconst ANSI_OSC = ']';\nconst ANSI_SGR_TERMINATOR = 'm';\nconst ANSI_ESCAPE_LINK = `${ANSI_OSC}8;;`;\n\nconst wrapAnsi = code => `${ESCAPES.values().next().value}${ANSI_CSI}${code}${ANSI_SGR_TERMINATOR}`;\nconst wrapAnsiHyperlink = uri => `${ESCAPES.values().next().value}${ANSI_ESCAPE_LINK}${uri}${ANSI_ESCAPE_BELL}`;\n\n// Calculate the length of words split on ' ', ignoring\n// the extra characters added by ansi escape codes\nconst wordLengths = string => string.split(' ').map(character => stringWidth(character));\n\n// Wrap a long word across multiple rows\n// Ansi escape codes do not count towards length\nconst wrapWord = (rows, word, columns) => {\n\tconst characters = [...word];\n\n\tlet isInsideEscape = false;\n\tlet isInsideLinkEscape = false;\n\tlet visible = stringWidth(stripAnsi(rows[rows.length - 1]));\n\n\tfor (const [index, character] of characters.entries()) {\n\t\tconst characterLength = stringWidth(character);\n\n\t\tif (visible + characterLength <= columns) {\n\t\t\trows[rows.length - 1] += character;\n\t\t} else {\n\t\t\trows.push(character);\n\t\t\tvisible = 0;\n\t\t}\n\n\t\tif (ESCAPES.has(character)) {\n\t\t\tisInsideEscape = true;\n\t\t\tisInsideLinkEscape = characters.slice(index + 1).join('').startsWith(ANSI_ESCAPE_LINK);\n\t\t}\n\n\t\tif (isInsideEscape) {\n\t\t\tif (isInsideLinkEscape) {\n\t\t\t\tif (character === ANSI_ESCAPE_BELL) {\n\t\t\t\t\tisInsideEscape = false;\n\t\t\t\t\tisInsideLinkEscape = false;\n\t\t\t\t}\n\t\t\t} else if (character === ANSI_SGR_TERMINATOR) {\n\t\t\t\tisInsideEscape = false;\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tvisible += characterLength;\n\n\t\tif (visible === columns && index < characters.length - 1) {\n\t\t\trows.push('');\n\t\t\tvisible = 0;\n\t\t}\n\t}\n\n\t// It's possible that the last row we copy over is only\n\t// ansi escape characters, handle this edge-case\n\tif (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {\n\t\trows[rows.length - 2] += rows.pop();\n\t}\n};\n\n// Trims spaces from a string ignoring invisible sequences\nconst stringVisibleTrimSpacesRight = string => {\n\tconst words = string.split(' ');\n\tlet last = words.length;\n\n\twhile (last > 0) {\n\t\tif (stringWidth(words[last - 1]) > 0) {\n\t\t\tbreak;\n\t\t}\n\n\t\tlast--;\n\t}\n\n\tif (last === words.length) {\n\t\treturn string;\n\t}\n\n\treturn words.slice(0, last).join(' ') + words.slice(last).join('');\n};\n\n// The wrap-ansi module can be invoked in either 'hard' or 'soft' wrap mode\n//\n// 'hard' will never allow a string to take up more than columns characters\n//\n// 'soft' allows long words to expand past the column length\nconst exec = (string, columns, options = {}) => {\n\tif (options.trim !== false && string.trim() === '') {\n\t\treturn '';\n\t}\n\n\tlet returnValue = '';\n\tlet escapeCode;\n\tlet escapeUrl;\n\n\tconst lengths = wordLengths(string);\n\tlet rows = [''];\n\n\tfor (const [index, word] of string.split(' ').entries()) {\n\t\tif (options.trim !== false) {\n\t\t\trows[rows.length - 1] = rows[rows.length - 1].trimStart();\n\t\t}\n\n\t\tlet rowLength = stringWidth(rows[rows.length - 1]);\n\n\t\tif (index !== 0) {\n\t\t\tif (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {\n\t\t\t\t// If we start with a new word but the current row length equals the length of the columns, add a new row\n\t\t\t\trows.push('');\n\t\t\t\trowLength = 0;\n\t\t\t}\n\n\t\t\tif (rowLength > 0 || options.trim === false) {\n\t\t\t\trows[rows.length - 1] += ' ';\n\t\t\t\trowLength++;\n\t\t\t}\n\t\t}\n\n\t\t// In 'hard' wrap mode, the length of a line is never allowed to extend past 'columns'\n\t\tif (options.hard && lengths[index] > columns) {\n\t\t\tconst remainingColumns = (columns - rowLength);\n\t\t\tconst breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);\n\t\t\tconst breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);\n\t\t\tif (breaksStartingNextLine < breaksStartingThisLine) {\n\t\t\t\trows.push('');\n\t\t\t}\n\n\t\t\twrapWord(rows, word, columns);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {\n\t\t\tif (options.wordWrap === false && rowLength < columns) {\n\t\t\t\twrapWord(rows, word, columns);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\trows.push('');\n\t\t}\n\n\t\tif (rowLength + lengths[index] > columns && options.wordWrap === false) {\n\t\t\twrapWord(rows, word, columns);\n\t\t\tcontinue;\n\t\t}\n\n\t\trows[rows.length - 1] += word;\n\t}\n\n\tif (options.trim !== false) {\n\t\trows = rows.map(stringVisibleTrimSpacesRight);\n\t}\n\n\tconst pre = [...rows.join('\\n')];\n\n\tfor (const [index, character] of pre.entries()) {\n\t\treturnValue += character;\n\n\t\tif (ESCAPES.has(character)) {\n\t\t\tconst {groups} = new RegExp(`(?:\\\\${ANSI_CSI}(?<code>\\\\d+)m|\\\\${ANSI_ESCAPE_LINK}(?<uri>.*)${ANSI_ESCAPE_BELL})`).exec(pre.slice(index).join('')) || {groups: {}};\n\t\t\tif (groups.code !== undefined) {\n\t\t\t\tconst code = Number.parseFloat(groups.code);\n\t\t\t\tescapeCode = code === END_CODE ? undefined : code;\n\t\t\t} else if (groups.uri !== undefined) {\n\t\t\t\tescapeUrl = groups.uri.length === 0 ? undefined : groups.uri;\n\t\t\t}\n\t\t}\n\n\t\tconst code = ansiStyles.codes.get(Number(escapeCode));\n\n\t\tif (pre[index + 1] === '\\n') {\n\t\t\tif (escapeUrl) {\n\t\t\t\treturnValue += wrapAnsiHyperlink('');\n\t\t\t}\n\n\t\t\tif (escapeCode && code) {\n\t\t\t\treturnValue += wrapAnsi(code);\n\t\t\t}\n\t\t} else if (character === '\\n') {\n\t\t\tif (escapeCode && code) {\n\t\t\t\treturnValue += wrapAnsi(escapeCode);\n\t\t\t}\n\n\t\t\tif (escapeUrl) {\n\t\t\t\treturnValue += wrapAnsiHyperlink(escapeUrl);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn returnValue;\n};\n\n// For each newline, invoke the method separately\nmodule.exports = (string, columns, options) => {\n\treturn String(string)\n\t\t.normalize()\n\t\t.replace(/\\r\\n/g, '\\n')\n\t\t.split('\\n')\n\t\t.map(line => exec(line, columns, options))\n\t\t.join('\\n');\n};\n"]},"metadata":{},"sourceType":"script"}