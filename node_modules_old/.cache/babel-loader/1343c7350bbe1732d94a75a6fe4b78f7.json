{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stripCommonPrimitives = exports.replaceExtendedDefinitionsWithExtensions = exports.defaultRootOperationTypes = exports.normalizeTypeDefs = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst utils_1 = require(\"./utils\");\n\nconst directives_1 = __importDefault(require(\"../directives\"));\n\nfunction normalizeTypeDefs(typeDefs) {\n  return stripCommonPrimitives(defaultRootOperationTypes(replaceExtendedDefinitionsWithExtensions(typeDefs)));\n}\n\nexports.normalizeTypeDefs = normalizeTypeDefs;\n\nfunction defaultRootOperationTypes(typeDefs) {\n  const defaultRootOperationNames = Object.values(utils_1.defaultRootOperationNameLookup);\n  let rootOperationTypeMap = Object.create(null);\n  let hasSchemaDefinitionOrExtension = false;\n  graphql_1.visit(typeDefs, {\n    OperationTypeDefinition(node) {\n      hasSchemaDefinitionOrExtension = true;\n      rootOperationTypeMap[node.type.name.value] = utils_1.defaultRootOperationNameLookup[node.operation];\n    }\n\n  });\n\n  if (!hasSchemaDefinitionOrExtension) {\n    rootOperationTypeMap = {\n      Query: 'Query',\n      Mutation: 'Mutation',\n      Subscription: 'Subscription'\n    };\n  }\n\n  let schemaWithoutConflictingDefaultDefinitions;\n\n  if (!hasSchemaDefinitionOrExtension) {\n    schemaWithoutConflictingDefaultDefinitions = typeDefs;\n  } else {\n    schemaWithoutConflictingDefaultDefinitions = graphql_1.visit(typeDefs, {\n      ObjectTypeDefinition(node) {\n        if (defaultRootOperationNames.includes(node.name.value) && !rootOperationTypeMap[node.name.value]) {\n          return null;\n        }\n\n        return;\n      },\n\n      ObjectTypeExtension(node) {\n        if (defaultRootOperationNames.includes(node.name.value) && !rootOperationTypeMap[node.name.value]) {\n          return null;\n        }\n\n        return;\n      },\n\n      FieldDefinition(node) {\n        if (node.type.kind === graphql_1.Kind.NAMED_TYPE && defaultRootOperationNames.includes(node.type.name.value)) {\n          return null;\n        }\n\n        if (node.type.kind === graphql_1.Kind.NON_NULL_TYPE && node.type.type.kind === graphql_1.Kind.NAMED_TYPE && defaultRootOperationNames.includes(node.type.type.name.value)) {\n          return null;\n        }\n\n        return;\n      }\n\n    });\n  }\n\n  const schemaWithDefaultRootTypes = graphql_1.visit(schemaWithoutConflictingDefaultDefinitions, {\n    SchemaDefinition() {\n      return null;\n    },\n\n    SchemaExtension() {\n      return null;\n    },\n\n    ObjectTypeDefinition(node) {\n      if (node.name.value in rootOperationTypeMap || defaultRootOperationNames.includes(node.name.value)) {\n        return Object.assign(Object.assign({}, node), {\n          name: Object.assign(Object.assign({}, node.name), {\n            value: rootOperationTypeMap[node.name.value] || node.name.value\n          }),\n          kind: graphql_1.Kind.OBJECT_TYPE_EXTENSION\n        });\n      }\n\n      return;\n    },\n\n    ObjectTypeExtension(node) {\n      if (node.name.value in rootOperationTypeMap || defaultRootOperationNames.includes(node.name.value)) {\n        return Object.assign(Object.assign({}, node), {\n          name: Object.assign(Object.assign({}, node.name), {\n            value: rootOperationTypeMap[node.name.value] || node.name.value\n          })\n        });\n      }\n\n      return;\n    },\n\n    NamedType(node) {\n      if (node.name.value in rootOperationTypeMap) {\n        return Object.assign(Object.assign({}, node), {\n          name: Object.assign(Object.assign({}, node.name), {\n            value: rootOperationTypeMap[node.name.value]\n          })\n        });\n      }\n\n      return;\n    }\n\n  });\n  return schemaWithDefaultRootTypes;\n}\n\nexports.defaultRootOperationTypes = defaultRootOperationTypes;\n\nfunction replaceExtendedDefinitionsWithExtensions(typeDefs) {\n  const typeDefsWithExtendedTypesReplaced = graphql_1.visit(typeDefs, {\n    ObjectTypeDefinition: visitor,\n    InterfaceTypeDefinition: visitor\n  });\n\n  function visitor(node) {\n    const isExtensionDefinition = utils_1.findDirectivesOnTypeOrField(node, 'extends').length > 0;\n\n    if (!isExtensionDefinition) {\n      return node;\n    }\n\n    const filteredDirectives = node.directives && node.directives.filter(directive => directive.name.value !== 'extends');\n    return Object.assign(Object.assign(Object.assign({}, node), filteredDirectives && {\n      directives: filteredDirectives\n    }), {\n      kind: utils_1.defKindToExtKind[node.kind]\n    });\n  }\n\n  return typeDefsWithExtendedTypesReplaced;\n}\n\nexports.replaceExtendedDefinitionsWithExtensions = replaceExtendedDefinitionsWithExtensions;\n\nfunction stripCommonPrimitives(document) {\n  const typeDefinitionVisitor = node => {\n    var _a;\n\n    if (node.name.value === utils_1.defaultRootOperationNameLookup.query) {\n      const filteredFieldDefinitions = (_a = node.fields) === null || _a === void 0 ? void 0 : _a.filter(fieldDefinition => !utils_1.reservedRootFields.includes(fieldDefinition.name.value));\n\n      if (!filteredFieldDefinitions || filteredFieldDefinitions.length === 0) {\n        return null;\n      }\n\n      return Object.assign(Object.assign({}, node), {\n        fields: filteredFieldDefinitions\n      });\n    }\n\n    const isFederationType = node.name.value === '_Service';\n    return isFederationType ? null : node;\n  };\n\n  return graphql_1.visit(document, {\n    DirectiveDefinition(node) {\n      const isCommonDirective = [...directives_1.default, ...graphql_1.specifiedDirectives].some(directive => directive.name === node.name.value);\n      return isCommonDirective ? null : node;\n    },\n\n    ScalarTypeDefinition(node) {\n      const isFederationScalar = ['_Any', '_FieldSet'].includes(node.name.value);\n      return isFederationScalar ? null : node;\n    },\n\n    UnionTypeDefinition(node) {\n      const isFederationUnion = node.name.value === \"_Entity\";\n      return isFederationUnion ? null : node;\n    },\n\n    ObjectTypeDefinition: typeDefinitionVisitor,\n    ObjectTypeExtension: typeDefinitionVisitor\n  });\n}\n\nexports.stripCommonPrimitives = stripCommonPrimitives;","map":{"version":3,"sources":["../../src/composition/normalize.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stripCommonPrimitives = exports.replaceExtendedDefinitionsWithExtensions = exports.defaultRootOperationTypes = exports.normalizeTypeDefs = void 0;\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"./utils\");\nconst directives_1 = __importDefault(require(\"../directives\"));\nfunction normalizeTypeDefs(typeDefs) {\n    return stripCommonPrimitives(defaultRootOperationTypes(replaceExtendedDefinitionsWithExtensions(typeDefs)));\n}\nexports.normalizeTypeDefs = normalizeTypeDefs;\nfunction defaultRootOperationTypes(typeDefs) {\n    const defaultRootOperationNames = Object.values(utils_1.defaultRootOperationNameLookup);\n    let rootOperationTypeMap = Object.create(null);\n    let hasSchemaDefinitionOrExtension = false;\n    graphql_1.visit(typeDefs, {\n        OperationTypeDefinition(node) {\n            hasSchemaDefinitionOrExtension = true;\n            rootOperationTypeMap[node.type.name.value] =\n                utils_1.defaultRootOperationNameLookup[node.operation];\n        },\n    });\n    if (!hasSchemaDefinitionOrExtension) {\n        rootOperationTypeMap = {\n            Query: 'Query',\n            Mutation: 'Mutation',\n            Subscription: 'Subscription',\n        };\n    }\n    let schemaWithoutConflictingDefaultDefinitions;\n    if (!hasSchemaDefinitionOrExtension) {\n        schemaWithoutConflictingDefaultDefinitions = typeDefs;\n    }\n    else {\n        schemaWithoutConflictingDefaultDefinitions = graphql_1.visit(typeDefs, {\n            ObjectTypeDefinition(node) {\n                if (defaultRootOperationNames.includes(node.name.value) &&\n                    !rootOperationTypeMap[node.name.value]) {\n                    return null;\n                }\n                return;\n            },\n            ObjectTypeExtension(node) {\n                if (defaultRootOperationNames.includes(node.name.value) &&\n                    !rootOperationTypeMap[node.name.value]) {\n                    return null;\n                }\n                return;\n            },\n            FieldDefinition(node) {\n                if (node.type.kind === graphql_1.Kind.NAMED_TYPE &&\n                    defaultRootOperationNames.includes(node.type.name.value)) {\n                    return null;\n                }\n                if (node.type.kind === graphql_1.Kind.NON_NULL_TYPE &&\n                    node.type.type.kind === graphql_1.Kind.NAMED_TYPE &&\n                    defaultRootOperationNames.includes(node.type.type.name.value)) {\n                    return null;\n                }\n                return;\n            },\n        });\n    }\n    const schemaWithDefaultRootTypes = graphql_1.visit(schemaWithoutConflictingDefaultDefinitions, {\n        SchemaDefinition() {\n            return null;\n        },\n        SchemaExtension() {\n            return null;\n        },\n        ObjectTypeDefinition(node) {\n            if (node.name.value in rootOperationTypeMap ||\n                defaultRootOperationNames.includes(node.name.value)) {\n                return Object.assign(Object.assign({}, node), { name: Object.assign(Object.assign({}, node.name), { value: rootOperationTypeMap[node.name.value] || node.name.value }), kind: graphql_1.Kind.OBJECT_TYPE_EXTENSION });\n            }\n            return;\n        },\n        ObjectTypeExtension(node) {\n            if (node.name.value in rootOperationTypeMap ||\n                defaultRootOperationNames.includes(node.name.value)) {\n                return Object.assign(Object.assign({}, node), { name: Object.assign(Object.assign({}, node.name), { value: rootOperationTypeMap[node.name.value] || node.name.value }) });\n            }\n            return;\n        },\n        NamedType(node) {\n            if (node.name.value in rootOperationTypeMap) {\n                return Object.assign(Object.assign({}, node), { name: Object.assign(Object.assign({}, node.name), { value: rootOperationTypeMap[node.name.value] }) });\n            }\n            return;\n        },\n    });\n    return schemaWithDefaultRootTypes;\n}\nexports.defaultRootOperationTypes = defaultRootOperationTypes;\nfunction replaceExtendedDefinitionsWithExtensions(typeDefs) {\n    const typeDefsWithExtendedTypesReplaced = graphql_1.visit(typeDefs, {\n        ObjectTypeDefinition: visitor,\n        InterfaceTypeDefinition: visitor,\n    });\n    function visitor(node) {\n        const isExtensionDefinition = utils_1.findDirectivesOnTypeOrField(node, 'extends').length > 0;\n        if (!isExtensionDefinition) {\n            return node;\n        }\n        const filteredDirectives = node.directives &&\n            node.directives.filter(directive => directive.name.value !== 'extends');\n        return Object.assign(Object.assign(Object.assign({}, node), (filteredDirectives && { directives: filteredDirectives })), { kind: utils_1.defKindToExtKind[node.kind] });\n    }\n    return typeDefsWithExtendedTypesReplaced;\n}\nexports.replaceExtendedDefinitionsWithExtensions = replaceExtendedDefinitionsWithExtensions;\nfunction stripCommonPrimitives(document) {\n    const typeDefinitionVisitor = (node) => {\n        var _a;\n        if (node.name.value === utils_1.defaultRootOperationNameLookup.query) {\n            const filteredFieldDefinitions = (_a = node.fields) === null || _a === void 0 ? void 0 : _a.filter((fieldDefinition) => !utils_1.reservedRootFields.includes(fieldDefinition.name.value));\n            if (!filteredFieldDefinitions || filteredFieldDefinitions.length === 0) {\n                return null;\n            }\n            return Object.assign(Object.assign({}, node), { fields: filteredFieldDefinitions });\n        }\n        const isFederationType = node.name.value === '_Service';\n        return isFederationType ? null : node;\n    };\n    return graphql_1.visit(document, {\n        DirectiveDefinition(node) {\n            const isCommonDirective = [...directives_1.default, ...graphql_1.specifiedDirectives].some((directive) => directive.name === node.name.value);\n            return isCommonDirective ? null : node;\n        },\n        ScalarTypeDefinition(node) {\n            const isFederationScalar = ['_Any', '_FieldSet'].includes(node.name.value);\n            return isFederationScalar ? null : node;\n        },\n        UnionTypeDefinition(node) {\n            const isFederationUnion = node.name.value === \"_Entity\";\n            return isFederationUnion ? null : node;\n        },\n        ObjectTypeDefinition: typeDefinitionVisitor,\n        ObjectTypeExtension: typeDefinitionVisitor,\n    });\n}\nexports.stripCommonPrimitives = stripCommonPrimitives;\n//# sourceMappingURL=normalize.js.map"]},"metadata":{},"sourceType":"script"}