{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst base_1 = require(\"./base\");\n\nconst fileSet_1 = require(\"../fileSet\");\n\nfunction isServiceProject(project) {\n  return project instanceof GraphQLServiceProject;\n}\n\nexports.isServiceProject = isServiceProject;\n\nclass GraphQLServiceProject extends base_1.GraphQLProject {\n  constructor({\n    clientIdentity,\n    config,\n    rootURI,\n    loadingHandler\n  }) {\n    const fileSet = new fileSet_1.FileSet({\n      rootURI: config.configDirURI || rootURI,\n      includes: [...config.service.includes, \".env\", \"apollo.config.js\"],\n      excludes: config.service.excludes,\n      configURI: config.configURI\n    });\n    super({\n      config,\n      fileSet,\n      loadingHandler,\n      clientIdentity\n    });\n    this.config = config;\n  }\n\n  get displayName() {\n    return this.config.graph || \"Unnamed Project\";\n  }\n\n  initialize() {\n    return [];\n  }\n\n  validate() {}\n\n  getProjectStats() {\n    return {\n      loaded: true,\n      type: \"service\"\n    };\n  }\n\n  resolveFederationInfo() {\n    return this.schemaProvider.resolveFederatedServiceSDL();\n  }\n\n}\n\nexports.GraphQLServiceProject = GraphQLServiceProject;","map":{"version":3,"sources":["../../src/project/service.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAKA,SAAgB,gBAAhB,CACE,OADF,EACyB;AAEvB,SAAO,OAAO,YAAY,qBAA1B;AACD;;AAJD,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAYA,MAAa,qBAAb,SAA2C,MAAA,CAAA,cAA3C,CAAyD;AACvD,EAAA,WAAA,CAAY;AACV,IAAA,cADU;AAEV,IAAA,MAFU;AAGV,IAAA,OAHU;AAIV,IAAA;AAJU,GAAZ,EAK8B;AAC5B,UAAM,OAAO,GAAG,IAAI,SAAA,CAAA,OAAJ,CAAY;AAC1B,MAAA,OAAO,EAAE,MAAM,CAAC,YAAP,IAAuB,OADN;AAE1B,MAAA,QAAQ,EAAE,CAAC,GAAG,MAAM,CAAC,OAAP,CAAe,QAAnB,EAA6B,MAA7B,EAAqC,kBAArC,CAFgB;AAG1B,MAAA,QAAQ,EAAE,MAAM,CAAC,OAAP,CAAe,QAHC;AAI1B,MAAA,SAAS,EAAE,MAAM,CAAC;AAJQ,KAAZ,CAAhB;AAOA,UAAM;AAAE,MAAA,MAAF;AAAU,MAAA,OAAV;AAAmB,MAAA,cAAnB;AAAmC,MAAA;AAAnC,KAAN;AACA,SAAK,MAAL,GAAc,MAAd;AACD;;AAED,MAAI,WAAJ,GAAe;AACb,WAAO,KAAK,MAAL,CAAY,KAAZ,IAAqB,iBAA5B;AACD;;AAED,EAAA,UAAU,GAAA;AACR,WAAO,EAAP;AACD;;AAED,EAAA,QAAQ,GAAA,CAAK;;AAEb,EAAA,eAAe,GAAA;AACb,WAAO;AAAE,MAAA,MAAM,EAAE,IAAV;AAAgB,MAAA,IAAI,EAAE;AAAtB,KAAP;AACD;;AAED,EAAA,qBAAqB,GAAA;AACnB,WAAO,KAAK,cAAL,CAAoB,0BAApB,EAAP;AACD;;AAlCsD;;AAAzD,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = require(\"./base\");\nconst fileSet_1 = require(\"../fileSet\");\nfunction isServiceProject(project) {\n    return project instanceof GraphQLServiceProject;\n}\nexports.isServiceProject = isServiceProject;\nclass GraphQLServiceProject extends base_1.GraphQLProject {\n    constructor({ clientIdentity, config, rootURI, loadingHandler }) {\n        const fileSet = new fileSet_1.FileSet({\n            rootURI: config.configDirURI || rootURI,\n            includes: [...config.service.includes, \".env\", \"apollo.config.js\"],\n            excludes: config.service.excludes,\n            configURI: config.configURI\n        });\n        super({ config, fileSet, loadingHandler, clientIdentity });\n        this.config = config;\n    }\n    get displayName() {\n        return this.config.graph || \"Unnamed Project\";\n    }\n    initialize() {\n        return [];\n    }\n    validate() { }\n    getProjectStats() {\n        return { loaded: true, type: \"service\" };\n    }\n    resolveFederationInfo() {\n        return this.schemaProvider.resolveFederatedServiceSDL();\n    }\n}\nexports.GraphQLServiceProject = GraphQLServiceProject;\n//# sourceMappingURL=service.js.map"]},"metadata":{},"sourceType":"script"}