{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst graphql_1 = require(\"graphql\");\n\nfunction isNode(maybeNode) {\n  return maybeNode && typeof maybeNode.kind === \"string\";\n}\n\nexports.isNode = isNode;\n\nfunction isNamedNode(node) {\n  return \"name\" in node;\n}\n\nexports.isNamedNode = isNamedNode;\n\nfunction isDirectiveDefinitionNode(node) {\n  return node.kind === graphql_1.Kind.DIRECTIVE_DEFINITION;\n}\n\nexports.isDirectiveDefinitionNode = isDirectiveDefinitionNode;\n\nfunction highlightNodeForNode(node) {\n  switch (node.kind) {\n    case graphql_1.Kind.VARIABLE_DEFINITION:\n      return node.variable;\n\n    default:\n      return isNamedNode(node) ? node.name : node;\n  }\n}\n\nexports.highlightNodeForNode = highlightNodeForNode;\n\nfunction getFieldDef(schema, parentType, fieldAST) {\n  const name = fieldAST.name.value;\n\n  if (name === graphql_1.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return graphql_1.SchemaMetaFieldDef;\n  }\n\n  if (name === graphql_1.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return graphql_1.TypeMetaFieldDef;\n  }\n\n  if (name === graphql_1.TypeNameMetaFieldDef.name && (graphql_1.isObjectType(parentType) || graphql_1.isInterfaceType(parentType) || graphql_1.isUnionType(parentType))) {\n    return graphql_1.TypeNameMetaFieldDef;\n  }\n\n  if (graphql_1.isObjectType(parentType) || graphql_1.isInterfaceType(parentType)) {\n    return parentType.getFields()[name];\n  }\n\n  return undefined;\n}\n\nexports.getFieldDef = getFieldDef;\n\nfunction removeDirectives(ast, directiveNames) {\n  if (!directiveNames.length) return ast;\n  return graphql_1.visit(ast, {\n    Directive(node) {\n      if (!!directiveNames.find(name => name === node.name.value)) return null;\n      return node;\n    }\n\n  });\n}\n\nexports.removeDirectives = removeDirectives;\n\nfunction removeOrphanedFragmentDefinitions(ast, fragmentNamesEligibleForRemoval) {\n  let anyFragmentsRemoved = false;\n  const fragmentSpreadNodeNames = new Set();\n  graphql_1.visit(ast, {\n    FragmentSpread(node) {\n      fragmentSpreadNodeNames.add(node.name.value);\n    }\n\n  });\n  ast = graphql_1.visit(ast, {\n    FragmentDefinition(node) {\n      if (fragmentNamesEligibleForRemoval.has(node.name.value) && !fragmentSpreadNodeNames.has(node.name.value)) {\n        anyFragmentsRemoved = true;\n        return null;\n      }\n\n      return undefined;\n    }\n\n  });\n\n  if (anyFragmentsRemoved) {\n    return removeOrphanedFragmentDefinitions(ast, fragmentNamesEligibleForRemoval);\n  }\n\n  return ast;\n}\n\nfunction removeNodesWithEmptySelectionSets(ast) {\n  ast = graphql_1.visit(ast, {\n    enter(node) {\n      return \"selectionSet\" in node && node.selectionSet != null && node.selectionSet.selections.length === 0 ? null : undefined;\n    }\n\n  });\n  return ast;\n}\n\nfunction removeDirectiveAnnotatedFields(ast, directiveNames) {\n  graphql_1.print;\n  if (!directiveNames.length) return ast;\n  const removedFragmentDefinitionNames = new Set();\n  const removedFragmentSpreadNames = new Set();\n  ast = graphql_1.visit(ast, {\n    enter(node) {\n      if (\"directives\" in node && node.directives && node.directives.find(directive => directiveNames.includes(directive.name.value))) {\n        if (node.kind === graphql_1.Kind.FRAGMENT_DEFINITION) {\n          removedFragmentDefinitionNames.add(node.name.value);\n        }\n\n        graphql_1.visit(node, {\n          FragmentSpread(node) {\n            removedFragmentSpreadNames.add(node.name.value);\n          }\n\n        });\n        return null;\n      }\n\n      return undefined;\n    }\n\n  });\n  ast = graphql_1.visit(ast, {\n    FragmentSpread(node) {\n      if (removedFragmentDefinitionNames.has(node.name.value)) {\n        removedFragmentSpreadNames.add(node.name.value);\n        return null;\n      }\n\n      return undefined;\n    }\n\n  });\n  ast = removeOrphanedFragmentDefinitions(ast, removedFragmentSpreadNames);\n  return removeNodesWithEmptySelectionSets(ast);\n}\n\nexports.removeDirectiveAnnotatedFields = removeDirectiveAnnotatedFields;\nconst typenameField = {\n  kind: graphql_1.Kind.FIELD,\n  name: {\n    kind: graphql_1.Kind.NAME,\n    value: \"__typename\"\n  }\n};\n\nfunction withTypenameFieldAddedWhereNeeded(ast) {\n  return graphql_1.visit(ast, {\n    enter: {\n      SelectionSet(node) {\n        return Object.assign(Object.assign({}, node), {\n          selections: node.selections.filter(selection => !(selection.kind === \"Field\" && selection.name.value === \"__typename\"))\n        });\n      }\n\n    },\n\n    leave(node) {\n      if (!(node.kind === graphql_1.Kind.FIELD || node.kind === graphql_1.Kind.FRAGMENT_DEFINITION || node.kind === graphql_1.Kind.INLINE_FRAGMENT)) {\n        return undefined;\n      }\n\n      if (!node.selectionSet) return undefined;\n      return Object.assign(Object.assign({}, node), {\n        selectionSet: Object.assign(Object.assign({}, node.selectionSet), {\n          selections: [typenameField, ...node.selectionSet.selections]\n        })\n      });\n    }\n\n  });\n}\n\nexports.withTypenameFieldAddedWhereNeeded = withTypenameFieldAddedWhereNeeded;\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n\nfunction simpleCollectFields(context, selectionSet, fields, visitedFragmentNames) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case graphql_1.Kind.FIELD:\n        {\n          const name = getFieldEntryKey(selection);\n\n          if (!fields[name]) {\n            fields[name] = [];\n          }\n\n          fields[name].push(selection);\n          break;\n        }\n\n      case graphql_1.Kind.INLINE_FRAGMENT:\n        {\n          simpleCollectFields(context, selection.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n\n      case graphql_1.Kind.FRAGMENT_SPREAD:\n        {\n          const fragName = selection.name.value;\n          if (visitedFragmentNames[fragName]) continue;\n          visitedFragmentNames[fragName] = true;\n          const fragment = context.fragments[fragName];\n          if (!fragment) continue;\n          simpleCollectFields(context, fragment.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n    }\n  }\n\n  return fields;\n}\n\nexports.simpleCollectFields = simpleCollectFields;\n\nfunction hasClientDirective(node) {\n  return node.directives && node.directives.some(directive => directive.name.value === \"client\");\n}\n\nexports.hasClientDirective = hasClientDirective;","map":{"version":3,"sources":["../../src/utilities/graphql.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nfunction isNode(maybeNode) {\n    return maybeNode && typeof maybeNode.kind === \"string\";\n}\nexports.isNode = isNode;\nfunction isNamedNode(node) {\n    return \"name\" in node;\n}\nexports.isNamedNode = isNamedNode;\nfunction isDirectiveDefinitionNode(node) {\n    return node.kind === graphql_1.Kind.DIRECTIVE_DEFINITION;\n}\nexports.isDirectiveDefinitionNode = isDirectiveDefinitionNode;\nfunction highlightNodeForNode(node) {\n    switch (node.kind) {\n        case graphql_1.Kind.VARIABLE_DEFINITION:\n            return node.variable;\n        default:\n            return isNamedNode(node) ? node.name : node;\n    }\n}\nexports.highlightNodeForNode = highlightNodeForNode;\nfunction getFieldDef(schema, parentType, fieldAST) {\n    const name = fieldAST.name.value;\n    if (name === graphql_1.SchemaMetaFieldDef.name &&\n        schema.getQueryType() === parentType) {\n        return graphql_1.SchemaMetaFieldDef;\n    }\n    if (name === graphql_1.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n        return graphql_1.TypeMetaFieldDef;\n    }\n    if (name === graphql_1.TypeNameMetaFieldDef.name &&\n        (graphql_1.isObjectType(parentType) ||\n            graphql_1.isInterfaceType(parentType) ||\n            graphql_1.isUnionType(parentType))) {\n        return graphql_1.TypeNameMetaFieldDef;\n    }\n    if (graphql_1.isObjectType(parentType) || graphql_1.isInterfaceType(parentType)) {\n        return parentType.getFields()[name];\n    }\n    return undefined;\n}\nexports.getFieldDef = getFieldDef;\nfunction removeDirectives(ast, directiveNames) {\n    if (!directiveNames.length)\n        return ast;\n    return graphql_1.visit(ast, {\n        Directive(node) {\n            if (!!directiveNames.find(name => name === node.name.value))\n                return null;\n            return node;\n        }\n    });\n}\nexports.removeDirectives = removeDirectives;\nfunction removeOrphanedFragmentDefinitions(ast, fragmentNamesEligibleForRemoval) {\n    let anyFragmentsRemoved = false;\n    const fragmentSpreadNodeNames = new Set();\n    graphql_1.visit(ast, {\n        FragmentSpread(node) {\n            fragmentSpreadNodeNames.add(node.name.value);\n        }\n    });\n    ast = graphql_1.visit(ast, {\n        FragmentDefinition(node) {\n            if (fragmentNamesEligibleForRemoval.has(node.name.value) &&\n                !fragmentSpreadNodeNames.has(node.name.value)) {\n                anyFragmentsRemoved = true;\n                return null;\n            }\n            return undefined;\n        }\n    });\n    if (anyFragmentsRemoved) {\n        return removeOrphanedFragmentDefinitions(ast, fragmentNamesEligibleForRemoval);\n    }\n    return ast;\n}\nfunction removeNodesWithEmptySelectionSets(ast) {\n    ast = graphql_1.visit(ast, {\n        enter(node) {\n            return \"selectionSet\" in node &&\n                node.selectionSet != null &&\n                node.selectionSet.selections.length === 0\n                ? null\n                : undefined;\n        }\n    });\n    return ast;\n}\nfunction removeDirectiveAnnotatedFields(ast, directiveNames) {\n    graphql_1.print;\n    if (!directiveNames.length)\n        return ast;\n    const removedFragmentDefinitionNames = new Set();\n    const removedFragmentSpreadNames = new Set();\n    ast = graphql_1.visit(ast, {\n        enter(node) {\n            if (\"directives\" in node &&\n                node.directives &&\n                node.directives.find(directive => directiveNames.includes(directive.name.value))) {\n                if (node.kind === graphql_1.Kind.FRAGMENT_DEFINITION) {\n                    removedFragmentDefinitionNames.add(node.name.value);\n                }\n                graphql_1.visit(node, {\n                    FragmentSpread(node) {\n                        removedFragmentSpreadNames.add(node.name.value);\n                    }\n                });\n                return null;\n            }\n            return undefined;\n        }\n    });\n    ast = graphql_1.visit(ast, {\n        FragmentSpread(node) {\n            if (removedFragmentDefinitionNames.has(node.name.value)) {\n                removedFragmentSpreadNames.add(node.name.value);\n                return null;\n            }\n            return undefined;\n        }\n    });\n    ast = removeOrphanedFragmentDefinitions(ast, removedFragmentSpreadNames);\n    return removeNodesWithEmptySelectionSets(ast);\n}\nexports.removeDirectiveAnnotatedFields = removeDirectiveAnnotatedFields;\nconst typenameField = {\n    kind: graphql_1.Kind.FIELD,\n    name: { kind: graphql_1.Kind.NAME, value: \"__typename\" }\n};\nfunction withTypenameFieldAddedWhereNeeded(ast) {\n    return graphql_1.visit(ast, {\n        enter: {\n            SelectionSet(node) {\n                return Object.assign(Object.assign({}, node), { selections: node.selections.filter(selection => !(selection.kind === \"Field\" &&\n                        selection.name.value === \"__typename\")) });\n            }\n        },\n        leave(node) {\n            if (!(node.kind === graphql_1.Kind.FIELD ||\n                node.kind === graphql_1.Kind.FRAGMENT_DEFINITION ||\n                node.kind === graphql_1.Kind.INLINE_FRAGMENT)) {\n                return undefined;\n            }\n            if (!node.selectionSet)\n                return undefined;\n            return Object.assign(Object.assign({}, node), { selectionSet: Object.assign(Object.assign({}, node.selectionSet), { selections: [typenameField, ...node.selectionSet.selections] }) });\n        }\n    });\n}\nexports.withTypenameFieldAddedWhereNeeded = withTypenameFieldAddedWhereNeeded;\nfunction getFieldEntryKey(node) {\n    return node.alias ? node.alias.value : node.name.value;\n}\nfunction simpleCollectFields(context, selectionSet, fields, visitedFragmentNames) {\n    for (const selection of selectionSet.selections) {\n        switch (selection.kind) {\n            case graphql_1.Kind.FIELD: {\n                const name = getFieldEntryKey(selection);\n                if (!fields[name]) {\n                    fields[name] = [];\n                }\n                fields[name].push(selection);\n                break;\n            }\n            case graphql_1.Kind.INLINE_FRAGMENT: {\n                simpleCollectFields(context, selection.selectionSet, fields, visitedFragmentNames);\n                break;\n            }\n            case graphql_1.Kind.FRAGMENT_SPREAD: {\n                const fragName = selection.name.value;\n                if (visitedFragmentNames[fragName])\n                    continue;\n                visitedFragmentNames[fragName] = true;\n                const fragment = context.fragments[fragName];\n                if (!fragment)\n                    continue;\n                simpleCollectFields(context, fragment.selectionSet, fields, visitedFragmentNames);\n                break;\n            }\n        }\n    }\n    return fields;\n}\nexports.simpleCollectFields = simpleCollectFields;\nfunction hasClientDirective(node) {\n    return (node.directives &&\n        node.directives.some(directive => directive.name.value === \"client\"));\n}\nexports.hasClientDirective = hasClientDirective;\n//# sourceMappingURL=graphql.js.map"]},"metadata":{},"sourceType":"script"}