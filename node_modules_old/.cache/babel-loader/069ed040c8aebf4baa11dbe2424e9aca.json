{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.providesFieldsSelectInvalidType = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst utils_1 = require(\"../../utils\");\n\nexports.providesFieldsSelectInvalidType = ({\n  schema\n}) => {\n  const errors = [];\n  const types = schema.getTypeMap();\n\n  for (const [typeName, namedType] of Object.entries(types)) {\n    if (!graphql_1.isObjectType(namedType)) continue;\n\n    for (const [fieldName, field] of Object.entries(namedType.getFields())) {\n      const fieldFederationMetadata = utils_1.getFederationMetadata(field);\n      const serviceName = fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.serviceName;\n      if (!serviceName) continue;\n      const fieldType = field.type;\n      if (!graphql_1.isObjectType(fieldType)) continue;\n      const allFields = fieldType.getFields();\n\n      if (fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.provides) {\n        const selections = fieldFederationMetadata.provides;\n\n        for (const selection of selections) {\n          const name = selection.name.value;\n          const matchingField = allFields[name];\n\n          if (!matchingField) {\n            errors.push(utils_1.errorWithCode('PROVIDES_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName, fieldName) + `A @provides selects ${name}, but ${fieldType.name}.${name} could not be found`));\n            continue;\n          }\n\n          if (graphql_1.isListType(matchingField.type) || graphql_1.isNonNullType(matchingField.type) && graphql_1.isListType(graphql_1.getNullableType(matchingField.type))) {\n            errors.push(utils_1.errorWithCode('PROVIDES_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName, fieldName) + `A @provides selects ${fieldType.name}.${name}, which is a list type. A field cannot @provide lists.`));\n          }\n\n          if (graphql_1.isInterfaceType(matchingField.type) || graphql_1.isNonNullType(matchingField.type) && graphql_1.isInterfaceType(graphql_1.getNullableType(matchingField.type))) {\n            errors.push(utils_1.errorWithCode('PROVIDES_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName, fieldName) + `A @provides selects ${fieldType.name}.${name}, which is an interface type. A field cannot @provide interfaces.`));\n          }\n\n          if (graphql_1.isUnionType(matchingField.type) || graphql_1.isNonNullType(matchingField.type) && graphql_1.isUnionType(graphql_1.getNullableType(matchingField.type))) {\n            errors.push(utils_1.errorWithCode('PROVIDES_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName, fieldName) + `A @provides selects ${fieldType.name}.${name}, which is a union type. A field cannot @provide union types.`));\n          }\n        }\n      }\n    }\n  }\n\n  return errors;\n};","map":{"version":3,"sources":["../../../../src/composition/validate/postComposition/providesFieldsSelectInvalidType.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.providesFieldsSelectInvalidType = void 0;\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"../../utils\");\nexports.providesFieldsSelectInvalidType = ({ schema, }) => {\n    const errors = [];\n    const types = schema.getTypeMap();\n    for (const [typeName, namedType] of Object.entries(types)) {\n        if (!graphql_1.isObjectType(namedType))\n            continue;\n        for (const [fieldName, field] of Object.entries(namedType.getFields())) {\n            const fieldFederationMetadata = utils_1.getFederationMetadata(field);\n            const serviceName = fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.serviceName;\n            if (!serviceName)\n                continue;\n            const fieldType = field.type;\n            if (!graphql_1.isObjectType(fieldType))\n                continue;\n            const allFields = fieldType.getFields();\n            if (fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.provides) {\n                const selections = fieldFederationMetadata.provides;\n                for (const selection of selections) {\n                    const name = selection.name.value;\n                    const matchingField = allFields[name];\n                    if (!matchingField) {\n                        errors.push(utils_1.errorWithCode('PROVIDES_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName, fieldName) +\n                            `A @provides selects ${name}, but ${fieldType.name}.${name} could not be found`));\n                        continue;\n                    }\n                    if (graphql_1.isListType(matchingField.type) ||\n                        (graphql_1.isNonNullType(matchingField.type) &&\n                            graphql_1.isListType(graphql_1.getNullableType(matchingField.type)))) {\n                        errors.push(utils_1.errorWithCode('PROVIDES_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName, fieldName) +\n                            `A @provides selects ${fieldType.name}.${name}, which is a list type. A field cannot @provide lists.`));\n                    }\n                    if (graphql_1.isInterfaceType(matchingField.type) ||\n                        (graphql_1.isNonNullType(matchingField.type) &&\n                            graphql_1.isInterfaceType(graphql_1.getNullableType(matchingField.type)))) {\n                        errors.push(utils_1.errorWithCode('PROVIDES_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName, fieldName) +\n                            `A @provides selects ${fieldType.name}.${name}, which is an interface type. A field cannot @provide interfaces.`));\n                    }\n                    if (graphql_1.isUnionType(matchingField.type) ||\n                        (graphql_1.isNonNullType(matchingField.type) &&\n                            graphql_1.isUnionType(graphql_1.getNullableType(matchingField.type)))) {\n                        errors.push(utils_1.errorWithCode('PROVIDES_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName, fieldName) +\n                            `A @provides selects ${fieldType.name}.${name}, which is a union type. A field cannot @provide union types.`));\n                    }\n                }\n            }\n        }\n    }\n    return errors;\n};\n//# sourceMappingURL=providesFieldsSelectInvalidType.js.map"]},"metadata":{},"sourceType":"script"}