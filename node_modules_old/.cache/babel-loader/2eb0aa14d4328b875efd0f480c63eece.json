{"ast":null,"code":"\"use strict\"; // tslint:disable interface-over-type-literal\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction build(defaults) {\n  return (options = {}) => {\n    return Object.assign({\n      parse: (i, _) => i\n    }, defaults, options, {\n      input: [],\n      multiple: Boolean(options.multiple),\n      type: 'option'\n    });\n  };\n}\n\nexports.build = build;\n\nfunction boolean(options = {}) {\n  return Object.assign({\n    parse: (b, _) => b\n  }, options, {\n    allowNo: Boolean(options.allowNo),\n    type: 'boolean'\n  });\n}\n\nexports.boolean = boolean;\nexports.integer = build({\n  parse: input => {\n    if (!/^-?\\d+$/.test(input)) throw new Error(`Expected an integer but received: ${input}`);\n    return parseInt(input, 10);\n  }\n});\n\nfunction option(options) {\n  return build(options)();\n}\n\nexports.option = option;\nconst stringFlag = build({});\nexports.string = stringFlag;\nexports.defaultFlags = {\n  color: boolean({\n    allowNo: true\n  })\n};","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/@oclif/parser/lib/flags.js"],"names":["Object","defineProperty","exports","value","build","defaults","options","assign","parse","i","_","input","multiple","Boolean","type","boolean","b","allowNo","integer","test","Error","parseInt","option","stringFlag","string","defaultFlags","color"],"mappings":"AAAA,a,CACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,SAASC,KAAT,CAAeC,QAAf,EAAyB;AACrB,SAAO,CAACC,OAAO,GAAG,EAAX,KAAkB;AACrB,WAAON,MAAM,CAACO,MAAP,CAAc;AAAEC,MAAAA,KAAK,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUD;AAAnB,KAAd,EAAsCJ,QAAtC,EAAgDC,OAAhD,EAAyD;AAAEK,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,QAAQ,EAAEC,OAAO,CAACP,OAAO,CAACM,QAAT,CAA9B;AAAkDE,MAAAA,IAAI,EAAE;AAAxD,KAAzD,CAAP;AACH,GAFD;AAGH;;AACDZ,OAAO,CAACE,KAAR,GAAgBA,KAAhB;;AACA,SAASW,OAAT,CAAiBT,OAAO,GAAG,EAA3B,EAA+B;AAC3B,SAAON,MAAM,CAACO,MAAP,CAAc;AAAEC,IAAAA,KAAK,EAAE,CAACQ,CAAD,EAAIN,CAAJ,KAAUM;AAAnB,GAAd,EAAsCV,OAAtC,EAA+C;AAAEW,IAAAA,OAAO,EAAEJ,OAAO,CAACP,OAAO,CAACW,OAAT,CAAlB;AAAqCH,IAAAA,IAAI,EAAE;AAA3C,GAA/C,CAAP;AACH;;AACDZ,OAAO,CAACa,OAAR,GAAkBA,OAAlB;AACAb,OAAO,CAACgB,OAAR,GAAkBd,KAAK,CAAC;AACpBI,EAAAA,KAAK,EAAEG,KAAK,IAAI;AACZ,QAAI,CAAC,UAAUQ,IAAV,CAAeR,KAAf,CAAL,EACI,MAAM,IAAIS,KAAJ,CAAW,qCAAoCT,KAAM,EAArD,CAAN;AACJ,WAAOU,QAAQ,CAACV,KAAD,EAAQ,EAAR,CAAf;AACH;AALmB,CAAD,CAAvB;;AAOA,SAASW,MAAT,CAAgBhB,OAAhB,EAAyB;AACrB,SAAOF,KAAK,CAACE,OAAD,CAAL,EAAP;AACH;;AACDJ,OAAO,CAACoB,MAAR,GAAiBA,MAAjB;AACA,MAAMC,UAAU,GAAGnB,KAAK,CAAC,EAAD,CAAxB;AACAF,OAAO,CAACsB,MAAR,GAAiBD,UAAjB;AACArB,OAAO,CAACuB,YAAR,GAAuB;AACnBC,EAAAA,KAAK,EAAEX,OAAO,CAAC;AAAEE,IAAAA,OAAO,EAAE;AAAX,GAAD;AADK,CAAvB","sourcesContent":["\"use strict\";\n// tslint:disable interface-over-type-literal\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction build(defaults) {\n    return (options = {}) => {\n        return Object.assign({ parse: (i, _) => i }, defaults, options, { input: [], multiple: Boolean(options.multiple), type: 'option' });\n    };\n}\nexports.build = build;\nfunction boolean(options = {}) {\n    return Object.assign({ parse: (b, _) => b }, options, { allowNo: Boolean(options.allowNo), type: 'boolean' });\n}\nexports.boolean = boolean;\nexports.integer = build({\n    parse: input => {\n        if (!/^-?\\d+$/.test(input))\n            throw new Error(`Expected an integer but received: ${input}`);\n        return parseInt(input, 10);\n    },\n});\nfunction option(options) {\n    return build(options)();\n}\nexports.option = option;\nconst stringFlag = build({});\nexports.string = stringFlag;\nexports.defaultFlags = {\n    color: boolean({ allowNo: true }),\n};\n"]},"metadata":{},"sourceType":"script"}