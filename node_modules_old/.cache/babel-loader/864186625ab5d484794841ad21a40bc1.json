{"ast":null,"code":"'use strict';\n\nconst pMap = require('p-map');\n\nconst Task = require('./lib/task');\n\nconst TaskWrapper = require('./lib/task-wrapper');\n\nconst renderer = require('./lib/renderer');\n\nconst ListrError = require('./lib/listr-error');\n\nconst runTask = (task, context, errors) => {\n  if (!task.isEnabled()) {\n    return Promise.resolve();\n  }\n\n  return new TaskWrapper(task, errors).run(context);\n};\n\nclass Listr {\n  constructor(tasks, opts) {\n    if (tasks && !Array.isArray(tasks) && typeof tasks === 'object') {\n      if (typeof tasks.title === 'string' && typeof tasks.task === 'function') {\n        throw new TypeError('Expected an array of tasks or an options object, got a task object');\n      }\n\n      opts = tasks;\n      tasks = [];\n    }\n\n    if (tasks && !Array.isArray(tasks)) {\n      throw new TypeError('Expected an array of tasks');\n    }\n\n    this._options = Object.assign({\n      showSubtasks: true,\n      concurrent: false,\n      renderer: 'default',\n      nonTTYRenderer: 'verbose'\n    }, opts);\n    this._tasks = [];\n    this.concurrency = 1;\n\n    if (this._options.concurrent === true) {\n      this.concurrency = Infinity;\n    } else if (typeof this._options.concurrent === 'number') {\n      this.concurrency = this._options.concurrent;\n    }\n\n    this._RendererClass = renderer.getRenderer(this._options.renderer, this._options.nonTTYRenderer);\n    this.exitOnError = this._options.exitOnError;\n    this.add(tasks || []);\n  }\n\n  _checkAll(context) {\n    for (const task of this._tasks) {\n      task.check(context);\n    }\n  }\n\n  get tasks() {\n    return this._tasks;\n  }\n\n  setRenderer(value) {\n    this._RendererClass = renderer.getRenderer(value);\n  }\n\n  add(task) {\n    const tasks = Array.isArray(task) ? task : [task];\n\n    for (const task of tasks) {\n      this._tasks.push(new Task(this, task, this._options));\n    }\n\n    return this;\n  }\n\n  render() {\n    if (!this._renderer) {\n      this._renderer = new this._RendererClass(this._tasks, this._options);\n    }\n\n    return this._renderer.render();\n  }\n\n  run(context) {\n    this.render();\n    context = context || Object.create(null);\n    const errors = [];\n\n    this._checkAll(context);\n\n    const tasks = pMap(this._tasks, task => {\n      this._checkAll(context);\n\n      return runTask(task, context, errors);\n    }, {\n      concurrency: this.concurrency\n    });\n    return tasks.then(() => {\n      if (errors.length > 0) {\n        const err = new ListrError('Something went wrong');\n        err.errors = errors;\n        throw err;\n      }\n\n      this._renderer.end();\n\n      return context;\n    }).catch(error => {\n      error.context = context;\n\n      this._renderer.end(error);\n\n      throw error;\n    });\n  }\n\n}\n\nmodule.exports = Listr;","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/listr/index.js"],"names":["pMap","require","Task","TaskWrapper","renderer","ListrError","runTask","task","context","errors","isEnabled","Promise","resolve","run","Listr","constructor","tasks","opts","Array","isArray","title","TypeError","_options","Object","assign","showSubtasks","concurrent","nonTTYRenderer","_tasks","concurrency","Infinity","_RendererClass","getRenderer","exitOnError","add","_checkAll","check","setRenderer","value","push","render","_renderer","create","then","length","err","end","catch","error","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst pMap = require('p-map');\nconst Task = require('./lib/task');\nconst TaskWrapper = require('./lib/task-wrapper');\nconst renderer = require('./lib/renderer');\nconst ListrError = require('./lib/listr-error');\n\nconst runTask = (task, context, errors) => {\n\tif (!task.isEnabled()) {\n\t\treturn Promise.resolve();\n\t}\n\n\treturn new TaskWrapper(task, errors).run(context);\n};\n\nclass Listr {\n\tconstructor(tasks, opts) {\n\t\tif (tasks && !Array.isArray(tasks) && typeof tasks === 'object') {\n\t\t\tif (typeof tasks.title === 'string' && typeof tasks.task === 'function') {\n\t\t\t\tthrow new TypeError('Expected an array of tasks or an options object, got a task object');\n\t\t\t}\n\n\t\t\topts = tasks;\n\t\t\ttasks = [];\n\t\t}\n\n\t\tif (tasks && !Array.isArray(tasks)) {\n\t\t\tthrow new TypeError('Expected an array of tasks');\n\t\t}\n\n\t\tthis._options = Object.assign({\n\t\t\tshowSubtasks: true,\n\t\t\tconcurrent: false,\n\t\t\trenderer: 'default',\n\t\t\tnonTTYRenderer: 'verbose'\n\t\t}, opts);\n\t\tthis._tasks = [];\n\n\t\tthis.concurrency = 1;\n\t\tif (this._options.concurrent === true) {\n\t\t\tthis.concurrency = Infinity;\n\t\t} else if (typeof this._options.concurrent === 'number') {\n\t\t\tthis.concurrency = this._options.concurrent;\n\t\t}\n\n\t\tthis._RendererClass = renderer.getRenderer(this._options.renderer, this._options.nonTTYRenderer);\n\n\t\tthis.exitOnError = this._options.exitOnError;\n\n\t\tthis.add(tasks || []);\n\t}\n\n\t_checkAll(context) {\n\t\tfor (const task of this._tasks) {\n\t\t\ttask.check(context);\n\t\t}\n\t}\n\n\tget tasks() {\n\t\treturn this._tasks;\n\t}\n\n\tsetRenderer(value) {\n\t\tthis._RendererClass = renderer.getRenderer(value);\n\t}\n\n\tadd(task) {\n\t\tconst tasks = Array.isArray(task) ? task : [task];\n\n\t\tfor (const task of tasks) {\n\t\t\tthis._tasks.push(new Task(this, task, this._options));\n\t\t}\n\n\t\treturn this;\n\t}\n\n\trender() {\n\t\tif (!this._renderer) {\n\t\t\tthis._renderer = new this._RendererClass(this._tasks, this._options);\n\t\t}\n\n\t\treturn this._renderer.render();\n\t}\n\n\trun(context) {\n\t\tthis.render();\n\n\t\tcontext = context || Object.create(null);\n\n\t\tconst errors = [];\n\n\t\tthis._checkAll(context);\n\n\t\tconst tasks = pMap(this._tasks, task => {\n\t\t\tthis._checkAll(context);\n\t\t\treturn runTask(task, context, errors);\n\t\t}, {concurrency: this.concurrency});\n\n\t\treturn tasks\n\t\t\t.then(() => {\n\t\t\t\tif (errors.length > 0) {\n\t\t\t\t\tconst err = new ListrError('Something went wrong');\n\t\t\t\t\terr.errors = errors;\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\n\t\t\t\tthis._renderer.end();\n\n\t\t\t\treturn context;\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\terror.context = context;\n\t\t\t\tthis._renderer.end(error);\n\t\t\t\tthrow error;\n\t\t\t});\n\t}\n}\n\nmodule.exports = Listr;\n"]},"metadata":{},"sourceType":"script"}