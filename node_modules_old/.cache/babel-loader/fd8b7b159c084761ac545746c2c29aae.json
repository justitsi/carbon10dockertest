{"ast":null,"code":"'use strict';\n\nconst REGISTRATION_KEY = Symbol('@@any-observable/REGISTRATION');\nlet registered = null;\n\nmodule.exports = (global, loadImplementation) => {\n  return (implementation, opts) => {\n    opts = opts || {}; // global registration unless explicitly  {global: false} in options (default true)\n\n    const registerGlobal = opts.global !== false; // Load any previous global registration\n\n    if (registerGlobal && !registered) {\n      registered = global[REGISTRATION_KEY];\n    }\n\n    if (registered && implementation && registered.implementation !== implementation) {\n      throw new Error(`any-observable already defined as \"${registered.implementation}\". You can only register an implementation before the first call to require('any-observable') and an implementation cannot be changed`);\n    }\n\n    if (!registered) {\n      // Use provided implementation\n      if (implementation && opts.Observable) {\n        registered = {\n          Observable: opts.Observable,\n          implementation\n        };\n      } else {\n        // Require implementation if implementation is specified but not provided\n        registered = loadImplementation(implementation || null);\n      }\n\n      if (registerGlobal) {\n        // Register preference globally in case multiple installations\n        global[REGISTRATION_KEY] = registered;\n      }\n    }\n\n    return registered;\n  };\n};","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/any-observable/loader.js"],"names":["REGISTRATION_KEY","Symbol","registered","module","exports","global","loadImplementation","implementation","opts","registerGlobal","Error","Observable"],"mappings":"AAAA;;AACA,MAAMA,gBAAgB,GAAGC,MAAM,CAAC,+BAAD,CAA/B;AACA,IAAIC,UAAU,GAAG,IAAjB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,MAAD,EAASC,kBAAT,KAAgC;AAChD,SAAO,CAACC,cAAD,EAAiBC,IAAjB,KAA0B;AAChCA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf,CADgC,CAGhC;;AACA,UAAMC,cAAc,GAAGD,IAAI,CAACH,MAAL,KAAgB,KAAvC,CAJgC,CAMhC;;AACA,QAAII,cAAc,IAAI,CAACP,UAAvB,EAAmC;AAClCA,MAAAA,UAAU,GAAGG,MAAM,CAACL,gBAAD,CAAnB;AACA;;AAED,QAAIE,UAAU,IAAIK,cAAd,IAAgCL,UAAU,CAACK,cAAX,KAA8BA,cAAlE,EAAkF;AACjF,YAAM,IAAIG,KAAJ,CAAW,sCAAqCR,UAAU,CAACK,cAAe,uIAA1E,CAAN;AACA;;AAED,QAAI,CAACL,UAAL,EAAiB;AAChB;AACA,UAAIK,cAAc,IAAIC,IAAI,CAACG,UAA3B,EAAuC;AACtCT,QAAAA,UAAU,GAAG;AACZS,UAAAA,UAAU,EAAEH,IAAI,CAACG,UADL;AAEZJ,UAAAA;AAFY,SAAb;AAIA,OALD,MAKO;AACN;AACAL,QAAAA,UAAU,GAAGI,kBAAkB,CAACC,cAAc,IAAI,IAAnB,CAA/B;AACA;;AAED,UAAIE,cAAJ,EAAoB;AACnB;AACAJ,QAAAA,MAAM,CAACL,gBAAD,CAAN,GAA2BE,UAA3B;AACA;AACD;;AAED,WAAOA,UAAP;AACA,GAlCD;AAmCA,CApCD","sourcesContent":["'use strict';\nconst REGISTRATION_KEY = Symbol('@@any-observable/REGISTRATION');\nlet registered = null;\n\nmodule.exports = (global, loadImplementation) => {\n\treturn (implementation, opts) => {\n\t\topts = opts || {};\n\n\t\t// global registration unless explicitly  {global: false} in options (default true)\n\t\tconst registerGlobal = opts.global !== false;\n\n\t\t// Load any previous global registration\n\t\tif (registerGlobal && !registered) {\n\t\t\tregistered = global[REGISTRATION_KEY];\n\t\t}\n\n\t\tif (registered && implementation && registered.implementation !== implementation) {\n\t\t\tthrow new Error(`any-observable already defined as \"${registered.implementation}\". You can only register an implementation before the first call to require('any-observable') and an implementation cannot be changed`);\n\t\t}\n\n\t\tif (!registered) {\n\t\t\t// Use provided implementation\n\t\t\tif (implementation && opts.Observable) {\n\t\t\t\tregistered = {\n\t\t\t\t\tObservable: opts.Observable,\n\t\t\t\t\timplementation\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// Require implementation if implementation is specified but not provided\n\t\t\t\tregistered = loadImplementation(implementation || null);\n\t\t\t}\n\n\t\t\tif (registerGlobal) {\n\t\t\t\t// Register preference globally in case multiple installations\n\t\t\t\tglobal[REGISTRATION_KEY] = registered;\n\t\t\t}\n\t\t}\n\n\t\treturn registered;\n\t};\n};\n"]},"metadata":{},"sourceType":"script"}