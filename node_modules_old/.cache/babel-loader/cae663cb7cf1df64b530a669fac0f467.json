{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PossibleTypeExtensions = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst utils_1 = require(\"../../utils\");\n\nfunction PossibleTypeExtensions(context) {\n  const schema = context.getSchema();\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (graphql_1.isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n\n  const checkExtension = node => {\n    const typeName = node.name.value;\n    const defNode = definedTypes[typeName];\n    const existingType = schema && schema.getType(typeName);\n    const serviceName = node.serviceName;\n    if (!serviceName) return;\n\n    if (defNode) {\n      const expectedKind = utils_1.defKindToExtKind[defNode.kind];\n      const baseKind = defNode.kind;\n\n      if (expectedKind !== node.kind) {\n        context.reportError(utils_1.errorWithCode('EXTENSION_OF_WRONG_KIND', utils_1.logServiceAndType(serviceName, typeName) + `\\`${typeName}\\` was originally defined as a ${baseKind} and can only be extended by a ${expectedKind}. ${serviceName} defines ${typeName} as a ${node.kind}`));\n      }\n    } else if (existingType) {\n      const expectedKind = typeToExtKind(existingType);\n      const baseKind = typeToKind(existingType);\n\n      if (expectedKind !== node.kind) {\n        context.reportError(utils_1.errorWithCode('EXTENSION_OF_WRONG_KIND', utils_1.logServiceAndType(serviceName, typeName) + `\\`${typeName}\\` was originally defined as a ${baseKind} and can only be extended by a ${expectedKind}. ${serviceName} defines ${typeName} as a ${node.kind}`));\n      }\n    } else {\n      context.reportError(utils_1.errorWithCode('EXTENSION_WITH_NO_BASE', utils_1.logServiceAndType(serviceName, typeName) + `\\`${typeName}\\` is an extension type, but \\`${typeName}\\` is not defined in any service`));\n    }\n  };\n\n  return {\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension\n  };\n}\n\nexports.PossibleTypeExtensions = PossibleTypeExtensions;\n\nfunction typeToExtKind(type) {\n  if (graphql_1.isScalarType(type)) {\n    return graphql_1.Kind.SCALAR_TYPE_EXTENSION;\n  } else if (graphql_1.isObjectType(type)) {\n    return graphql_1.Kind.OBJECT_TYPE_EXTENSION;\n  } else if (graphql_1.isInterfaceType(type)) {\n    return graphql_1.Kind.INTERFACE_TYPE_EXTENSION;\n  } else if (graphql_1.isUnionType(type)) {\n    return graphql_1.Kind.UNION_TYPE_EXTENSION;\n  } else if (graphql_1.isEnumType(type)) {\n    return graphql_1.Kind.ENUM_TYPE_EXTENSION;\n  } else if (graphql_1.isInputObjectType(type)) {\n    return graphql_1.Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  }\n\n  return null;\n}\n\nfunction typeToKind(type) {\n  if (graphql_1.isScalarType(type)) {\n    return graphql_1.Kind.SCALAR_TYPE_DEFINITION;\n  } else if (graphql_1.isObjectType(type)) {\n    return graphql_1.Kind.OBJECT_TYPE_DEFINITION;\n  } else if (graphql_1.isInterfaceType(type)) {\n    return graphql_1.Kind.INTERFACE_TYPE_DEFINITION;\n  } else if (graphql_1.isUnionType(type)) {\n    return graphql_1.Kind.UNION_TYPE_DEFINITION;\n  } else if (graphql_1.isEnumType(type)) {\n    return graphql_1.Kind.ENUM_TYPE_DEFINITION;\n  } else if (graphql_1.isInputObjectType(type)) {\n    return graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION;\n  }\n\n  return null;\n}","map":{"version":3,"sources":["../../../../src/composition/validate/sdl/possibleTypeExtensions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PossibleTypeExtensions = void 0;\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"../../utils\");\nfunction PossibleTypeExtensions(context) {\n    const schema = context.getSchema();\n    const definedTypes = Object.create(null);\n    for (const def of context.getDocument().definitions) {\n        if (graphql_1.isTypeDefinitionNode(def)) {\n            definedTypes[def.name.value] = def;\n        }\n    }\n    const checkExtension = (node) => {\n        const typeName = node.name.value;\n        const defNode = definedTypes[typeName];\n        const existingType = schema && schema.getType(typeName);\n        const serviceName = node.serviceName;\n        if (!serviceName)\n            return;\n        if (defNode) {\n            const expectedKind = utils_1.defKindToExtKind[defNode.kind];\n            const baseKind = defNode.kind;\n            if (expectedKind !== node.kind) {\n                context.reportError(utils_1.errorWithCode('EXTENSION_OF_WRONG_KIND', utils_1.logServiceAndType(serviceName, typeName) +\n                    `\\`${typeName}\\` was originally defined as a ${baseKind} and can only be extended by a ${expectedKind}. ${serviceName} defines ${typeName} as a ${node.kind}`));\n            }\n        }\n        else if (existingType) {\n            const expectedKind = typeToExtKind(existingType);\n            const baseKind = typeToKind(existingType);\n            if (expectedKind !== node.kind) {\n                context.reportError(utils_1.errorWithCode('EXTENSION_OF_WRONG_KIND', utils_1.logServiceAndType(serviceName, typeName) +\n                    `\\`${typeName}\\` was originally defined as a ${baseKind} and can only be extended by a ${expectedKind}. ${serviceName} defines ${typeName} as a ${node.kind}`));\n            }\n        }\n        else {\n            context.reportError(utils_1.errorWithCode('EXTENSION_WITH_NO_BASE', utils_1.logServiceAndType(serviceName, typeName) +\n                `\\`${typeName}\\` is an extension type, but \\`${typeName}\\` is not defined in any service`));\n        }\n    };\n    return {\n        ObjectTypeExtension: checkExtension,\n        InterfaceTypeExtension: checkExtension,\n    };\n}\nexports.PossibleTypeExtensions = PossibleTypeExtensions;\nfunction typeToExtKind(type) {\n    if (graphql_1.isScalarType(type)) {\n        return graphql_1.Kind.SCALAR_TYPE_EXTENSION;\n    }\n    else if (graphql_1.isObjectType(type)) {\n        return graphql_1.Kind.OBJECT_TYPE_EXTENSION;\n    }\n    else if (graphql_1.isInterfaceType(type)) {\n        return graphql_1.Kind.INTERFACE_TYPE_EXTENSION;\n    }\n    else if (graphql_1.isUnionType(type)) {\n        return graphql_1.Kind.UNION_TYPE_EXTENSION;\n    }\n    else if (graphql_1.isEnumType(type)) {\n        return graphql_1.Kind.ENUM_TYPE_EXTENSION;\n    }\n    else if (graphql_1.isInputObjectType(type)) {\n        return graphql_1.Kind.INPUT_OBJECT_TYPE_EXTENSION;\n    }\n    return null;\n}\nfunction typeToKind(type) {\n    if (graphql_1.isScalarType(type)) {\n        return graphql_1.Kind.SCALAR_TYPE_DEFINITION;\n    }\n    else if (graphql_1.isObjectType(type)) {\n        return graphql_1.Kind.OBJECT_TYPE_DEFINITION;\n    }\n    else if (graphql_1.isInterfaceType(type)) {\n        return graphql_1.Kind.INTERFACE_TYPE_DEFINITION;\n    }\n    else if (graphql_1.isUnionType(type)) {\n        return graphql_1.Kind.UNION_TYPE_DEFINITION;\n    }\n    else if (graphql_1.isEnumType(type)) {\n        return graphql_1.Kind.ENUM_TYPE_DEFINITION;\n    }\n    else if (graphql_1.isInputObjectType(type)) {\n        return graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION;\n    }\n    return null;\n}\n//# sourceMappingURL=possibleTypeExtensions.js.map"]},"metadata":{},"sourceType":"script"}