{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.duplicateEnumValue = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst utils_1 = require(\"../../utils\");\n\nexports.duplicateEnumValue = ({\n  name: serviceName,\n  typeDefs\n}) => {\n  const errors = [];\n  const enums = {};\n  graphql_1.visit(typeDefs, {\n    EnumTypeDefinition(definition) {\n      const name = definition.name.value;\n      const enumValues = definition.values && definition.values.map(value => value.name.value);\n      if (!enumValues) return definition;\n\n      if (enums[name] && enums[name].length) {\n        enumValues.map(valueName => {\n          if (enums[name].includes(valueName)) {\n            errors.push(utils_1.errorWithCode('DUPLICATE_ENUM_VALUE', utils_1.logServiceAndType(serviceName, name, valueName) + `The enum, \\`${name}\\` has multiple definitions of the \\`${valueName}\\` value.`));\n            return;\n          }\n\n          enums[name].push(valueName);\n        });\n      } else {\n        enums[name] = enumValues;\n      }\n\n      return definition;\n    },\n\n    EnumTypeExtension(definition) {\n      const name = definition.name.value;\n      const enumValues = definition.values && definition.values.map(value => value.name.value);\n      if (!enumValues) return definition;\n\n      if (enums[name] && enums[name].length) {\n        enumValues.map(valueName => {\n          if (enums[name].includes(valueName)) {\n            errors.push(utils_1.errorWithCode('DUPLICATE_ENUM_VALUE', utils_1.logServiceAndType(serviceName, name, valueName) + `The enum, \\`${name}\\` has multiple definitions of the \\`${valueName}\\` value.`));\n            return;\n          }\n\n          enums[name].push(valueName);\n        });\n      } else {\n        enums[name] = enumValues;\n      }\n\n      return definition;\n    }\n\n  });\n  return errors;\n};","map":{"version":3,"sources":["../../../../src/composition/validate/preComposition/duplicateEnumValue.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAGA,MAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEa,OAAA,CAAA,kBAAA,GAAqB,CAAC;AACjC,EAAA,IAAI,EAAE,WAD2B;AAEjC,EAAA;AAFiC,CAAD,KAGV;AACtB,QAAM,MAAM,GAAmB,EAA/B;AAEA,QAAM,KAAK,GAAiC,EAA5C;AAEA,EAAA,SAAA,CAAA,KAAA,CAAM,QAAN,EAAgB;AACd,IAAA,kBAAkB,CAAC,UAAD,EAAW;AAC3B,YAAM,IAAI,GAAG,UAAU,CAAC,IAAX,CAAgB,KAA7B;AACA,YAAM,UAAU,GACd,UAAU,CAAC,MAAX,IAAqB,UAAU,CAAC,MAAX,CAAkB,GAAlB,CAAsB,KAAK,IAAI,KAAK,CAAC,IAAN,CAAW,KAA1C,CADvB;AAGA,UAAI,CAAC,UAAL,EAAiB,OAAO,UAAP;;AAEjB,UAAI,KAAK,CAAC,IAAD,CAAL,IAAe,KAAK,CAAC,IAAD,CAAL,CAAY,MAA/B,EAAuC;AACrC,QAAA,UAAU,CAAC,GAAX,CAAe,SAAS,IAAG;AACzB,cAAI,KAAK,CAAC,IAAD,CAAL,CAAY,QAAZ,CAAqB,SAArB,CAAJ,EAAqC;AACnC,YAAA,MAAM,CAAC,IAAP,CACE,OAAA,CAAA,aAAA,CACE,sBADF,EAEE,OAAA,CAAA,iBAAA,CAAkB,WAAlB,EAA+B,IAA/B,EAAqC,SAArC,IACE,eAAe,IAAI,wCAAwC,SAAS,WAHxE,CADF;AAOA;AACD;;AACD,UAAA,KAAK,CAAC,IAAD,CAAL,CAAY,IAAZ,CAAiB,SAAjB;AACD,SAZD;AAaD,OAdD,MAcO;AACL,QAAA,KAAK,CAAC,IAAD,CAAL,GAAc,UAAd;AACD;;AAED,aAAO,UAAP;AACD,KA3Ba;;AA4Bd,IAAA,iBAAiB,CAAC,UAAD,EAAW;AAC1B,YAAM,IAAI,GAAG,UAAU,CAAC,IAAX,CAAgB,KAA7B;AACA,YAAM,UAAU,GACd,UAAU,CAAC,MAAX,IAAqB,UAAU,CAAC,MAAX,CAAkB,GAAlB,CAAsB,KAAK,IAAI,KAAK,CAAC,IAAN,CAAW,KAA1C,CADvB;AAGA,UAAI,CAAC,UAAL,EAAiB,OAAO,UAAP;;AAEjB,UAAI,KAAK,CAAC,IAAD,CAAL,IAAe,KAAK,CAAC,IAAD,CAAL,CAAY,MAA/B,EAAuC;AACrC,QAAA,UAAU,CAAC,GAAX,CAAe,SAAS,IAAG;AACzB,cAAI,KAAK,CAAC,IAAD,CAAL,CAAY,QAAZ,CAAqB,SAArB,CAAJ,EAAqC;AACnC,YAAA,MAAM,CAAC,IAAP,CACE,OAAA,CAAA,aAAA,CACE,sBADF,EAEE,OAAA,CAAA,iBAAA,CAAkB,WAAlB,EAA+B,IAA/B,EAAqC,SAArC,IACE,eAAe,IAAI,wCAAwC,SAAS,WAHxE,CADF;AAOA;AACD;;AACD,UAAA,KAAK,CAAC,IAAD,CAAL,CAAY,IAAZ,CAAiB,SAAjB;AACD,SAZD;AAaD,OAdD,MAcO;AACL,QAAA,KAAK,CAAC,IAAD,CAAL,GAAc,UAAd;AACD;;AAED,aAAO,UAAP;AACD;;AAtDa,GAAhB;AAyDA,SAAO,MAAP;AACD,CAlEY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.duplicateEnumValue = void 0;\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"../../utils\");\nexports.duplicateEnumValue = ({ name: serviceName, typeDefs, }) => {\n    const errors = [];\n    const enums = {};\n    graphql_1.visit(typeDefs, {\n        EnumTypeDefinition(definition) {\n            const name = definition.name.value;\n            const enumValues = definition.values && definition.values.map(value => value.name.value);\n            if (!enumValues)\n                return definition;\n            if (enums[name] && enums[name].length) {\n                enumValues.map(valueName => {\n                    if (enums[name].includes(valueName)) {\n                        errors.push(utils_1.errorWithCode('DUPLICATE_ENUM_VALUE', utils_1.logServiceAndType(serviceName, name, valueName) +\n                            `The enum, \\`${name}\\` has multiple definitions of the \\`${valueName}\\` value.`));\n                        return;\n                    }\n                    enums[name].push(valueName);\n                });\n            }\n            else {\n                enums[name] = enumValues;\n            }\n            return definition;\n        },\n        EnumTypeExtension(definition) {\n            const name = definition.name.value;\n            const enumValues = definition.values && definition.values.map(value => value.name.value);\n            if (!enumValues)\n                return definition;\n            if (enums[name] && enums[name].length) {\n                enumValues.map(valueName => {\n                    if (enums[name].includes(valueName)) {\n                        errors.push(utils_1.errorWithCode('DUPLICATE_ENUM_VALUE', utils_1.logServiceAndType(serviceName, name, valueName) +\n                            `The enum, \\`${name}\\` has multiple definitions of the \\`${valueName}\\` value.`));\n                        return;\n                    }\n                    enums[name].push(valueName);\n                });\n            }\n            else {\n                enums[name] = enumValues;\n            }\n            return definition;\n        },\n    });\n    return errors;\n};\n//# sourceMappingURL=duplicateEnumValue.js.map"]},"metadata":{},"sourceType":"script"}