{"ast":null,"code":"/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Disposable;\n\n(function (Disposable) {\n  function create(func) {\n    return {\n      dispose: func\n    };\n  }\n\n  Disposable.create = create;\n})(Disposable = exports.Disposable || (exports.Disposable = {}));\n\nvar Event;\n\n(function (Event) {\n  const _disposable = {\n    dispose() {}\n\n  };\n\n  Event.None = function () {\n    return _disposable;\n  };\n})(Event = exports.Event || (exports.Event = {}));\n\nclass CallbackList {\n  add(callback, context = null, bucket) {\n    if (!this._callbacks) {\n      this._callbacks = [];\n      this._contexts = [];\n    }\n\n    this._callbacks.push(callback);\n\n    this._contexts.push(context);\n\n    if (Array.isArray(bucket)) {\n      bucket.push({\n        dispose: () => this.remove(callback, context)\n      });\n    }\n  }\n\n  remove(callback, context = null) {\n    if (!this._callbacks) {\n      return;\n    }\n\n    var foundCallbackWithDifferentContext = false;\n\n    for (var i = 0, len = this._callbacks.length; i < len; i++) {\n      if (this._callbacks[i] === callback) {\n        if (this._contexts[i] === context) {\n          // callback & context match => remove it\n          this._callbacks.splice(i, 1);\n\n          this._contexts.splice(i, 1);\n\n          return;\n        } else {\n          foundCallbackWithDifferentContext = true;\n        }\n      }\n    }\n\n    if (foundCallbackWithDifferentContext) {\n      throw new Error('When adding a listener with a context, you should remove it with the same context');\n    }\n  }\n\n  invoke(...args) {\n    if (!this._callbacks) {\n      return [];\n    }\n\n    var ret = [],\n        callbacks = this._callbacks.slice(0),\n        contexts = this._contexts.slice(0);\n\n    for (var i = 0, len = callbacks.length; i < len; i++) {\n      try {\n        ret.push(callbacks[i].apply(contexts[i], args));\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    return ret;\n  }\n\n  isEmpty() {\n    return !this._callbacks || this._callbacks.length === 0;\n  }\n\n  dispose() {\n    this._callbacks = undefined;\n    this._contexts = undefined;\n  }\n\n}\n\nclass Emitter {\n  constructor(_options) {\n    this._options = _options;\n  }\n  /**\r\n   * For the public to allow to subscribe\r\n   * to events from this Emitter\r\n   */\n\n\n  get event() {\n    if (!this._event) {\n      this._event = (listener, thisArgs, disposables) => {\n        if (!this._callbacks) {\n          this._callbacks = new CallbackList();\n        }\n\n        if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {\n          this._options.onFirstListenerAdd(this);\n        }\n\n        this._callbacks.add(listener, thisArgs);\n\n        let result;\n        result = {\n          dispose: () => {\n            this._callbacks.remove(listener, thisArgs);\n\n            result.dispose = Emitter._noop;\n\n            if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {\n              this._options.onLastListenerRemove(this);\n            }\n          }\n        };\n\n        if (Array.isArray(disposables)) {\n          disposables.push(result);\n        }\n\n        return result;\n      };\n    }\n\n    return this._event;\n  }\n  /**\r\n   * To be kept private to fire an event to\r\n   * subscribers\r\n   */\n\n\n  fire(event) {\n    if (this._callbacks) {\n      this._callbacks.invoke.call(this._callbacks, event);\n    }\n  }\n\n  dispose() {\n    if (this._callbacks) {\n      this._callbacks.dispose();\n\n      this._callbacks = undefined;\n    }\n  }\n\n}\n\nEmitter._noop = function () {};\n\nexports.Emitter = Emitter;","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/vscode-jsonrpc/lib/events.js"],"names":["Object","defineProperty","exports","value","Disposable","create","func","dispose","Event","_disposable","None","CallbackList","add","callback","context","bucket","_callbacks","_contexts","push","Array","isArray","remove","foundCallbackWithDifferentContext","i","len","length","splice","Error","invoke","args","ret","callbacks","slice","contexts","apply","e","console","error","isEmpty","undefined","Emitter","constructor","_options","event","_event","listener","thisArgs","disposables","onFirstListenerAdd","result","_noop","onLastListenerRemove","fire","call"],"mappings":"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","sourcesContent":["/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Disposable;\r\n(function (Disposable) {\r\n    function create(func) {\r\n        return {\r\n            dispose: func\r\n        };\r\n    }\r\n    Disposable.create = create;\r\n})(Disposable = exports.Disposable || (exports.Disposable = {}));\r\nvar Event;\r\n(function (Event) {\r\n    const _disposable = { dispose() { } };\r\n    Event.None = function () { return _disposable; };\r\n})(Event = exports.Event || (exports.Event = {}));\r\nclass CallbackList {\r\n    add(callback, context = null, bucket) {\r\n        if (!this._callbacks) {\r\n            this._callbacks = [];\r\n            this._contexts = [];\r\n        }\r\n        this._callbacks.push(callback);\r\n        this._contexts.push(context);\r\n        if (Array.isArray(bucket)) {\r\n            bucket.push({ dispose: () => this.remove(callback, context) });\r\n        }\r\n    }\r\n    remove(callback, context = null) {\r\n        if (!this._callbacks) {\r\n            return;\r\n        }\r\n        var foundCallbackWithDifferentContext = false;\r\n        for (var i = 0, len = this._callbacks.length; i < len; i++) {\r\n            if (this._callbacks[i] === callback) {\r\n                if (this._contexts[i] === context) {\r\n                    // callback & context match => remove it\r\n                    this._callbacks.splice(i, 1);\r\n                    this._contexts.splice(i, 1);\r\n                    return;\r\n                }\r\n                else {\r\n                    foundCallbackWithDifferentContext = true;\r\n                }\r\n            }\r\n        }\r\n        if (foundCallbackWithDifferentContext) {\r\n            throw new Error('When adding a listener with a context, you should remove it with the same context');\r\n        }\r\n    }\r\n    invoke(...args) {\r\n        if (!this._callbacks) {\r\n            return [];\r\n        }\r\n        var ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);\r\n        for (var i = 0, len = callbacks.length; i < len; i++) {\r\n            try {\r\n                ret.push(callbacks[i].apply(contexts[i], args));\r\n            }\r\n            catch (e) {\r\n                console.error(e);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    isEmpty() {\r\n        return !this._callbacks || this._callbacks.length === 0;\r\n    }\r\n    dispose() {\r\n        this._callbacks = undefined;\r\n        this._contexts = undefined;\r\n    }\r\n}\r\nclass Emitter {\r\n    constructor(_options) {\r\n        this._options = _options;\r\n    }\r\n    /**\r\n     * For the public to allow to subscribe\r\n     * to events from this Emitter\r\n     */\r\n    get event() {\r\n        if (!this._event) {\r\n            this._event = (listener, thisArgs, disposables) => {\r\n                if (!this._callbacks) {\r\n                    this._callbacks = new CallbackList();\r\n                }\r\n                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {\r\n                    this._options.onFirstListenerAdd(this);\r\n                }\r\n                this._callbacks.add(listener, thisArgs);\r\n                let result;\r\n                result = {\r\n                    dispose: () => {\r\n                        this._callbacks.remove(listener, thisArgs);\r\n                        result.dispose = Emitter._noop;\r\n                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {\r\n                            this._options.onLastListenerRemove(this);\r\n                        }\r\n                    }\r\n                };\r\n                if (Array.isArray(disposables)) {\r\n                    disposables.push(result);\r\n                }\r\n                return result;\r\n            };\r\n        }\r\n        return this._event;\r\n    }\r\n    /**\r\n     * To be kept private to fire an event to\r\n     * subscribers\r\n     */\r\n    fire(event) {\r\n        if (this._callbacks) {\r\n            this._callbacks.invoke.call(this._callbacks, event);\r\n        }\r\n    }\r\n    dispose() {\r\n        if (this._callbacks) {\r\n            this._callbacks.dispose();\r\n            this._callbacks = undefined;\r\n        }\r\n    }\r\n}\r\nEmitter._noop = function () { };\r\nexports.Emitter = Emitter;\r\n"]},"metadata":{},"sourceType":"script"}