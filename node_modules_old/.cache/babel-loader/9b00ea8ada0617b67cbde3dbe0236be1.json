{"ast":null,"code":"'use strict';\n\nconst state = require('./state');\n\nconst ListrError = require('./listr-error');\n\nclass TaskWrapper {\n  constructor(task, errors) {\n    this._task = task;\n    this._errors = errors;\n  }\n\n  set title(title) {\n    this._task.title = title;\n\n    this._task.next({\n      type: 'TITLE',\n      data: title\n    });\n  }\n\n  set output(data) {\n    this._task.output = data;\n\n    this._task.next({\n      type: 'DATA',\n      data\n    });\n  }\n\n  get title() {\n    return this._task.title;\n  }\n\n  report(error) {\n    if (error instanceof ListrError) {\n      for (const err of error.errors) {\n        this._errors.push(err);\n      }\n    } else {\n      this._errors.push(error);\n    }\n  }\n\n  skip(message) {\n    if (message && typeof message !== 'string') {\n      throw new TypeError(`Expected \\`message\\` to be of type \\`string\\`, got \\`${typeof message}\\``);\n    }\n\n    if (message) {\n      this._task.output = message;\n    }\n\n    this._task.state = state.SKIPPED;\n  }\n\n  run(ctx) {\n    return this._task.run(ctx, this);\n  }\n\n}\n\nmodule.exports = TaskWrapper;","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/listr/lib/task-wrapper.js"],"names":["state","require","ListrError","TaskWrapper","constructor","task","errors","_task","_errors","title","next","type","data","output","report","error","err","push","skip","message","TypeError","SKIPPED","run","ctx","module","exports"],"mappings":"AAAA;;AACA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,eAAD,CAA1B;;AAEA,MAAME,WAAN,CAAkB;AACjBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACzB,SAAKC,KAAL,GAAaF,IAAb;AACA,SAAKG,OAAL,GAAeF,MAAf;AACA;;AAED,MAAIG,KAAJ,CAAUA,KAAV,EAAiB;AAChB,SAAKF,KAAL,CAAWE,KAAX,GAAmBA,KAAnB;;AAEA,SAAKF,KAAL,CAAWG,IAAX,CAAgB;AACfC,MAAAA,IAAI,EAAE,OADS;AAEfC,MAAAA,IAAI,EAAEH;AAFS,KAAhB;AAIA;;AAED,MAAII,MAAJ,CAAWD,IAAX,EAAiB;AAChB,SAAKL,KAAL,CAAWM,MAAX,GAAoBD,IAApB;;AAEA,SAAKL,KAAL,CAAWG,IAAX,CAAgB;AACfC,MAAAA,IAAI,EAAE,MADS;AAEfC,MAAAA;AAFe,KAAhB;AAIA;;AAED,MAAIH,KAAJ,GAAY;AACX,WAAO,KAAKF,KAAL,CAAWE,KAAlB;AACA;;AAEDK,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACb,QAAIA,KAAK,YAAYb,UAArB,EAAiC;AAChC,WAAK,MAAMc,GAAX,IAAkBD,KAAK,CAACT,MAAxB,EAAgC;AAC/B,aAAKE,OAAL,CAAaS,IAAb,CAAkBD,GAAlB;AACA;AACD,KAJD,MAIO;AACN,WAAKR,OAAL,CAAaS,IAAb,CAAkBF,KAAlB;AACA;AACD;;AAEDG,EAAAA,IAAI,CAACC,OAAD,EAAU;AACb,QAAIA,OAAO,IAAI,OAAOA,OAAP,KAAmB,QAAlC,EAA4C;AAC3C,YAAM,IAAIC,SAAJ,CAAe,wDAAuD,OAAOD,OAAQ,IAArF,CAAN;AACA;;AAED,QAAIA,OAAJ,EAAa;AACZ,WAAKZ,KAAL,CAAWM,MAAX,GAAoBM,OAApB;AACA;;AAED,SAAKZ,KAAL,CAAWP,KAAX,GAAmBA,KAAK,CAACqB,OAAzB;AACA;;AAEDC,EAAAA,GAAG,CAACC,GAAD,EAAM;AACR,WAAO,KAAKhB,KAAL,CAAWe,GAAX,CAAeC,GAAf,EAAoB,IAApB,CAAP;AACA;;AApDgB;;AAuDlBC,MAAM,CAACC,OAAP,GAAiBtB,WAAjB","sourcesContent":["'use strict';\nconst state = require('./state');\nconst ListrError = require('./listr-error');\n\nclass TaskWrapper {\n\tconstructor(task, errors) {\n\t\tthis._task = task;\n\t\tthis._errors = errors;\n\t}\n\n\tset title(title) {\n\t\tthis._task.title = title;\n\n\t\tthis._task.next({\n\t\t\ttype: 'TITLE',\n\t\t\tdata: title\n\t\t});\n\t}\n\n\tset output(data) {\n\t\tthis._task.output = data;\n\n\t\tthis._task.next({\n\t\t\ttype: 'DATA',\n\t\t\tdata\n\t\t});\n\t}\n\n\tget title() {\n\t\treturn this._task.title;\n\t}\n\n\treport(error) {\n\t\tif (error instanceof ListrError) {\n\t\t\tfor (const err of error.errors) {\n\t\t\t\tthis._errors.push(err);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._errors.push(error);\n\t\t}\n\t}\n\n\tskip(message) {\n\t\tif (message && typeof message !== 'string') {\n\t\t\tthrow new TypeError(`Expected \\`message\\` to be of type \\`string\\`, got \\`${typeof message}\\``);\n\t\t}\n\n\t\tif (message) {\n\t\t\tthis._task.output = message;\n\t\t}\n\n\t\tthis._task.state = state.SKIPPED;\n\t}\n\n\trun(ctx) {\n\t\treturn this._task.run(ctx, this);\n\t}\n}\n\nmodule.exports = TaskWrapper;\n"]},"metadata":{},"sourceType":"script"}