{"ast":null,"code":"'use strict';\n\nconst figures = require('figures');\n\nconst cliCursor = require('cli-cursor');\n\nconst utils = require('./lib/utils');\n\nconst renderHelper = (task, event, options) => {\n  const log = utils.log.bind(undefined, options);\n\n  if (event.type === 'STATE') {\n    const message = task.isPending() ? 'started' : task.state;\n    log(`${task.title} [${message}]`);\n\n    if (task.isSkipped() && task.output) {\n      log(`${figures.arrowRight} ${task.output}`);\n    }\n  } else if (event.type === 'DATA') {\n    log(`${figures.arrowRight} ${event.data}`);\n  } else if (event.type === 'TITLE') {\n    log(`${task.title} [title changed]`);\n  }\n};\n\nconst render = (tasks, options) => {\n  for (const task of tasks) {\n    task.subscribe(event => {\n      if (event.type === 'SUBTASKS') {\n        render(task.subtasks, options);\n        return;\n      }\n\n      renderHelper(task, event, options);\n    }, err => {\n      console.log(err);\n    });\n  }\n};\n\nclass VerboseRenderer {\n  constructor(tasks, options) {\n    this._tasks = tasks;\n    this._options = Object.assign({\n      dateFormat: 'HH:mm:ss'\n    }, options);\n  }\n\n  static get nonTTY() {\n    return true;\n  }\n\n  render() {\n    cliCursor.hide();\n    render(this._tasks, this._options);\n  }\n\n  end() {\n    cliCursor.show();\n  }\n\n}\n\nmodule.exports = VerboseRenderer;","map":{"version":3,"sources":["/Users/hristobelchev/test_projects/testing_react/react-box-app/box-app/node_modules/listr-verbose-renderer/index.js"],"names":["figures","require","cliCursor","utils","renderHelper","task","event","options","log","bind","undefined","type","message","isPending","state","title","isSkipped","output","arrowRight","data","render","tasks","subscribe","subtasks","err","console","VerboseRenderer","constructor","_tasks","_options","Object","assign","dateFormat","nonTTY","hide","end","show","module","exports"],"mappings":"AAAA;;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,aAAD,CAArB;;AAEA,MAAMG,YAAY,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,OAAd,KAA0B;AAC9C,QAAMC,GAAG,GAAGL,KAAK,CAACK,GAAN,CAAUC,IAAV,CAAeC,SAAf,EAA0BH,OAA1B,CAAZ;;AAEA,MAAID,KAAK,CAACK,IAAN,KAAe,OAAnB,EAA4B;AAC3B,UAAMC,OAAO,GAAGP,IAAI,CAACQ,SAAL,KAAmB,SAAnB,GAA+BR,IAAI,CAACS,KAApD;AAEAN,IAAAA,GAAG,CAAE,GAAEH,IAAI,CAACU,KAAM,KAAIH,OAAQ,GAA3B,CAAH;;AAEA,QAAIP,IAAI,CAACW,SAAL,MAAoBX,IAAI,CAACY,MAA7B,EAAqC;AACpCT,MAAAA,GAAG,CAAE,GAAER,OAAO,CAACkB,UAAW,IAAGb,IAAI,CAACY,MAAO,EAAtC,CAAH;AACA;AACD,GARD,MAQO,IAAIX,KAAK,CAACK,IAAN,KAAe,MAAnB,EAA2B;AACjCH,IAAAA,GAAG,CAAE,GAAER,OAAO,CAACkB,UAAW,IAAGZ,KAAK,CAACa,IAAK,EAArC,CAAH;AACA,GAFM,MAEA,IAAIb,KAAK,CAACK,IAAN,KAAe,OAAnB,EAA4B;AAClCH,IAAAA,GAAG,CAAE,GAAEH,IAAI,CAACU,KAAM,kBAAf,CAAH;AACA;AACD,CAhBD;;AAkBA,MAAMK,MAAM,GAAG,CAACC,KAAD,EAAQd,OAAR,KAAoB;AAClC,OAAK,MAAMF,IAAX,IAAmBgB,KAAnB,EAA0B;AACzBhB,IAAAA,IAAI,CAACiB,SAAL,CACChB,KAAK,IAAI;AACR,UAAIA,KAAK,CAACK,IAAN,KAAe,UAAnB,EAA+B;AAC9BS,QAAAA,MAAM,CAACf,IAAI,CAACkB,QAAN,EAAgBhB,OAAhB,CAAN;AACA;AACA;;AAEDH,MAAAA,YAAY,CAACC,IAAD,EAAOC,KAAP,EAAcC,OAAd,CAAZ;AACA,KARF,EASCiB,GAAG,IAAI;AACNC,MAAAA,OAAO,CAACjB,GAAR,CAAYgB,GAAZ;AACA,KAXF;AAaA;AACD,CAhBD;;AAkBA,MAAME,eAAN,CAAsB;AACrBC,EAAAA,WAAW,CAACN,KAAD,EAAQd,OAAR,EAAiB;AAC3B,SAAKqB,MAAL,GAAcP,KAAd;AACA,SAAKQ,QAAL,GAAgBC,MAAM,CAACC,MAAP,CAAc;AAC7BC,MAAAA,UAAU,EAAE;AADiB,KAAd,EAEbzB,OAFa,CAAhB;AAGA;;AAED,aAAW0B,MAAX,GAAoB;AACnB,WAAO,IAAP;AACA;;AAEDb,EAAAA,MAAM,GAAG;AACRlB,IAAAA,SAAS,CAACgC,IAAV;AACAd,IAAAA,MAAM,CAAC,KAAKQ,MAAN,EAAc,KAAKC,QAAnB,CAAN;AACA;;AAEDM,EAAAA,GAAG,GAAG;AACLjC,IAAAA,SAAS,CAACkC,IAAV;AACA;;AAnBoB;;AAsBtBC,MAAM,CAACC,OAAP,GAAiBZ,eAAjB","sourcesContent":["'use strict';\nconst figures = require('figures');\nconst cliCursor = require('cli-cursor');\nconst utils = require('./lib/utils');\n\nconst renderHelper = (task, event, options) => {\n\tconst log = utils.log.bind(undefined, options);\n\n\tif (event.type === 'STATE') {\n\t\tconst message = task.isPending() ? 'started' : task.state;\n\n\t\tlog(`${task.title} [${message}]`);\n\n\t\tif (task.isSkipped() && task.output) {\n\t\t\tlog(`${figures.arrowRight} ${task.output}`);\n\t\t}\n\t} else if (event.type === 'DATA') {\n\t\tlog(`${figures.arrowRight} ${event.data}`);\n\t} else if (event.type === 'TITLE') {\n\t\tlog(`${task.title} [title changed]`);\n\t}\n};\n\nconst render = (tasks, options) => {\n\tfor (const task of tasks) {\n\t\ttask.subscribe(\n\t\t\tevent => {\n\t\t\t\tif (event.type === 'SUBTASKS') {\n\t\t\t\t\trender(task.subtasks, options);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trenderHelper(task, event, options);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tconsole.log(err);\n\t\t\t}\n\t\t);\n\t}\n};\n\nclass VerboseRenderer {\n\tconstructor(tasks, options) {\n\t\tthis._tasks = tasks;\n\t\tthis._options = Object.assign({\n\t\t\tdateFormat: 'HH:mm:ss'\n\t\t}, options);\n\t}\n\n\tstatic get nonTTY() {\n\t\treturn true;\n\t}\n\n\trender() {\n\t\tcliCursor.hide();\n\t\trender(this._tasks, this._options);\n\t}\n\n\tend() {\n\t\tcliCursor.show();\n\t}\n}\n\nmodule.exports = VerboseRenderer;\n"]},"metadata":{},"sourceType":"script"}